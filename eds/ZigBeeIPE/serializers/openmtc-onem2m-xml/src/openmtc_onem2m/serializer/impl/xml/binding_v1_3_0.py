# src/openmtc_onem2m/serializer/impl/xml/binding_v1_3_0.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:c8fc796cba97ca072abcdc015b20ae36c71c4eba
# Generated 2015-09-15 12:44:33.838007 by PyXB version 1.2.3
# Namespace http://www.onem2m.org/xml/protocols

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:bffb3194-5b96-11e5-a653-f0def19fbf0c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(u'http://www.onem2m.org/xml/protocols', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.float."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 149, 6)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.float
STD_ANON._InitializeFacetMap()

# Atomic simple type: {http://www.onem2m.org/xml/protocols}countryCode
class countryCode (pyxb.binding.datatypes.string):

    """2-character country code as defined by ISO-3166"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'countryCode')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 160, 1)
    _Documentation = u'2-character country code as defined by ISO-3166'
countryCode._CF_pattern = pyxb.binding.facets.CF_pattern()
countryCode._CF_pattern.addPattern(pattern=u'[A-Z]{2}')
countryCode._InitializeFacetMap(countryCode._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'countryCode', countryCode)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}ipv4
class ipv4 (pyxb.binding.datatypes.token):

    """ An IP version 4 address, with optional CIDR suffix in the range /0
				... /32. """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ipv4')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 173, 1)
    _Documentation = u' An IP version 4 address, with optional CIDR suffix in the range /0\n\t\t\t\t... /32. '
ipv4._CF_pattern = pyxb.binding.facets.CF_pattern()
ipv4._CF_pattern.addPattern(pattern=u'(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])(/([0-9]|[1-2][0-9]|3[0-2]))?')
ipv4._CF_pattern.addPattern(pattern=u'[0-9A-Fa-f]{8}(/([0-9]|[1-2][0-9]|3[0-2]))?')
ipv4._InitializeFacetMap(ipv4._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'ipv4', ipv4)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}ipv6
class ipv6 (pyxb.binding.datatypes.token):

    """ An IP version 6 address, based on RFC 1884, with optional CIDR suffix
				in the range /0 ... /128. """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ipv6')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 185, 1)
    _Documentation = u' An IP version 6 address, based on RFC 1884, with optional CIDR suffix\n\t\t\t\tin the range /0 ... /128. '
ipv6._CF_pattern = pyxb.binding.facets.CF_pattern()
ipv6._CF_pattern.addPattern(pattern=u'[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u':(:[0-9A-Fa-f]{1,4}){1,7}')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,6}(:[0-9A-Fa-f]{1,4}){1}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1}(:[0-9A-Fa-f]{1,4}){1,6}(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'([0-9A-Fa-f]{1,4}:){1,7}:(/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?')
ipv6._CF_pattern.addPattern(pattern=u'((:(:0{1,4}){0,3}(:(0{1,4}|[fF]{4}))?)|(0{1,4}:(:0{1,4}){0,2}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){2}(:0{1,4})?(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){3}(:(0{1,4}|[fF]{4}))?)|((0{1,4}:){4}(0{1,4}|[fF]{4})?)):(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])')
ipv6._CF_pattern.addPattern(pattern=u'::(/0)?')
ipv6._InitializeFacetMap(ipv6._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'ipv6', ipv6)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.positiveInteger):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 43, 15)
    _Documentation = None
STD_ANON_._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.positiveInteger, value=pyxb.binding.datatypes.nonNegativeInteger(11L))
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_maxExclusive)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 52, 16)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.n0 = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'0', tag=u'n0')
STD_ANON_2.n1 = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'1', tag=u'n1')
STD_ANON_2.n0_1 = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=u'0 1', tag=u'n0_1')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}ID
class ID (pyxb.binding.datatypes.anyURI):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 34, 1)
    _Documentation = None
ID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ID', ID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}nodeID
class nodeID (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'nodeID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 38, 1)
    _Documentation = None
nodeID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'nodeID', nodeID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}deviceID
class deviceID (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'deviceID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 42, 1)
    _Documentation = None
deviceID._CF_pattern = pyxb.binding.facets.CF_pattern()
deviceID._CF_pattern.addPattern(pattern=u'urn:dev:ops:[\\dABCDEFabcdef]{6}-[\\w_%]+-[\\w_%]+')
deviceID._CF_pattern.addPattern(pattern=u'urn:dev:os:[\\dABCDEFabcdef]{6}-[\\w_%]+')
deviceID._CF_pattern.addPattern(pattern=u'urn:imei:\\d{15}')
deviceID._CF_pattern.addPattern(pattern=u'urn:esn:[\\dABCDEFabcdef]{8}')
deviceID._CF_pattern.addPattern(pattern=u'urn:meid:[\\dABCDEFabcdef]{14}')
deviceID._InitializeFacetMap(deviceID._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'deviceID', deviceID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}externalID
class externalID (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'externalID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 52, 1)
    _Documentation = None
externalID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'externalID', externalID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}requestID
class requestID (pyxb.binding.datatypes.token):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'requestID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 56, 1)
    _Documentation = None
requestID._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'requestID', requestID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}nhURI
class nhURI (pyxb.binding.datatypes.anyURI):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'nhURI')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 60, 1)
    _Documentation = None
nhURI._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'nhURI', nhURI)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_3 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.token."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 75, 3)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.token
STD_ANON_3._InitializeFacetMap()

# Atomic simple type: {http://www.onem2m.org/xml/protocols}triggerRecipientID
class triggerRecipientID (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'triggerRecipientID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 82, 4)
    _Documentation = None
triggerRecipientID._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=triggerRecipientID, value=pyxb.binding.datatypes.unsignedInt(65535L))
triggerRecipientID._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=triggerRecipientID, value=pyxb.binding.datatypes.unsignedInt(0L))
triggerRecipientID._InitializeFacetMap(triggerRecipientID._CF_maxInclusive,
   triggerRecipientID._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'triggerRecipientID', triggerRecipientID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}longMin-1
class longMin_1 (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'longMin-1')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 100, 1)
    _Documentation = None
longMin_1._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=longMin_1, value=pyxb.binding.datatypes.long(-1L))
longMin_1._InitializeFacetMap(longMin_1._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', u'longMin-1', longMin_1)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_4 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.nonNegativeInteger."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 121, 3)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.nonNegativeInteger
STD_ANON_4._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_5 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.string."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 132, 3)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.string
STD_ANON_5._InitializeFacetMap()

# Atomic simple type: {http://www.onem2m.org/xml/protocols}timestamp
class timestamp (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'timestamp')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 140, 1)
    _Documentation = None
timestamp._CF_pattern = pyxb.binding.facets.CF_pattern()
timestamp._CF_pattern.addPattern(pattern=u'\\d{4}(0[1-9]|1[0-2])(0[1-9]|[1-2]\\d|30|31)T([01]\\d|2[0-3])[0-5]\\d[0-5]\\d')
timestamp._InitializeFacetMap(timestamp._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'timestamp', timestamp)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.long):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 154, 3)
    _Documentation = None
STD_ANON_6._InitializeFacetMap()

# Atomic simple type: {http://www.onem2m.org/xml/protocols}typeOfContent
class typeOfContent (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'typeOfContent')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 161, 1)
    _Documentation = None
typeOfContent._CF_pattern = pyxb.binding.facets.CF_pattern()
typeOfContent._CF_pattern.addPattern(pattern=u'[\\w/!#$^_.+&\\-]+')
typeOfContent._InitializeFacetMap(typeOfContent._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'typeOfContent', typeOfContent)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}contentInfo
class contentInfo (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'contentInfo')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 167, 1)
    _Documentation = None
contentInfo._CF_pattern = pyxb.binding.facets.CF_pattern()
contentInfo._CF_pattern.addPattern(pattern=u'[\\w/!#$^_.+&\\-]+(:[0-2])?')
contentInfo._InitializeFacetMap(contentInfo._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'contentInfo', contentInfo)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 179, 12)
    _Documentation = None
STD_ANON_7._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_7, value=pyxb.binding.datatypes.integer(999L))
STD_ANON_7._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_7, value=pyxb.binding.datatypes.integer(100L))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_maxInclusive,
   STD_ANON_7._CF_minInclusive)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 194, 12)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=u'0', tag=None)
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}scheduleEntry
class scheduleEntry (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'scheduleEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 220, 1)
    _Documentation = None
scheduleEntry._CF_pattern = pyxb.binding.facets.CF_pattern()
scheduleEntry._CF_pattern.addPattern(pattern=u'(([*]|[1-5]?\\d([,-][1-5]?\\d)*)\\s+){2}([*]|((1?\\d|2[0-3])([,-](1?\\d|2[0-3]))*))\\s+([*]|(([1-9]|1\\d|2\\d|3[01])([,-]([1-9]|1\\d|2\\d|3[01]))*))\\s+([*]|(([1-9]|1[0-2])([,-]([1-9]|1[0-2]))*))\\s+([*]|([0-6]([,-][0-6])*))')
scheduleEntry._InitializeFacetMap(scheduleEntry._CF_pattern)
Namespace.addCategoryObject('typeBinding', u'scheduleEntry', scheduleEntry)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_9 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.anyURI."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 229, 3)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.anyURI
STD_ANON_9._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_10 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.NCName."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 521, 8)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.NCName
STD_ANON_10._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_11 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.NCName."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 555, 8)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.NCName
STD_ANON_11._InitializeFacetMap()

# Atomic simple type: {http://www.onem2m.org/xml/protocols}resourceType
class resourceType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'resourceType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 30, 1)
    _Documentation = ''
resourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=resourceType, enum_prefix=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'8', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'9', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'11', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'12', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'13', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'14', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'15', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'16', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'17', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'18', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'19', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'20', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'21', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'22', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'23', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10001', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10002', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10003', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10004', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10009', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10010', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10013', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10014', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10016', tag=None)
resourceType._CF_enumeration.addEnumeration(unicode_value=u'10018', tag=None)
resourceType._InitializeFacetMap(resourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'resourceType', resourceType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}cseTypeID
class cseTypeID (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for cseType attribute of <CSEBase> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cseTypeID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 104, 1)
    _Documentation = u'Used for cseType attribute of <CSEBase> resource.'
cseTypeID._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cseTypeID, enum_prefix=None)
cseTypeID._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
cseTypeID._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
cseTypeID._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
cseTypeID._InitializeFacetMap(cseTypeID._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'cseTypeID', cseTypeID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}locationSource
class locationSource (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for locationSource attribute of <locationPolicy> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'locationSource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 118, 1)
    _Documentation = u'Used for locationSource attribute of <locationPolicy> resource.'
locationSource._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=locationSource, enum_prefix=None)
locationSource._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
locationSource._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
locationSource._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
locationSource._InitializeFacetMap(locationSource._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'locationSource', locationSource)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}stdEventCats
class stdEventCats (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for ec parameter in request and eventCat attribute of <delivery> resource and cmdh
				policy resource types."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'stdEventCats')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 132, 1)
    _Documentation = u'Used for ec parameter in request and eventCat attribute of <delivery> resource and cmdh\n\t\t\t\tpolicy resource types.'
stdEventCats._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stdEventCats, enum_prefix=None)
stdEventCats._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
stdEventCats._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
stdEventCats._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
stdEventCats._InitializeFacetMap(stdEventCats._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'stdEventCats', stdEventCats)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}operation
class operation (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for Operation parameter in request and operation attribute in <request> resource as well as resource as well as operationMonitor
			"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'operation')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 147, 1)
    _Documentation = u'Used for Operation parameter in request and operation attribute in <request> resource as well as resource as well as operationMonitor\n\t\t\t'
operation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=operation, enum_prefix=None)
operation._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
operation._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
operation._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
operation._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
operation._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
operation._InitializeFacetMap(operation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'operation', operation)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}responseType
class responseType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for rt parameter in request and operation attribute in <request> resource
			"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'responseType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 166, 1)
    _Documentation = u'Used for rt parameter in request and operation attribute in <request> resource\n\t\t\t'
responseType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=responseType, enum_prefix=None)
responseType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
responseType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
responseType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
responseType._InitializeFacetMap(responseType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'responseType', responseType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}resultContent
class resultContent (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for Result Content parameter in request."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'resultContent')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 181, 1)
    _Documentation = u'Used for Result Content parameter in request.'
resultContent._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=resultContent, enum_prefix=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'0', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
resultContent._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
resultContent._InitializeFacetMap(resultContent._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'resultContent', resultContent)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}discResType
class discResType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used in <request> """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'discResType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 205, 1)
    _Documentation = u'Used in <request> '
discResType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=discResType, enum_prefix=None)
discResType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
discResType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
discResType._InitializeFacetMap(discResType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'discResType', discResType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}responseStatusCode
class responseStatusCode (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'responseStatusCode')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 217, 1)
    _Documentation = ''
responseStatusCode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=responseStatusCode, enum_prefix=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'1000', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'2000', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'2001', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'2002', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'2004', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4000', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4004', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4005', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4008', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4101', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4102', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4103', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4104', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'4105', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5000', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5001', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5103', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5105', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5106', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5203', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5204', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5205', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'5206', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6003', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6005', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6010', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6011', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6020', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6021', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6022', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6023', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6024', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6025', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6026', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6028', tag=None)
responseStatusCode._CF_enumeration.addEnumeration(unicode_value=u'6029', tag=None)
responseStatusCode._InitializeFacetMap(responseStatusCode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'responseStatusCode', responseStatusCode)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}requestStatus
class requestStatus (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for request Status in the <request> resource"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'requestStatus')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 297, 1)
    _Documentation = u'Used for request Status in the <request> resource'
requestStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=requestStatus, enum_prefix=None)
requestStatus._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
requestStatus._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
requestStatus._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
requestStatus._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
requestStatus._InitializeFacetMap(requestStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'requestStatus', requestStatus)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}memberType
class memberType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for memberType attribute in <group> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'memberType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 313, 1)
    _Documentation = u'Used for memberType attribute in <group> resource.'
memberType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=memberType, enum_prefix=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'8', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'9', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'10', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'11', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'12', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'13', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'14', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'15', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'16', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'17', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'18', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'19', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'20', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'21', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'22', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'23', tag=None)
memberType._CF_enumeration.addEnumeration(unicode_value=u'24', tag=None)
memberType._InitializeFacetMap(memberType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'memberType', memberType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}consistencyStrategy
class consistencyStrategy (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for consistencyStrategy attribute in <group> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'consistencyStrategy')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 370, 1)
    _Documentation = u'Used for consistencyStrategy attribute in <group> resource.'
consistencyStrategy._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=consistencyStrategy, enum_prefix=None)
consistencyStrategy._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
consistencyStrategy._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
consistencyStrategy._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
consistencyStrategy._InitializeFacetMap(consistencyStrategy._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'consistencyStrategy', consistencyStrategy)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}cmdType
class cmdType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for cmdType attribute in <mgmtCmd> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'cmdType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 384, 1)
    _Documentation = u'Used for cmdType attribute in <mgmtCmd> resource.'
cmdType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=cmdType, enum_prefix=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
cmdType._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
cmdType._InitializeFacetMap(cmdType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'cmdType', cmdType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}execModeType
class execModeType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for execModeType attribute in <mgmtCmd> and <execInstance> resource.
			"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'execModeType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 406, 1)
    _Documentation = u'Used for execModeType attribute in <mgmtCmd> and <execInstance> resource.\n\t\t\t'
execModeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=execModeType, enum_prefix=None)
execModeType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
execModeType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
execModeType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
execModeType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
execModeType._InitializeFacetMap(execModeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'execModeType', execModeType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}execStatusType
class execStatusType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for execStatusType attribute in <execInstance> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'execStatusType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 423, 1)
    _Documentation = u'Used for execStatusType attribute in <execInstance> resource.'
execStatusType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=execStatusType, enum_prefix=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
execStatusType._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
execStatusType._InitializeFacetMap(execStatusType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'execStatusType', execStatusType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}execResultType
class execResultType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'execResultType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 444, 1)
    _Documentation = ''
execResultType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=execResultType, enum_prefix=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'8', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'9', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'10', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'11', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'12', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'13', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'14', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'15', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'16', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'17', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'18', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'19', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'20', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'21', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'22', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'23', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'24', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'25', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'26', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'27', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'28', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'29', tag=None)
execResultType._CF_enumeration.addEnumeration(unicode_value=u'30', tag=None)
execResultType._InitializeFacetMap(execResultType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'execResultType', execResultType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}pendingNotification
class pendingNotification (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """This is used for pendingNotification attribute in <subscription> resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'pendingNotification')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 512, 1)
    _Documentation = u'This is used for pendingNotification attribute in <subscription> resource.'
pendingNotification._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=pendingNotification, enum_prefix=None)
pendingNotification._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
pendingNotification._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
pendingNotification._InitializeFacetMap(pendingNotification._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'pendingNotification', pendingNotification)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}notificationContentType
class notificationContentType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notificationContentType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 524, 1)
    _Documentation = ''
notificationContentType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=notificationContentType, enum_prefix=None)
notificationContentType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
notificationContentType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
notificationContentType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
notificationContentType._InitializeFacetMap(notificationContentType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'notificationContentType', notificationContentType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}notificationEventType
class notificationEventType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used in the notificationEventType element of eventNotificationCriteria attribute of subscruiption resource"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notificationEventType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 538, 1)
    _Documentation = u'Used in the notificationEventType element of eventNotificationCriteria attribute of subscruiption resource'
notificationEventType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=notificationEventType, enum_prefix=None)
notificationEventType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
notificationEventType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
notificationEventType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
notificationEventType._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
notificationEventType._InitializeFacetMap(notificationEventType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'notificationEventType', notificationEventType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}status
class status (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """This is used for [software], [firmware] resources."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'status')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 555, 1)
    _Documentation = u'This is used for [software], [firmware] resources.'
status._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=status, enum_prefix=None)
status._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
status._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
status._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
status._InitializeFacetMap(status._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'status', status)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}batteryStatus
class batteryStatus (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """This is used for [battery] resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'batteryStatus')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 569, 1)
    _Documentation = u'This is used for [battery] resource.'
batteryStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=batteryStatus, enum_prefix=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
batteryStatus._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
batteryStatus._InitializeFacetMap(batteryStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'batteryStatus', batteryStatus)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}mgmtDefinition
class mgmtDefinition (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """This is used for mgmtObj resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mgmtDefinition')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 591, 1)
    _Documentation = u'This is used for mgmtObj resource.'
mgmtDefinition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=mgmtDefinition, enum_prefix=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'0', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1001', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1002', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1003', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1004', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1005', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1006', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1007', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1008', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1009', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1010', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1011', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1012', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1013', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1014', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1015', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1016', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1017', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1018', tag=None)
mgmtDefinition._CF_enumeration.addEnumeration(unicode_value=u'1019', tag=None)
mgmtDefinition._InitializeFacetMap(mgmtDefinition._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'mgmtDefinition', mgmtDefinition)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}logTypeId
class logTypeId (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for the logTypeId attribute of [eventLog] Management Resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'logTypeId')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 641, 1)
    _Documentation = u'Used for the logTypeId attribute of [eventLog] Management Resource.'
logTypeId._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=logTypeId, enum_prefix=None)
logTypeId._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
logTypeId._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
logTypeId._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
logTypeId._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
logTypeId._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
logTypeId._InitializeFacetMap(logTypeId._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'logTypeId', logTypeId)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}logStatus
class logStatus (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used for the logStatus attribute of [eventLog] Management Resource."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'logStatus')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 659, 1)
    _Documentation = u'Used for the logStatus attribute of [eventLog] Management Resource.'
logStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=logStatus, enum_prefix=None)
logStatus._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
logStatus._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
logStatus._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
logStatus._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
logStatus._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
logStatus._InitializeFacetMap(logStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'logStatus', logStatus)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}eventType
class eventType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'eventType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 677, 1)
    _Documentation = None
eventType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eventType, enum_prefix=None)
eventType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
eventType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
eventType._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
eventType._InitializeFacetMap(eventType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'eventType', eventType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}statsRuleStatusType
class statsRuleStatusType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'statsRuleStatusType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 688, 1)
    _Documentation = None
statsRuleStatusType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=statsRuleStatusType, enum_prefix=None)
statsRuleStatusType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
statsRuleStatusType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
statsRuleStatusType._InitializeFacetMap(statsRuleStatusType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'statsRuleStatusType', statsRuleStatusType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}statModelType
class statModelType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'statModelType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 697, 1)
    _Documentation = None
statModelType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=statModelType, enum_prefix=None)
statModelType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
statModelType._InitializeFacetMap(statModelType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'statModelType', statModelType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}encodingType
class encodingType (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'encodingType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 704, 1)
    _Documentation = None
encodingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=encodingType, enum_prefix=None)
encodingType._CF_enumeration.addEnumeration(unicode_value=u'0', tag=None)
encodingType._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
encodingType._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
encodingType._InitializeFacetMap(encodingType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'encodingType', encodingType)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}accessControlOperations
class accessControlOperations (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Shall be considered for access control policy check by the CSE"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accessControlOperations')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 716, 4)
    _Documentation = u'Shall be considered for access control policy check by the CSE'
accessControlOperations._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=accessControlOperations, enum_prefix=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'3', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'4', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'5', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'6', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'7', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'8', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'9', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'10', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'11', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'12', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'13', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'14', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'15', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'16', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'17', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'18', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'19', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'20', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'21', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'22', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'23', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'24', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'25', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'26', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'27', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'28', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'29', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'30', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'31', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'32', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'33', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'34', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'35', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'36', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'37', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'38', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'39', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'40', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'41', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'42', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'43', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'44', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'45', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'46', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'47', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'48', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'49', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'50', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'51', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'52', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'53', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'54', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'55', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'56', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'57', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'58', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'59', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'60', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'61', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'62', tag=None)
accessControlOperations._CF_enumeration.addEnumeration(unicode_value=u'63', tag=None)
accessControlOperations._InitializeFacetMap(accessControlOperations._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'accessControlOperations', accessControlOperations)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}SRole-ID
class SRole_ID (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'SRole-ID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 850, 4)
    _Documentation = None
SRole_ID._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SRole_ID, enum_prefix=None)
SRole_ID.n01_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'01-001', tag=u'n01_001')
SRole_ID.n02_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'02-001', tag=u'n02_001')
SRole_ID.n02_002 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'02-002', tag=u'n02_002')
SRole_ID.n02_003 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'02-003', tag=u'n02_003')
SRole_ID.n02_004 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'02-004', tag=u'n02_004')
SRole_ID.n03_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'03-001', tag=u'n03_001')
SRole_ID.n04_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'04-001', tag=u'n04_001')
SRole_ID.n05_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'05-001', tag=u'n05_001')
SRole_ID.n06_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'06-001', tag=u'n06_001')
SRole_ID.n07_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'07-001', tag=u'n07_001')
SRole_ID.n08_001 = SRole_ID._CF_enumeration.addEnumeration(unicode_value=u'08-001', tag=u'n08_001')
SRole_ID._InitializeFacetMap(SRole_ID._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'SRole-ID', SRole_ID)

# Atomic simple type: {http://www.onem2m.org/xml/protocols}filterUsage
class filterUsage (pyxb.binding.datatypes.integer, pyxb.binding.basis.enumeration_mixin):

    """Used in filterCriteria"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'filterUsage')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-enumerationTypes-v1_3_0.xsd', 877, 4)
    _Documentation = u'Used in filterCriteria'
filterUsage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=filterUsage, enum_prefix=None)
filterUsage._CF_enumeration.addEnumeration(unicode_value=u'1', tag=None)
filterUsage._CF_enumeration.addEnumeration(unicode_value=u'2', tag=None)
filterUsage._InitializeFacetMap(filterUsage._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'filterUsage', filterUsage)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_12 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of resourceType."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 58, 7)
    _Documentation = None

    _ItemType = resourceType
STD_ANON_12._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_13 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ipv4."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 103, 12)
    _Documentation = None

    _ItemType = ipv4
STD_ANON_13._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_14 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ipv6."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 114, 12)
    _Documentation = None

    _ItemType = ipv6
STD_ANON_14._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_15 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of countryCode."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 137, 6)
    _Documentation = None

    _ItemType = countryCode
STD_ANON_15._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses STD_ANON
class STD_ANON_16 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.float."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 147, 4)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.float
STD_ANON_16._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3L))
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_length)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_17 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ID."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 66, 4)
    _Documentation = None

    _ItemType = ID
STD_ANON_17._InitializeFacetMap()

# List simple type: {http://www.onem2m.org/xml/protocols}labels
# superclasses STD_ANON_3
class labels (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.token."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'labels')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 73, 1)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.token
labels._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
labels._InitializeFacetMap(labels._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'labels', labels)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_18 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ID."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 92, 3)
    _Documentation = None

    _ItemType = ID
STD_ANON_18._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_19 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of longMin_1."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 110, 3)
    _Documentation = None

    _ItemType = longMin_1
STD_ANON_19._InitializeFacetMap()

# List simple type: {http://www.onem2m.org/xml/protocols}backOffParameters
# superclasses STD_ANON_4
class backOffParameters (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.nonNegativeInteger."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'backOffParameters')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 119, 1)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.nonNegativeInteger
backOffParameters._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3L))
backOffParameters._InitializeFacetMap(backOffParameters._CF_length)
Namespace.addCategoryObject('typeBinding', u'backOffParameters', backOffParameters)

# List simple type: {http://www.onem2m.org/xml/protocols}poaList
# superclasses STD_ANON_5
class poaList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'poaList')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 130, 1)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.string
poaList._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
poaList._InitializeFacetMap(poaList._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'poaList', poaList)

# Atomic simple type: [anonymous]
class STD_ANON_20 (timestamp):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 150, 3)
    _Documentation = None
STD_ANON_20._InitializeFacetMap()

# Atomic simple type: [anonymous]
class STD_ANON_21 (stdEventCats):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 175, 12)
    _Documentation = None
STD_ANON_21._InitializeFacetMap()

# List simple type: {http://www.onem2m.org/xml/protocols}listOfURIs
# superclasses STD_ANON_9
class listOfURIs (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.anyURI."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listOfURIs')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 227, 1)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.anyURI
listOfURIs._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
listOfURIs._InitializeFacetMap(listOfURIs._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'listOfURIs', listOfURIs)

# List simple type: [anonymous]
# superclasses STD_ANON_10
class STD_ANON_22 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.NCName."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 519, 6)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.NCName
STD_ANON_22._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_minLength)

# List simple type: [anonymous]
# superclasses STD_ANON_11
class STD_ANON_23 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.NCName."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 553, 6)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.NCName
STD_ANON_23._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_minLength)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_24 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of operation."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 45, 7)
    _Documentation = None

    _ItemType = operation
STD_ANON_24._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_25 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of SRole_ID."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 41, 7)
    _Documentation = None

    _ItemType = SRole_ID
STD_ANON_25._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_26 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of deviceID."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 42, 7)
    _Documentation = None

    _ItemType = deviceID
STD_ANON_26._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses STD_ANON_13
class STD_ANON_27 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ipv4."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 101, 10)
    _Documentation = None

    _ItemType = ipv4
STD_ANON_27._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_minLength)

# List simple type: [anonymous]
# superclasses STD_ANON_14
class STD_ANON_28 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ipv6."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 112, 10)
    _Documentation = None

    _ItemType = ipv6
STD_ANON_28._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_minLength)

# List simple type: [anonymous]
# superclasses STD_ANON_15
class STD_ANON_29 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of countryCode."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 135, 4)
    _Documentation = None

    _ItemType = countryCode
STD_ANON_29._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_minLength)

# List simple type: {http://www.onem2m.org/xml/protocols}acpType
# superclasses STD_ANON_17
class acpType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ID."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'acpType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 64, 2)
    _Documentation = None

    _ItemType = ID
acpType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
acpType._InitializeFacetMap(acpType._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'acpType', acpType)

# List simple type: {http://www.onem2m.org/xml/protocols}listOfM2MID
# superclasses STD_ANON_18
class listOfM2MID (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ID."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listOfM2MID')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 90, 1)
    _Documentation = None

    _ItemType = ID
listOfM2MID._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
listOfM2MID._InitializeFacetMap(listOfM2MID._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'listOfM2MID', listOfM2MID)

# List simple type: {http://www.onem2m.org/xml/protocols}listOfMinMax
# superclasses STD_ANON_19
class listOfMinMax (pyxb.binding.basis.STD_list):

    """Simple type that is a list of longMin_1."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listOfMinMax')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 108, 1)
    _Documentation = None

    _ItemType = longMin_1
listOfMinMax._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
listOfMinMax._InitializeFacetMap(listOfMinMax._CF_length)
Namespace.addCategoryObject('typeBinding', u'listOfMinMax', listOfMinMax)

# Union simple type: {http://www.onem2m.org/xml/protocols}absRelTimestamp
# superclasses pyxb.binding.datatypes.anySimpleType
class absRelTimestamp (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_20, STD_ANON_6."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'absRelTimestamp')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 147, 1)
    _Documentation = None

    _MemberTypes = ( STD_ANON_20, STD_ANON_6, )
absRelTimestamp._CF_pattern = pyxb.binding.facets.CF_pattern()
absRelTimestamp._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=absRelTimestamp)
absRelTimestamp._InitializeFacetMap(absRelTimestamp._CF_pattern,
   absRelTimestamp._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'absRelTimestamp', absRelTimestamp)

# Union simple type: {http://www.onem2m.org/xml/protocols}eventCat
# superclasses pyxb.binding.datatypes.anySimpleType
class eventCat (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_21, STD_ANON_7."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'eventCat')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 173, 1)
    _Documentation = None

    _MemberTypes = ( STD_ANON_21, STD_ANON_7, )
eventCat._CF_pattern = pyxb.binding.facets.CF_pattern()
eventCat._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eventCat)
eventCat._InitializeFacetMap(eventCat._CF_pattern,
   eventCat._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'eventCat', eventCat)

# Union simple type: {http://www.onem2m.org/xml/protocols}eventCatWithDef
# superclasses pyxb.binding.datatypes.anySimpleType
class eventCatWithDef (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_21, STD_ANON_7, STD_ANON_8."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'eventCatWithDef')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 188, 4)
    _Documentation = None

    _MemberTypes = ( STD_ANON_21, STD_ANON_7, STD_ANON_8, )
eventCatWithDef._CF_pattern = pyxb.binding.facets.CF_pattern()
eventCatWithDef._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=eventCatWithDef)
eventCatWithDef._InitializeFacetMap(eventCatWithDef._CF_pattern,
   eventCatWithDef._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'eventCatWithDef', eventCatWithDef)

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_30 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of eventCat."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 204, 6)
    _Documentation = None

    _ItemType = eventCat
STD_ANON_30._InitializeFacetMap()

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_31 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of eventCatWithDef."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 213, 6)
    _Documentation = None

    _ItemType = eventCatWithDef
STD_ANON_31._InitializeFacetMap()

# List simple type: {http://www.onem2m.org/xml/protocols}listOfEventCat
# superclasses STD_ANON_30
class listOfEventCat (pyxb.binding.basis.STD_list):

    """Simple type that is a list of eventCat."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listOfEventCat')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 202, 4)
    _Documentation = None

    _ItemType = eventCat
listOfEventCat._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
listOfEventCat._InitializeFacetMap(listOfEventCat._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'listOfEventCat', listOfEventCat)

# List simple type: {http://www.onem2m.org/xml/protocols}listOfEventCatWithDef
# superclasses STD_ANON_31
class listOfEventCatWithDef (pyxb.binding.basis.STD_list):

    """Simple type that is a list of eventCatWithDef."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'listOfEventCatWithDef')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 211, 4)
    _Documentation = None

    _ItemType = eventCatWithDef
listOfEventCatWithDef._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
listOfEventCatWithDef._InitializeFacetMap(listOfEventCatWithDef._CF_minLength)
Namespace.addCategoryObject('typeBinding', u'listOfEventCatWithDef', listOfEventCatWithDef)

# Complex type {http://www.onem2m.org/xml/protocols}setOfAcrs with content type ELEMENT_ONLY
class setOfAcrs (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}setOfAcrs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'setOfAcrs')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 78, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accessControlRule uses Python identifier accessControlRule
    __accessControlRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlRule'), 'accessControlRule', '__httpwww_onem2m_orgxmlprotocols_setOfAcrs_accessControlRule', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 80, 3), )

    
    accessControlRule = property(__accessControlRule.value, __accessControlRule.set, None, None)

    _ElementMap.update({
        __accessControlRule.name() : __accessControlRule
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'setOfAcrs', setOfAcrs)


# Complex type {http://www.onem2m.org/xml/protocols}accessControlRule with content type ELEMENT_ONLY
class accessControlRule (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}accessControlRule with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'accessControlRule')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 85, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accessControlOriginators uses Python identifier accessControlOriginators
    __accessControlOriginators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlOriginators'), 'accessControlOriginators', '__httpwww_onem2m_orgxmlprotocols_accessControlRule_accessControlOriginators', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 87, 3), )

    
    accessControlOriginators = property(__accessControlOriginators.value, __accessControlOriginators.set, None, None)

    
    # Element accessControlOperations uses Python identifier accessControlOperations
    __accessControlOperations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlOperations'), 'accessControlOperations', '__httpwww_onem2m_orgxmlprotocols_accessControlRule_accessControlOperations', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 90, 3), )

    
    accessControlOperations = property(__accessControlOperations.value, __accessControlOperations.set, None, None)

    
    # Element accessControlContexts uses Python identifier accessControlContexts
    __accessControlContexts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlContexts'), 'accessControlContexts', '__httpwww_onem2m_orgxmlprotocols_accessControlRule_accessControlContexts', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 92, 3), )

    
    accessControlContexts = property(__accessControlContexts.value, __accessControlContexts.set, None, None)

    _ElementMap.update({
        __accessControlOriginators.name() : __accessControlOriginators,
        __accessControlOperations.name() : __accessControlOperations,
        __accessControlContexts.name() : __accessControlContexts
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'accessControlRule', accessControlRule)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 93, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element accessControlWindow uses Python identifier accessControlWindow
    __accessControlWindow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlWindow'), 'accessControlWindow', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_accessControlWindow', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 95, 6), )

    
    accessControlWindow = property(__accessControlWindow.value, __accessControlWindow.set, None, None)

    
    # Element accessControlIpAddresses uses Python identifier accessControlIpAddresses
    __accessControlIpAddresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlIpAddresses'), 'accessControlIpAddresses', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_accessControlIpAddresses', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 96, 6), )

    
    accessControlIpAddresses = property(__accessControlIpAddresses.value, __accessControlIpAddresses.set, None, None)

    
    # Element accessControlLocationRegion uses Python identifier accessControlLocationRegion
    __accessControlLocationRegion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlLocationRegion'), 'accessControlLocationRegion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_accessControlLocationRegion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 124, 6), )

    
    accessControlLocationRegion = property(__accessControlLocationRegion.value, __accessControlLocationRegion.set, None, None)

    _ElementMap.update({
        __accessControlWindow.name() : __accessControlWindow,
        __accessControlIpAddresses.name() : __accessControlIpAddresses,
        __accessControlLocationRegion.name() : __accessControlLocationRegion
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 97, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ipv4Addresses uses Python identifier ipv4Addresses
    __ipv4Addresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ipv4Addresses'), 'ipv4Addresses', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON__ipv4Addresses', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 99, 9), )

    
    ipv4Addresses = property(__ipv4Addresses.value, __ipv4Addresses.set, None, None)

    
    # Element ipv6Addresses uses Python identifier ipv6Addresses
    __ipv6Addresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ipv6Addresses'), 'ipv6Addresses', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON__ipv6Addresses', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 110, 9), )

    
    ipv6Addresses = property(__ipv6Addresses.value, __ipv6Addresses.set, None, None)

    _ElementMap.update({
        __ipv4Addresses.name() : __ipv4Addresses,
        __ipv6Addresses.name() : __ipv6Addresses
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}locationRegion with content type ELEMENT_ONLY
class locationRegion (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}locationRegion with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'locationRegion')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 131, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'countryCode'), 'countryCode', '__httpwww_onem2m_orgxmlprotocols_locationRegion_countryCode', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 133, 3), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    
    # Element circRegion uses Python identifier circRegion
    __circRegion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'circRegion'), 'circRegion', '__httpwww_onem2m_orgxmlprotocols_locationRegion_circRegion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 144, 3), )

    
    circRegion = property(__circRegion.value, __circRegion.set, None, None)

    _ElementMap.update({
        __countryCode.name() : __countryCode,
        __circRegion.name() : __circRegion
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'locationRegion', locationRegion)


# Complex type {http://www.onem2m.org/xml/protocols}deliveryMetaData with content type ELEMENT_ONLY
class deliveryMetaData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}deliveryMetaData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'deliveryMetaData')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 241, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element tracingOption uses Python identifier tracingOption
    __tracingOption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tracingOption'), 'tracingOption', '__httpwww_onem2m_orgxmlprotocols_deliveryMetaData_tracingOption', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 244, 4), )

    
    tracingOption = property(__tracingOption.value, __tracingOption.set, None, None)

    
    # Element tracingInfo uses Python identifier tracingInfo
    __tracingInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'tracingInfo'), 'tracingInfo', '__httpwww_onem2m_orgxmlprotocols_deliveryMetaData_tracingInfo', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 245, 4), )

    
    tracingInfo = property(__tracingInfo.value, __tracingInfo.set, None, None)

    _ElementMap.update({
        __tracingOption.name() : __tracingOption,
        __tracingInfo.name() : __tracingInfo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'deliveryMetaData', deliveryMetaData)


# Complex type {http://www.onem2m.org/xml/protocols}aggregatedRequest with content type ELEMENT_ONLY
class aggregatedRequest (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}aggregatedRequest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'aggregatedRequest')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 251, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element request uses Python identifier request
    __request = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'request'), 'request', '__httpwww_onem2m_orgxmlprotocols_aggregatedRequest_request', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 253, 3), )

    
    request = property(__request.value, __request.set, None, None)

    _ElementMap.update({
        __request.name() : __request
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'aggregatedRequest', aggregatedRequest)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 254, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operation'), 'operation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_operation', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 256, 6), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Element to uses Python identifier to
    __to = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_to', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 257, 6), )

    
    to = property(__to.value, __to.set, None, None)

    
    # Element from uses Python identifier from_
    __from = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_from', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 258, 6), )

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Element requestIdentifier uses Python identifier requestIdentifier
    __requestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), 'requestIdentifier', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_requestIdentifier', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 259, 6), )

    
    requestIdentifier = property(__requestIdentifier.value, __requestIdentifier.set, None, None)

    
    # Element primitiveContent uses Python identifier primitiveContent
    __primitiveContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'primitiveContent'), 'primitiveContent', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_primitiveContent', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 260, 6), )

    
    primitiveContent = property(__primitiveContent.value, __primitiveContent.set, None, None)

    
    # Element metaInformation uses Python identifier metaInformation
    __metaInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metaInformation'), 'metaInformation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_2_metaInformation', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 261, 6), )

    
    metaInformation = property(__metaInformation.value, __metaInformation.set, None, None)

    _ElementMap.update({
        __operation.name() : __operation,
        __to.name() : __to,
        __from.name() : __from,
        __requestIdentifier.name() : __requestIdentifier,
        __primitiveContent.name() : __primitiveContent,
        __metaInformation.name() : __metaInformation
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}metaInformation with content type ELEMENT_ONLY
class metaInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}metaInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'metaInformation')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element resourceType uses Python identifier resourceType
    __resourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resourceType'), 'resourceType', '__httpwww_onem2m_orgxmlprotocols_metaInformation_resourceType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 270, 3), )

    
    resourceType = property(__resourceType.value, __resourceType.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_metaInformation_name', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 271, 3), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element originatingTimestamp uses Python identifier originatingTimestamp
    __originatingTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), 'originatingTimestamp', '__httpwww_onem2m_orgxmlprotocols_metaInformation_originatingTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 272, 3), )

    
    originatingTimestamp = property(__originatingTimestamp.value, __originatingTimestamp.set, None, None)

    
    # Element requestExpirationTimestamp uses Python identifier requestExpirationTimestamp
    __requestExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp'), 'requestExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_metaInformation_requestExpirationTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 273, 3), )

    
    requestExpirationTimestamp = property(__requestExpirationTimestamp.value, __requestExpirationTimestamp.set, None, None)

    
    # Element resultExpirationTimestamp uses Python identifier resultExpirationTimestamp
    __resultExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), 'resultExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_metaInformation_resultExpirationTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 274, 3), )

    
    resultExpirationTimestamp = property(__resultExpirationTimestamp.value, __resultExpirationTimestamp.set, None, None)

    
    # Element operationExecutionTime uses Python identifier operationExecutionTime
    __operationExecutionTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationExecutionTime'), 'operationExecutionTime', '__httpwww_onem2m_orgxmlprotocols_metaInformation_operationExecutionTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 275, 3), )

    
    operationExecutionTime = property(__operationExecutionTime.value, __operationExecutionTime.set, None, None)

    
    # Element responseType uses Python identifier responseType
    __responseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'responseType'), 'responseType', '__httpwww_onem2m_orgxmlprotocols_metaInformation_responseType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 276, 3), )

    
    responseType = property(__responseType.value, __responseType.set, None, None)

    
    # Element resultPersistence uses Python identifier resultPersistence
    __resultPersistence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultPersistence'), 'resultPersistence', '__httpwww_onem2m_orgxmlprotocols_metaInformation_resultPersistence', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 277, 3), )

    
    resultPersistence = property(__resultPersistence.value, __resultPersistence.set, None, None)

    
    # Element resultContent uses Python identifier resultContent
    __resultContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultContent'), 'resultContent', '__httpwww_onem2m_orgxmlprotocols_metaInformation_resultContent', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 278, 3), )

    
    resultContent = property(__resultContent.value, __resultContent.set, None, None)

    
    # Element eventCategory uses Python identifier eventCategory
    __eventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventCategory'), 'eventCategory', '__httpwww_onem2m_orgxmlprotocols_metaInformation_eventCategory', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 279, 3), )

    
    eventCategory = property(__eventCategory.value, __eventCategory.set, None, None)

    
    # Element deliveryAggregation uses Python identifier deliveryAggregation
    __deliveryAggregation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deliveryAggregation'), 'deliveryAggregation', '__httpwww_onem2m_orgxmlprotocols_metaInformation_deliveryAggregation', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 280, 3), )

    
    deliveryAggregation = property(__deliveryAggregation.value, __deliveryAggregation.set, None, None)

    
    # Element groupRequestIdentifier uses Python identifier groupRequestIdentifier
    __groupRequestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier'), 'groupRequestIdentifier', '__httpwww_onem2m_orgxmlprotocols_metaInformation_groupRequestIdentifier', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 281, 3), )

    
    groupRequestIdentifier = property(__groupRequestIdentifier.value, __groupRequestIdentifier.set, None, None)

    
    # Element filterCriteria uses Python identifier filterCriteria
    __filterCriteria = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'filterCriteria'), 'filterCriteria', '__httpwww_onem2m_orgxmlprotocols_metaInformation_filterCriteria', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 282, 3), )

    
    filterCriteria = property(__filterCriteria.value, __filterCriteria.set, None, None)

    
    # Element discoveryResultType uses Python identifier discoveryResultType
    __discoveryResultType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'discoveryResultType'), 'discoveryResultType', '__httpwww_onem2m_orgxmlprotocols_metaInformation_discoveryResultType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 283, 3), )

    
    discoveryResultType = property(__discoveryResultType.value, __discoveryResultType.set, None, None)

    _ElementMap.update({
        __resourceType.name() : __resourceType,
        __name.name() : __name,
        __originatingTimestamp.name() : __originatingTimestamp,
        __requestExpirationTimestamp.name() : __requestExpirationTimestamp,
        __resultExpirationTimestamp.name() : __resultExpirationTimestamp,
        __operationExecutionTime.name() : __operationExecutionTime,
        __responseType.name() : __responseType,
        __resultPersistence.name() : __resultPersistence,
        __resultContent.name() : __resultContent,
        __eventCategory.name() : __eventCategory,
        __deliveryAggregation.name() : __deliveryAggregation,
        __groupRequestIdentifier.name() : __groupRequestIdentifier,
        __filterCriteria.name() : __filterCriteria,
        __discoveryResultType.name() : __discoveryResultType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'metaInformation', metaInformation)


# Complex type {http://www.onem2m.org/xml/protocols}primitiveContent with content type ELEMENT_ONLY
class primitiveContent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}primitiveContent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'primitiveContent')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 287, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'primitiveContent', primitiveContent)


# Complex type {http://www.onem2m.org/xml/protocols}filterCriteria with content type ELEMENT_ONLY
class filterCriteria (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}filterCriteria with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'filterCriteria')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element createdBefore uses Python identifier createdBefore
    __createdBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'createdBefore'), 'createdBefore', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_createdBefore', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 297, 3), )

    
    createdBefore = property(__createdBefore.value, __createdBefore.set, None, None)

    
    # Element createdAfter uses Python identifier createdAfter
    __createdAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'createdAfter'), 'createdAfter', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_createdAfter', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 298, 3), )

    
    createdAfter = property(__createdAfter.value, __createdAfter.set, None, None)

    
    # Element modifiedSince uses Python identifier modifiedSince
    __modifiedSince = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'modifiedSince'), 'modifiedSince', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_modifiedSince', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 299, 3), )

    
    modifiedSince = property(__modifiedSince.value, __modifiedSince.set, None, None)

    
    # Element unmodifiedSince uses Python identifier unmodifiedSince
    __unmodifiedSince = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'unmodifiedSince'), 'unmodifiedSince', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_unmodifiedSince', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 300, 3), )

    
    unmodifiedSince = property(__unmodifiedSince.value, __unmodifiedSince.set, None, None)

    
    # Element stateTagSmaller uses Python identifier stateTagSmaller
    __stateTagSmaller = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTagSmaller'), 'stateTagSmaller', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_stateTagSmaller', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 301, 3), )

    
    stateTagSmaller = property(__stateTagSmaller.value, __stateTagSmaller.set, None, None)

    
    # Element stateTagBigger uses Python identifier stateTagBigger
    __stateTagBigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTagBigger'), 'stateTagBigger', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_stateTagBigger', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 302, 3), )

    
    stateTagBigger = property(__stateTagBigger.value, __stateTagBigger.set, None, None)

    
    # Element expireBefore uses Python identifier expireBefore
    __expireBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expireBefore'), 'expireBefore', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_expireBefore', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 303, 3), )

    
    expireBefore = property(__expireBefore.value, __expireBefore.set, None, None)

    
    # Element expireAfter uses Python identifier expireAfter
    __expireAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expireAfter'), 'expireAfter', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_expireAfter', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 304, 3), )

    
    expireAfter = property(__expireAfter.value, __expireAfter.set, None, None)

    
    # Element labels uses Python identifier labels
    __labels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'labels'), 'labels', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_labels', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 305, 3), )

    
    labels = property(__labels.value, __labels.set, None, None)

    
    # Element resourceType uses Python identifier resourceType
    __resourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resourceType'), 'resourceType', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_resourceType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 306, 3), )

    
    resourceType = property(__resourceType.value, __resourceType.set, None, None)

    
    # Element sizeAbove uses Python identifier sizeAbove
    __sizeAbove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sizeAbove'), 'sizeAbove', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_sizeAbove', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 307, 3), )

    
    sizeAbove = property(__sizeAbove.value, __sizeAbove.set, None, None)

    
    # Element sizeBelow uses Python identifier sizeBelow
    __sizeBelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sizeBelow'), 'sizeBelow', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_sizeBelow', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 308, 3), )

    
    sizeBelow = property(__sizeBelow.value, __sizeBelow.set, None, None)

    
    # Element contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'contentType'), 'contentType', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_contentType', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 309, 3), )

    
    contentType = property(__contentType.value, __contentType.set, None, None)

    
    # Element attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attribute'), 'attribute', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_attribute', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 310, 3), )

    
    attribute = property(__attribute.value, __attribute.set, None, None)

    
    # Element filterUsage uses Python identifier filterUsage
    __filterUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'filterUsage'), 'filterUsage', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_filterUsage', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 311, 3), )

    
    filterUsage = property(__filterUsage.value, __filterUsage.set, None, None)

    
    # Element limit uses Python identifier limit
    __limit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limit'), 'limit', '__httpwww_onem2m_orgxmlprotocols_filterCriteria_limit', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 312, 3), )

    
    limit = property(__limit.value, __limit.set, None, None)

    _ElementMap.update({
        __createdBefore.name() : __createdBefore,
        __createdAfter.name() : __createdAfter,
        __modifiedSince.name() : __modifiedSince,
        __unmodifiedSince.name() : __unmodifiedSince,
        __stateTagSmaller.name() : __stateTagSmaller,
        __stateTagBigger.name() : __stateTagBigger,
        __expireBefore.name() : __expireBefore,
        __expireAfter.name() : __expireAfter,
        __labels.name() : __labels,
        __resourceType.name() : __resourceType,
        __sizeAbove.name() : __sizeAbove,
        __sizeBelow.name() : __sizeBelow,
        __contentType.name() : __contentType,
        __attribute.name() : __attribute,
        __filterUsage.name() : __filterUsage,
        __limit.name() : __limit
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'filterCriteria', filterCriteria)


# Complex type {http://www.onem2m.org/xml/protocols}attribute with content type ELEMENT_ONLY
class attribute (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}attribute with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attribute')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 316, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_attribute_name', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 318, 3), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_onem2m_orgxmlprotocols_attribute_value', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 319, 3), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'attribute', attribute)


# Complex type {http://www.onem2m.org/xml/protocols}attributeList with content type ELEMENT_ONLY
class attributeList_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}attributeList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'attributeList')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 323, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attribute'), 'attribute', '__httpwww_onem2m_orgxmlprotocols_attributeList__attribute', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 325, 3), )

    
    attribute = property(__attribute.value, __attribute.set, None, None)

    _ElementMap.update({
        __attribute.name() : __attribute
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'attributeList', attributeList_)


# Complex type {http://www.onem2m.org/xml/protocols}scheduleEntries with content type ELEMENT_ONLY
class scheduleEntries (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}scheduleEntries with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'scheduleEntries')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 329, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element scheduleEntry uses Python identifier scheduleEntry
    __scheduleEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scheduleEntry'), 'scheduleEntry', '__httpwww_onem2m_orgxmlprotocols_scheduleEntries_scheduleEntry', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 331, 3), )

    
    scheduleEntry = property(__scheduleEntry.value, __scheduleEntry.set, None, None)

    _ElementMap.update({
        __scheduleEntry.name() : __scheduleEntry
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'scheduleEntries', scheduleEntries)


# Complex type {http://www.onem2m.org/xml/protocols}actionStatus with content type ELEMENT_ONLY
class actionStatus (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}actionStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'actionStatus')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 338, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element action uses Python identifier action
    __action = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpwww_onem2m_orgxmlprotocols_actionStatus_action', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 340, 3), )

    
    action = property(__action.value, __action.set, None, None)

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'status'), 'status', '__httpwww_onem2m_orgxmlprotocols_actionStatus_status', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 341, 3), )

    
    status = property(__status.value, __status.set, None, None)

    _ElementMap.update({
        __action.name() : __action,
        __status.name() : __status
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'actionStatus', actionStatus)


# Complex type {http://www.onem2m.org/xml/protocols}anyArgType with content type ELEMENT_ONLY
class anyArgType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}anyArgType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'anyArgType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 345, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_anyArgType_name', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 347, 3), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpwww_onem2m_orgxmlprotocols_anyArgType_value', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 348, 3), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'anyArgType', anyArgType)


# Complex type {http://www.onem2m.org/xml/protocols}resetArgsType with content type ELEMENT_ONLY
class resetArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}resetArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'resetArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 352, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_resetArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 354, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'resetArgsType', resetArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}rebootArgsType with content type ELEMENT_ONLY
class rebootArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}rebootArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'rebootArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 358, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_rebootArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 360, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'rebootArgsType', rebootArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}uploadArgsType with content type ELEMENT_ONLY
class uploadArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}uploadArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'uploadArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 364, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fileType'), 'fileType', '__httpwww_onem2m_orgxmlprotocols_uploadArgsType_fileType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 366, 3), )

    
    fileType = property(__fileType.value, __fileType.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_uploadArgsType_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 367, 3), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'username'), 'username', '__httpwww_onem2m_orgxmlprotocols_uploadArgsType_username', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 368, 3), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpwww_onem2m_orgxmlprotocols_uploadArgsType_password', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 369, 3), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_uploadArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 370, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __fileType.name() : __fileType,
        __URL.name() : __URL,
        __username.name() : __username,
        __password.name() : __password,
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'uploadArgsType', uploadArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}downloadArgsType with content type ELEMENT_ONLY
class downloadArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}downloadArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'downloadArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 374, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fileType'), 'fileType', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_fileType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 376, 3), )

    
    fileType = property(__fileType.value, __fileType.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 377, 3), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'username'), 'username', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_username', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 378, 3), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_password', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 379, 3), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element filesize uses Python identifier filesize
    __filesize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'filesize'), 'filesize', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_filesize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 380, 3), )

    
    filesize = property(__filesize.value, __filesize.set, None, None)

    
    # Element targetFile uses Python identifier targetFile
    __targetFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'targetFile'), 'targetFile', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_targetFile', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 381, 12), )

    
    targetFile = property(__targetFile.value, __targetFile.set, None, None)

    
    # Element delaySeconds uses Python identifier delaySeconds
    __delaySeconds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'delaySeconds'), 'delaySeconds', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_delaySeconds', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 382, 12), )

    
    delaySeconds = property(__delaySeconds.value, __delaySeconds.set, None, None)

    
    # Element successURL uses Python identifier successURL
    __successURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'successURL'), 'successURL', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_successURL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 383, 3), )

    
    successURL = property(__successURL.value, __successURL.set, None, None)

    
    # Element startTime uses Python identifier startTime
    __startTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'startTime'), 'startTime', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_startTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 384, 3), )

    
    startTime = property(__startTime.value, __startTime.set, None, None)

    
    # Element completeTime uses Python identifier completeTime
    __completeTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'completeTime'), 'completeTime', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_completeTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 385, 3), )

    
    completeTime = property(__completeTime.value, __completeTime.set, None, None)

    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_downloadArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 386, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __fileType.name() : __fileType,
        __URL.name() : __URL,
        __username.name() : __username,
        __password.name() : __password,
        __filesize.name() : __filesize,
        __targetFile.name() : __targetFile,
        __delaySeconds.name() : __delaySeconds,
        __successURL.name() : __successURL,
        __startTime.name() : __startTime,
        __completeTime.name() : __completeTime,
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'downloadArgsType', downloadArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}softwareInstallArgsType with content type ELEMENT_ONLY
class softwareInstallArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}softwareInstallArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'softwareInstallArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 390, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 392, 3), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element UUID uses Python identifier UUID
    __UUID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'UUID'), 'UUID', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_UUID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 393, 3), )

    
    UUID = property(__UUID.value, __UUID.set, None, None)

    
    # Element username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'username'), 'username', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_username', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 394, 3), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_password', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 395, 3), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element executionEnvRef uses Python identifier executionEnvRef
    __executionEnvRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), 'executionEnvRef', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_executionEnvRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 396, 3), )

    
    executionEnvRef = property(__executionEnvRef.value, __executionEnvRef.set, None, None)

    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_softwareInstallArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 397, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __URL.name() : __URL,
        __UUID.name() : __UUID,
        __username.name() : __username,
        __password.name() : __password,
        __executionEnvRef.name() : __executionEnvRef,
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'softwareInstallArgsType', softwareInstallArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}softwareUpdateArgsType with content type ELEMENT_ONLY
class softwareUpdateArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}softwareUpdateArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'softwareUpdateArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 401, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UUID uses Python identifier UUID
    __UUID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'UUID'), 'UUID', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_UUID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 403, 3), )

    
    UUID = property(__UUID.value, __UUID.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 404, 3), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 405, 3), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element username uses Python identifier username
    __username = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'username'), 'username', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_username', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 406, 3), )

    
    username = property(__username.value, __username.set, None, None)

    
    # Element password uses Python identifier password
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_password', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 407, 3), )

    
    password = property(__password.value, __password.set, None, None)

    
    # Element executionEnvRef uses Python identifier executionEnvRef
    __executionEnvRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), 'executionEnvRef', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_executionEnvRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 408, 3), )

    
    executionEnvRef = property(__executionEnvRef.value, __executionEnvRef.set, None, None)

    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_softwareUpdateArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 409, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __UUID.name() : __UUID,
        __version.name() : __version,
        __URL.name() : __URL,
        __username.name() : __username,
        __password.name() : __password,
        __executionEnvRef.name() : __executionEnvRef,
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'softwareUpdateArgsType', softwareUpdateArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}softwareUninstallArgsType with content type ELEMENT_ONLY
class softwareUninstallArgsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}softwareUninstallArgsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'softwareUninstallArgsType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 413, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UUID uses Python identifier UUID
    __UUID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'UUID'), 'UUID', '__httpwww_onem2m_orgxmlprotocols_softwareUninstallArgsType_UUID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 415, 3), )

    
    UUID = property(__UUID.value, __UUID.set, None, None)

    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_softwareUninstallArgsType_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 416, 3), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element executionEnvRef uses Python identifier executionEnvRef
    __executionEnvRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), 'executionEnvRef', '__httpwww_onem2m_orgxmlprotocols_softwareUninstallArgsType_executionEnvRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 417, 3), )

    
    executionEnvRef = property(__executionEnvRef.value, __executionEnvRef.set, None, None)

    
    # Element anyArg uses Python identifier anyArg
    __anyArg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'anyArg'), 'anyArg', '__httpwww_onem2m_orgxmlprotocols_softwareUninstallArgsType_anyArg', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 418, 3), )

    
    anyArg = property(__anyArg.value, __anyArg.set, None, None)

    _ElementMap.update({
        __UUID.name() : __UUID,
        __version.name() : __version,
        __executionEnvRef.name() : __executionEnvRef,
        __anyArg.name() : __anyArg
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'softwareUninstallArgsType', softwareUninstallArgsType)


# Complex type {http://www.onem2m.org/xml/protocols}execReqArgsListType with content type ELEMENT_ONLY
class execReqArgsListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}execReqArgsListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'execReqArgsListType')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 422, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element reset uses Python identifier reset_
    __reset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'reset'), 'reset_', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_reset', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 424, 12), )

    
    reset_ = property(__reset.value, __reset.set, None, None)

    
    # Element reboot uses Python identifier reboot
    __reboot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'reboot'), 'reboot', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_reboot', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 425, 12), )

    
    reboot = property(__reboot.value, __reboot.set, None, None)

    
    # Element upload uses Python identifier upload
    __upload = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'upload'), 'upload', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_upload', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 426, 12), )

    
    upload = property(__upload.value, __upload.set, None, None)

    
    # Element download uses Python identifier download
    __download = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'download'), 'download', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_download', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 427, 12), )

    
    download = property(__download.value, __download.set, None, None)

    
    # Element softwareInstall uses Python identifier softwareInstall
    __softwareInstall = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'softwareInstall'), 'softwareInstall', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_softwareInstall', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 428, 12), )

    
    softwareInstall = property(__softwareInstall.value, __softwareInstall.set, None, None)

    
    # Element softwareUpdate uses Python identifier softwareUpdate
    __softwareUpdate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'softwareUpdate'), 'softwareUpdate', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_softwareUpdate', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 429, 12), )

    
    softwareUpdate = property(__softwareUpdate.value, __softwareUpdate.set, None, None)

    
    # Element softwareUninstall uses Python identifier softwareUninstall
    __softwareUninstall = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'softwareUninstall'), 'softwareUninstall', '__httpwww_onem2m_orgxmlprotocols_execReqArgsListType_softwareUninstall', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 430, 12), )

    
    softwareUninstall = property(__softwareUninstall.value, __softwareUninstall.set, None, None)

    _ElementMap.update({
        __reset.name() : __reset,
        __reboot.name() : __reboot,
        __upload.name() : __upload,
        __download.name() : __download,
        __softwareInstall.name() : __softwareInstall,
        __softwareUpdate.name() : __softwareUpdate,
        __softwareUninstall.name() : __softwareUninstall
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'execReqArgsListType', execReqArgsListType)


# Complex type {http://www.onem2m.org/xml/protocols}responseTypeInfo with content type ELEMENT_ONLY
class responseTypeInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}responseTypeInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'responseTypeInfo')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 462, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element responseTypeValue uses Python identifier responseTypeValue
    __responseTypeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'responseTypeValue'), 'responseTypeValue', '__httpwww_onem2m_orgxmlprotocols_responseTypeInfo_responseTypeValue', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 464, 12), )

    
    responseTypeValue = property(__responseTypeValue.value, __responseTypeValue.set, None, None)

    
    # Element notificationURI uses Python identifier notificationURI
    __notificationURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationURI'), 'notificationURI', '__httpwww_onem2m_orgxmlprotocols_responseTypeInfo_notificationURI', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 465, 12), )

    
    notificationURI = property(__notificationURI.value, __notificationURI.set, None, None)

    _ElementMap.update({
        __responseTypeValue.name() : __responseTypeValue,
        __notificationURI.name() : __notificationURI
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'responseTypeInfo', responseTypeInfo)


# Complex type {http://www.onem2m.org/xml/protocols}operationResult with content type ELEMENT_ONLY
class operationResult (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}operationResult with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'operationResult')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 471, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element responseStatusCode uses Python identifier responseStatusCode
    __responseStatusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'responseStatusCode'), 'responseStatusCode', '__httpwww_onem2m_orgxmlprotocols_operationResult_responseStatusCode', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 473, 3), )

    
    responseStatusCode = property(__responseStatusCode.value, __responseStatusCode.set, None, None)

    
    # Element requestIdentifier uses Python identifier requestIdentifier
    __requestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), 'requestIdentifier', '__httpwww_onem2m_orgxmlprotocols_operationResult_requestIdentifier', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 474, 3), )

    
    requestIdentifier = property(__requestIdentifier.value, __requestIdentifier.set, None, None)

    
    # Element primitiveContent uses Python identifier primitiveContent
    __primitiveContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'primitiveContent'), 'primitiveContent', '__httpwww_onem2m_orgxmlprotocols_operationResult_primitiveContent', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 475, 3), )

    
    primitiveContent = property(__primitiveContent.value, __primitiveContent.set, None, None)

    
    # Element to uses Python identifier to
    __to = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpwww_onem2m_orgxmlprotocols_operationResult_to', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 476, 3), )

    
    to = property(__to.value, __to.set, None, None)

    
    # Element from uses Python identifier from_
    __from = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpwww_onem2m_orgxmlprotocols_operationResult_from', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 477, 3), )

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Element originatingTimestamp uses Python identifier originatingTimestamp
    __originatingTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), 'originatingTimestamp', '__httpwww_onem2m_orgxmlprotocols_operationResult_originatingTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 478, 3), )

    
    originatingTimestamp = property(__originatingTimestamp.value, __originatingTimestamp.set, None, None)

    
    # Element resultExpirationTimestamp uses Python identifier resultExpirationTimestamp
    __resultExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), 'resultExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_operationResult_resultExpirationTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 479, 3), )

    
    resultExpirationTimestamp = property(__resultExpirationTimestamp.value, __resultExpirationTimestamp.set, None, None)

    
    # Element eventCategory uses Python identifier eventCategory
    __eventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventCategory'), 'eventCategory', '__httpwww_onem2m_orgxmlprotocols_operationResult_eventCategory', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 480, 3), )

    
    eventCategory = property(__eventCategory.value, __eventCategory.set, None, None)

    _ElementMap.update({
        __responseStatusCode.name() : __responseStatusCode,
        __requestIdentifier.name() : __requestIdentifier,
        __primitiveContent.name() : __primitiveContent,
        __to.name() : __to,
        __from.name() : __from,
        __originatingTimestamp.name() : __originatingTimestamp,
        __resultExpirationTimestamp.name() : __resultExpirationTimestamp,
        __eventCategory.name() : __eventCategory
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'operationResult', operationResult)


# Complex type {http://www.onem2m.org/xml/protocols}resource with content type ELEMENT_ONLY
class resource_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}resource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'resource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 490, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element resourceType uses Python identifier resourceType
    __resourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resourceType'), 'resourceType', '__httpwww_onem2m_orgxmlprotocols_resource__resourceType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3), )

    
    resourceType = property(__resourceType.value, __resourceType.set, None, None)

    
    # Element resourceID uses Python identifier resourceID
    __resourceID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resourceID'), 'resourceID', '__httpwww_onem2m_orgxmlprotocols_resource__resourceID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3), )

    
    resourceID = property(__resourceID.value, __resourceID.set, None, None)

    
    # Element parentID uses Python identifier parentID
    __parentID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'parentID'), 'parentID', '__httpwww_onem2m_orgxmlprotocols_resource__parentID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3), )

    
    parentID = property(__parentID.value, __parentID.set, None, None)

    
    # Element creationTime uses Python identifier creationTime
    __creationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creationTime'), 'creationTime', '__httpwww_onem2m_orgxmlprotocols_resource__creationTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3), )

    
    creationTime = property(__creationTime.value, __creationTime.set, None, None)

    
    # Element lastModifiedTime uses Python identifier lastModifiedTime
    __lastModifiedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'lastModifiedTime'), 'lastModifiedTime', '__httpwww_onem2m_orgxmlprotocols_resource__lastModifiedTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3), )

    
    lastModifiedTime = property(__lastModifiedTime.value, __lastModifiedTime.set, None, None)

    
    # Element labels uses Python identifier labels
    __labels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'labels'), 'labels', '__httpwww_onem2m_orgxmlprotocols_resource__labels', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3), )

    
    labels = property(__labels.value, __labels.set, None, None)

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_onem2m_orgxmlprotocols_resource__resourceName', pyxb.binding.datatypes.NCName)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 499, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 499, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, None)

    _ElementMap.update({
        __resourceType.name() : __resourceType,
        __resourceID.name() : __resourceID,
        __parentID.name() : __parentID,
        __creationTime.name() : __creationTime,
        __lastModifiedTime.name() : __lastModifiedTime,
        __labels.name() : __labels
    })
    _AttributeMap.update({
        __resourceName.name() : __resourceName
    })
Namespace.addCategoryObject('typeBinding', u'resource', resource_)


# Complex type {http://www.onem2m.org/xml/protocols}aggregatedNotification with content type ELEMENT_ONLY
class aggregatedNotification_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}aggregatedNotification with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'aggregatedNotification')
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 35, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element notification uses Python identifier notification
    __notification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notification'), 'notification', '__httpwww_onem2m_orgxmlprotocols_aggregatedNotification__notification', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 37, 24), )

    
    notification = property(__notification.value, __notification.set, None, None)

    _ElementMap.update({
        __notification.name() : __notification
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'aggregatedNotification', aggregatedNotification_)


# Complex type {http://www.onem2m.org/xml/protocols}notification with content type ELEMENT_ONLY
class notification_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}notification with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'notification')
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 41, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element notificationEvent uses Python identifier notificationEvent
    __notificationEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationEvent'), 'notificationEvent', '__httpwww_onem2m_orgxmlprotocols_notification__notificationEvent', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 43, 24), )

    
    notificationEvent = property(__notificationEvent.value, __notificationEvent.set, None, None)

    
    # Element verificationRequest uses Python identifier verificationRequest
    __verificationRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'verificationRequest'), 'verificationRequest', '__httpwww_onem2m_orgxmlprotocols_notification__verificationRequest', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 58, 24), )

    
    verificationRequest = property(__verificationRequest.value, __verificationRequest.set, None, None)

    
    # Element subscriptionDeletion uses Python identifier subscriptionDeletion
    __subscriptionDeletion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'subscriptionDeletion'), 'subscriptionDeletion', '__httpwww_onem2m_orgxmlprotocols_notification__subscriptionDeletion', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 59, 24), )

    
    subscriptionDeletion = property(__subscriptionDeletion.value, __subscriptionDeletion.set, None, None)

    
    # Element subscriptionReference uses Python identifier subscriptionReference
    __subscriptionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'subscriptionReference'), 'subscriptionReference', '__httpwww_onem2m_orgxmlprotocols_notification__subscriptionReference', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 60, 24), )

    
    subscriptionReference = property(__subscriptionReference.value, __subscriptionReference.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_notification__creator', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 61, 24), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element notificationForwardingURI uses Python identifier notificationForwardingURI
    __notificationForwardingURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI'), 'notificationForwardingURI', '__httpwww_onem2m_orgxmlprotocols_notification__notificationForwardingURI', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 62, 24), )

    
    notificationForwardingURI = property(__notificationForwardingURI.value, __notificationForwardingURI.set, None, None)

    _ElementMap.update({
        __notificationEvent.name() : __notificationEvent,
        __verificationRequest.name() : __verificationRequest,
        __subscriptionDeletion.name() : __subscriptionDeletion,
        __subscriptionReference.name() : __subscriptionReference,
        __creator.name() : __creator,
        __notificationForwardingURI.name() : __notificationForwardingURI
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'notification', notification_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 44, 28)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element representation uses Python identifier representation
    __representation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'representation'), 'representation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_3_representation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 46, 38), )

    
    representation = property(__representation.value, __representation.set, None, None)

    
    # Element operationMonitor uses Python identifier operationMonitor
    __operationMonitor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationMonitor'), 'operationMonitor', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_3_operationMonitor', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 47, 38), )

    
    operationMonitor = property(__operationMonitor.value, __operationMonitor.set, None, None)

    _ElementMap.update({
        __representation.name() : __representation,
        __operationMonitor.name() : __operationMonitor
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 48, 42)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operation'), 'operation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_4_operation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 50, 51), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Element originator uses Python identifier originator
    __originator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originator'), 'originator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_4_originator', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 51, 51), )

    
    originator = property(__originator.value, __originator.set, None, None)

    _ElementMap.update({
        __operation.name() : __operation,
        __originator.name() : __originator
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 34, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operation'), 'operation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_operation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 37, 10), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Element to uses Python identifier to
    __to = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_to', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 39, 10), )

    
    to = property(__to.value, __to.set, None, None)

    
    # Element from uses Python identifier from_
    __from = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_from', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 41, 10), )

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Element requestIdentifier uses Python identifier requestIdentifier
    __requestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), 'requestIdentifier', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_requestIdentifier', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 43, 10), )

    
    requestIdentifier = property(__requestIdentifier.value, __requestIdentifier.set, None, None)

    
    # Element resourceType uses Python identifier resourceType
    __resourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resourceType'), 'resourceType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_resourceType', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 45, 10), )

    
    resourceType = property(__resourceType.value, __resourceType.set, None, None)

    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_name', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 47, 10), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element primitiveContent uses Python identifier primitiveContent
    __primitiveContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'primitiveContent'), 'primitiveContent', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_primitiveContent', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 49, 10), )

    
    primitiveContent = property(__primitiveContent.value, __primitiveContent.set, None, None)

    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'role'), 'role', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_role', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 51, 10), )

    
    role = property(__role.value, __role.set, None, None)

    
    # Element originatingTimestamp uses Python identifier originatingTimestamp
    __originatingTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), 'originatingTimestamp', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_originatingTimestamp', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 53, 10), )

    
    originatingTimestamp = property(__originatingTimestamp.value, __originatingTimestamp.set, None, None)

    
    # Element requestExpirationTimestamp uses Python identifier requestExpirationTimestamp
    __requestExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp'), 'requestExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_requestExpirationTimestamp', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 55, 10), )

    
    requestExpirationTimestamp = property(__requestExpirationTimestamp.value, __requestExpirationTimestamp.set, None, None)

    
    # Element resultExpirationTimestamp uses Python identifier resultExpirationTimestamp
    __resultExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), 'resultExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_resultExpirationTimestamp', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 57, 10), )

    
    resultExpirationTimestamp = property(__resultExpirationTimestamp.value, __resultExpirationTimestamp.set, None, None)

    
    # Element operationExecutionTime uses Python identifier operationExecutionTime
    __operationExecutionTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationExecutionTime'), 'operationExecutionTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_operationExecutionTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 59, 10), )

    
    operationExecutionTime = property(__operationExecutionTime.value, __operationExecutionTime.set, None, None)

    
    # Element responseType uses Python identifier responseType
    __responseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'responseType'), 'responseType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_responseType', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 61, 10), )

    
    responseType = property(__responseType.value, __responseType.set, None, None)

    
    # Element resultPersistence uses Python identifier resultPersistence
    __resultPersistence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultPersistence'), 'resultPersistence', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_resultPersistence', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 63, 10), )

    
    resultPersistence = property(__resultPersistence.value, __resultPersistence.set, None, None)

    
    # Element resultContent uses Python identifier resultContent
    __resultContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultContent'), 'resultContent', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_resultContent', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 65, 10), )

    
    resultContent = property(__resultContent.value, __resultContent.set, None, None)

    
    # Element eventCategory uses Python identifier eventCategory
    __eventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventCategory'), 'eventCategory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_eventCategory', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 67, 10), )

    
    eventCategory = property(__eventCategory.value, __eventCategory.set, None, None)

    
    # Element deliveryAggregation uses Python identifier deliveryAggregation
    __deliveryAggregation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deliveryAggregation'), 'deliveryAggregation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_deliveryAggregation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 69, 10), )

    
    deliveryAggregation = property(__deliveryAggregation.value, __deliveryAggregation.set, None, None)

    
    # Element groupRequestIdentifier uses Python identifier groupRequestIdentifier
    __groupRequestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier'), 'groupRequestIdentifier', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_groupRequestIdentifier', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 71, 10), )

    
    groupRequestIdentifier = property(__groupRequestIdentifier.value, __groupRequestIdentifier.set, None, None)

    
    # Element filterCriteria uses Python identifier filterCriteria
    __filterCriteria = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'filterCriteria'), 'filterCriteria', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_filterCriteria', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 73, 10), )

    
    filterCriteria = property(__filterCriteria.value, __filterCriteria.set, None, None)

    
    # Element discoveryResultType uses Python identifier discoveryResultType
    __discoveryResultType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'discoveryResultType'), 'discoveryResultType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_5_discoveryResultType', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 75, 10), )

    
    discoveryResultType = property(__discoveryResultType.value, __discoveryResultType.set, None, None)

    _ElementMap.update({
        __operation.name() : __operation,
        __to.name() : __to,
        __from.name() : __from,
        __requestIdentifier.name() : __requestIdentifier,
        __resourceType.name() : __resourceType,
        __name.name() : __name,
        __primitiveContent.name() : __primitiveContent,
        __role.name() : __role,
        __originatingTimestamp.name() : __originatingTimestamp,
        __requestExpirationTimestamp.name() : __requestExpirationTimestamp,
        __resultExpirationTimestamp.name() : __resultExpirationTimestamp,
        __operationExecutionTime.name() : __operationExecutionTime,
        __responseType.name() : __responseType,
        __resultPersistence.name() : __resultPersistence,
        __resultContent.name() : __resultContent,
        __eventCategory.name() : __eventCategory,
        __deliveryAggregation.name() : __deliveryAggregation,
        __groupRequestIdentifier.name() : __groupRequestIdentifier,
        __filterCriteria.name() : __filterCriteria,
        __discoveryResultType.name() : __discoveryResultType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 34, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element responseStatusCode uses Python identifier responseStatusCode
    __responseStatusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'responseStatusCode'), 'responseStatusCode', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_responseStatusCode', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 39, 10), )

    
    responseStatusCode = property(__responseStatusCode.value, __responseStatusCode.set, None, None)

    
    # Element requestIdentifier uses Python identifier requestIdentifier
    __requestIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), 'requestIdentifier', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_requestIdentifier', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 41, 10), )

    
    requestIdentifier = property(__requestIdentifier.value, __requestIdentifier.set, None, None)

    
    # Element primitiveContent uses Python identifier primitiveContent
    __primitiveContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'primitiveContent'), 'primitiveContent', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_primitiveContent', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 43, 10), )

    
    primitiveContent = property(__primitiveContent.value, __primitiveContent.set, None, None)

    
    # Element to uses Python identifier to
    __to = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_to', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 45, 10), )

    
    to = property(__to.value, __to.set, None, None)

    
    # Element from uses Python identifier from_
    __from = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_from', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 47, 10), )

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Element originatingTimestamp uses Python identifier originatingTimestamp
    __originatingTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), 'originatingTimestamp', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_originatingTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 49, 10), )

    
    originatingTimestamp = property(__originatingTimestamp.value, __originatingTimestamp.set, None, None)

    
    # Element resultExpirationTimestamp uses Python identifier resultExpirationTimestamp
    __resultExpirationTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), 'resultExpirationTimestamp', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_resultExpirationTimestamp', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 51, 10), )

    
    resultExpirationTimestamp = property(__resultExpirationTimestamp.value, __resultExpirationTimestamp.set, None, None)

    
    # Element eventCategory uses Python identifier eventCategory
    __eventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventCategory'), 'eventCategory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_6_eventCategory', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 53, 10), )

    
    eventCategory = property(__eventCategory.value, __eventCategory.set, None, None)

    _ElementMap.update({
        __responseStatusCode.name() : __responseStatusCode,
        __requestIdentifier.name() : __requestIdentifier,
        __primitiveContent.name() : __primitiveContent,
        __to.name() : __to,
        __from.name() : __from,
        __originatingTimestamp.name() : __originatingTimestamp,
        __resultExpirationTimestamp.name() : __resultExpirationTimestamp,
        __eventCategory.name() : __eventCategory
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}aggregatedResponse with content type ELEMENT_ONLY
class aggregatedResponse_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}aggregatedResponse with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'aggregatedResponse')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 65, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.onem2m.org/xml/protocols}responsePrimitive uses Python identifier responsePrimitive
    __responsePrimitive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'responsePrimitive'), 'responsePrimitive', '__httpwww_onem2m_orgxmlprotocols_aggregatedResponse__httpwww_onem2m_orgxmlprotocolsresponsePrimitive', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 33, 2), )

    
    responsePrimitive = property(__responsePrimitive.value, __responsePrimitive.set, None, None)

    _ElementMap.update({
        __responsePrimitive.name() : __responsePrimitive
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'aggregatedResponse', aggregatedResponse_)


# Complex type {http://www.onem2m.org/xml/protocols}eventNotificationCriteria with content type ELEMENT_ONLY
class eventNotificationCriteria (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}eventNotificationCriteria with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'eventNotificationCriteria')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 67, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element createdBefore uses Python identifier createdBefore
    __createdBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'createdBefore'), 'createdBefore', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_createdBefore', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 69, 3), )

    
    createdBefore = property(__createdBefore.value, __createdBefore.set, None, None)

    
    # Element createdAfter uses Python identifier createdAfter
    __createdAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'createdAfter'), 'createdAfter', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_createdAfter', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 70, 3), )

    
    createdAfter = property(__createdAfter.value, __createdAfter.set, None, None)

    
    # Element modifiedSince uses Python identifier modifiedSince
    __modifiedSince = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'modifiedSince'), 'modifiedSince', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_modifiedSince', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 71, 3), )

    
    modifiedSince = property(__modifiedSince.value, __modifiedSince.set, None, None)

    
    # Element unmodifiedSince uses Python identifier unmodifiedSince
    __unmodifiedSince = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'unmodifiedSince'), 'unmodifiedSince', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_unmodifiedSince', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 72, 3), )

    
    unmodifiedSince = property(__unmodifiedSince.value, __unmodifiedSince.set, None, None)

    
    # Element stateTagSmaller uses Python identifier stateTagSmaller
    __stateTagSmaller = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTagSmaller'), 'stateTagSmaller', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_stateTagSmaller', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 73, 3), )

    
    stateTagSmaller = property(__stateTagSmaller.value, __stateTagSmaller.set, None, None)

    
    # Element stateTagBigger uses Python identifier stateTagBigger
    __stateTagBigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTagBigger'), 'stateTagBigger', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_stateTagBigger', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 74, 3), )

    
    stateTagBigger = property(__stateTagBigger.value, __stateTagBigger.set, None, None)

    
    # Element expireBefore uses Python identifier expireBefore
    __expireBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expireBefore'), 'expireBefore', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_expireBefore', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 75, 3), )

    
    expireBefore = property(__expireBefore.value, __expireBefore.set, None, None)

    
    # Element expireAfter uses Python identifier expireAfter
    __expireAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expireAfter'), 'expireAfter', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_expireAfter', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 76, 3), )

    
    expireAfter = property(__expireAfter.value, __expireAfter.set, None, None)

    
    # Element sizeAbove uses Python identifier sizeAbove
    __sizeAbove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sizeAbove'), 'sizeAbove', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_sizeAbove', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 77, 3), )

    
    sizeAbove = property(__sizeAbove.value, __sizeAbove.set, None, None)

    
    # Element sizeBelow uses Python identifier sizeBelow
    __sizeBelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sizeBelow'), 'sizeBelow', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_sizeBelow', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 78, 3), )

    
    sizeBelow = property(__sizeBelow.value, __sizeBelow.set, None, None)

    
    # Element operationMonitor uses Python identifier operationMonitor
    __operationMonitor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationMonitor'), 'operationMonitor', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_operationMonitor', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 79, 3), )

    
    operationMonitor = property(__operationMonitor.value, __operationMonitor.set, None, None)

    
    # Element attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attribute'), 'attribute', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_attribute', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 80, 3), )

    
    attribute = property(__attribute.value, __attribute.set, None, None)

    
    # Element notificationEventType uses Python identifier notificationEventType
    __notificationEventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationEventType'), 'notificationEventType', '__httpwww_onem2m_orgxmlprotocols_eventNotificationCriteria_notificationEventType', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 81, 3), )

    
    notificationEventType = property(__notificationEventType.value, __notificationEventType.set, None, None)

    _ElementMap.update({
        __createdBefore.name() : __createdBefore,
        __createdAfter.name() : __createdAfter,
        __modifiedSince.name() : __modifiedSince,
        __unmodifiedSince.name() : __unmodifiedSince,
        __stateTagSmaller.name() : __stateTagSmaller,
        __stateTagBigger.name() : __stateTagBigger,
        __expireBefore.name() : __expireBefore,
        __expireAfter.name() : __expireAfter,
        __sizeAbove.name() : __sizeAbove,
        __sizeBelow.name() : __sizeBelow,
        __operationMonitor.name() : __operationMonitor,
        __attribute.name() : __attribute,
        __notificationEventType.name() : __notificationEventType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'eventNotificationCriteria', eventNotificationCriteria)


# Complex type {http://www.onem2m.org/xml/protocols}batchNotify with content type ELEMENT_ONLY
class batchNotify (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}batchNotify with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'batchNotify')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 85, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element number uses Python identifier number
    __number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'number'), 'number', '__httpwww_onem2m_orgxmlprotocols_batchNotify_number', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 87, 3), )

    
    number = property(__number.value, __number.set, None, None)

    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'duration'), 'duration', '__httpwww_onem2m_orgxmlprotocols_batchNotify_duration', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 88, 3), )

    
    duration = property(__duration.value, __duration.set, None, None)

    _ElementMap.update({
        __number.name() : __number,
        __duration.name() : __duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'batchNotify', batchNotify)


# Complex type {http://www.onem2m.org/xml/protocols}rateLimit with content type ELEMENT_ONLY
class rateLimit (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}rateLimit with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'rateLimit')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 92, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element maxNrOfNotify uses Python identifier maxNrOfNotify
    __maxNrOfNotify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxNrOfNotify'), 'maxNrOfNotify', '__httpwww_onem2m_orgxmlprotocols_rateLimit_maxNrOfNotify', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 94, 3), )

    
    maxNrOfNotify = property(__maxNrOfNotify.value, __maxNrOfNotify.set, None, None)

    
    # Element timeWindow uses Python identifier timeWindow
    __timeWindow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'timeWindow'), 'timeWindow', '__httpwww_onem2m_orgxmlprotocols_rateLimit_timeWindow', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 95, 3), )

    
    timeWindow = property(__timeWindow.value, __timeWindow.set, None, None)

    _ElementMap.update({
        __maxNrOfNotify.name() : __maxNrOfNotify,
        __timeWindow.name() : __timeWindow
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'rateLimit', rateLimit)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (resource_):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 48, 2)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element {http://www.onem2m.org/xml/protocols}AE uses Python identifier AE
    __AE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'AE'), 'AE', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsAE', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 37, 1), )

    
    AE = property(__AE.value, __AE.set, None, None)

    
    # Element accessControlPolicyIDs uses Python identifier accessControlPolicyIDs
    __accessControlPolicyIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), 'accessControlPolicyIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_accessControlPolicyIDs', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 54, 6), )

    
    accessControlPolicyIDs = property(__accessControlPolicyIDs.value, __accessControlPolicyIDs.set, None, None)

    
    # Element cseType uses Python identifier cseType
    __cseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cseType'), 'cseType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_cseType', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 55, 6), )

    
    cseType = property(__cseType.value, __cseType.set, None, None)

    
    # Element CSE-ID uses Python identifier CSE_ID
    __CSE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSE-ID'), 'CSE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_CSE_ID', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 56, 6), )

    
    CSE_ID = property(__CSE_ID.value, __CSE_ID.set, None, None)

    
    # Element supportedResourceType uses Python identifier supportedResourceType
    __supportedResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'supportedResourceType'), 'supportedResourceType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_supportedResourceType', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 57, 6), )

    
    supportedResourceType = property(__supportedResourceType.value, __supportedResourceType.set, None, None)

    
    # Element pointOfAccess uses Python identifier pointOfAccess
    __pointOfAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), 'pointOfAccess', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_pointOfAccess', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 62, 6), )

    
    pointOfAccess = property(__pointOfAccess.value, __pointOfAccess.set, None, None)

    
    # Element nodeLink uses Python identifier nodeLink
    __nodeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeLink'), 'nodeLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_nodeLink', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 63, 6), )

    
    nodeLink = property(__nodeLink.value, __nodeLink.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_childResource', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 67, 28), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicy uses Python identifier accessControlPolicy
    __accessControlPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), 'accessControlPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsaccessControlPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1), )

    
    accessControlPolicy = property(__accessControlPolicy.value, __accessControlPolicy.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}delivery uses Python identifier delivery
    __delivery = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'delivery'), 'delivery', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsdelivery', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 34, 1), )

    
    delivery = property(__delivery.value, __delivery.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsgroup', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1), )

    
    group = property(__group.value, __group.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}locationPolicy uses Python identifier locationPolicy
    __locationPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'locationPolicy'), 'locationPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolslocationPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 33, 1), )

    
    locationPolicy = property(__locationPolicy.value, __locationPolicy.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}m2mServiceSubscriptionProfile uses Python identifier m2mServiceSubscriptionProfile
    __m2mServiceSubscriptionProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'm2mServiceSubscriptionProfile'), 'm2mServiceSubscriptionProfile', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsm2mServiceSubscriptionProfile', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 33, 1), )

    
    m2mServiceSubscriptionProfile = property(__m2mServiceSubscriptionProfile.value, __m2mServiceSubscriptionProfile.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}mgmtCmd uses Python identifier mgmtCmd
    __mgmtCmd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'mgmtCmd'), 'mgmtCmd', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsmgmtCmd', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 33, 1), )

    
    mgmtCmd = property(__mgmtCmd.value, __mgmtCmd.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}node uses Python identifier node
    __node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'node'), 'node', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsnode', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 45, 1), )

    
    node = property(__node.value, __node.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}remoteCSE uses Python identifier remoteCSE
    __remoteCSE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'remoteCSE'), 'remoteCSE', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsremoteCSE', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 39, 1), )

    
    remoteCSE = property(__remoteCSE.value, __remoteCSE.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}request uses Python identifier request
    __request = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'request'), 'request', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsrequest', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 33, 1), )

    
    request = property(__request.value, __request.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}schedule uses Python identifier schedule
    __schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'schedule'), 'schedule', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsschedule', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1), )

    
    schedule = property(__schedule.value, __schedule.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}serviceSubscribedAppRule uses Python identifier serviceSubscribedAppRule
    __serviceSubscribedAppRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedAppRule'), 'serviceSubscribedAppRule', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsserviceSubscribedAppRule', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 32, 1), )

    
    serviceSubscribedAppRule = property(__serviceSubscribedAppRule.value, __serviceSubscribedAppRule.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}statsCollect uses Python identifier statsCollect
    __statsCollect = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'statsCollect'), 'statsCollect', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsstatsCollect', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 32, 1), )

    
    statsCollect = property(__statsCollect.value, __statsCollect.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}statsConfig uses Python identifier statsConfig
    __statsConfig = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'statsConfig'), 'statsConfig', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolsstatsConfig', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 33, 1), )

    
    statsConfig = property(__statsConfig.value, __statsConfig.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_7_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __AE.name() : __AE,
        __accessControlPolicyIDs.name() : __accessControlPolicyIDs,
        __cseType.name() : __cseType,
        __CSE_ID.name() : __CSE_ID,
        __supportedResourceType.name() : __supportedResourceType,
        __pointOfAccess.name() : __pointOfAccess,
        __nodeLink.name() : __nodeLink,
        __childResource.name() : __childResource,
        __accessControlPolicy.name() : __accessControlPolicy,
        __container.name() : __container,
        __delivery.name() : __delivery,
        __group.name() : __group,
        __locationPolicy.name() : __locationPolicy,
        __m2mServiceSubscriptionProfile.name() : __m2mServiceSubscriptionProfile,
        __mgmtCmd.name() : __mgmtCmd,
        __node.name() : __node,
        __remoteCSE.name() : __remoteCSE,
        __request.name() : __request,
        __schedule.name() : __schedule,
        __serviceSubscribedAppRule.name() : __serviceSubscribedAppRule,
        __statsCollect.name() : __statsCollect,
        __statsConfig.name() : __statsConfig,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}mgmtLinkRef with content type SIMPLE
class mgmtLinkRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}mgmtLinkRef with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mgmtLinkRef')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 434, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_mgmtLinkRef_name', pyxb.binding.datatypes.NCName, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 437, 4)
    __name._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 437, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_onem2m_orgxmlprotocols_mgmtLinkRef_type', mgmtDefinition, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 438, 4)
    __type._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 438, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'mgmtLinkRef', mgmtLinkRef)


# Complex type {http://www.onem2m.org/xml/protocols}resourceWrapper with content type ELEMENT_ONLY
class resourceWrapper (resource_):
    """Complex type {http://www.onem2m.org/xml/protocols}resourceWrapper with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'resourceWrapper')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 443, 1)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Attribute URI uses Python identifier URI
    __URI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'URI'), 'URI', '__httpwww_onem2m_orgxmlprotocols_resourceWrapper_URI', pyxb.binding.datatypes.anyURI, required=True)
    __URI._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 446, 4)
    __URI._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 446, 4)
    
    URI = property(__URI.value, __URI.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __URI.name() : __URI
    })
Namespace.addCategoryObject('typeBinding', u'resourceWrapper', resourceWrapper)


# Complex type {http://www.onem2m.org/xml/protocols}childResourceRef with content type SIMPLE
class childResourceRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.onem2m.org/xml/protocols}childResourceRef with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'childResourceRef')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 453, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpwww_onem2m_orgxmlprotocols_childResourceRef_name', pyxb.binding.datatypes.NCName, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 456, 4)
    __name._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 456, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_onem2m_orgxmlprotocols_childResourceRef_type', resourceType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 457, 4)
    __type._UseLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 457, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __type.name() : __type
    })
Namespace.addCategoryObject('typeBinding', u'childResourceRef', childResourceRef)


# Complex type {http://www.onem2m.org/xml/protocols}regularResource with content type ELEMENT_ONLY
class regularResource (resource_):
    """Complex type {http://www.onem2m.org/xml/protocols}regularResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'regularResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 502, 1)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs uses Python identifier accessControlPolicyIDs
    __accessControlPolicyIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), 'accessControlPolicyIDs', '__httpwww_onem2m_orgxmlprotocols_regularResource_accessControlPolicyIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5), )

    
    accessControlPolicyIDs = property(__accessControlPolicyIDs.value, __accessControlPolicyIDs.set, None, None)

    
    # Element expirationTime uses Python identifier expirationTime
    __expirationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expirationTime'), 'expirationTime', '__httpwww_onem2m_orgxmlprotocols_regularResource_expirationTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5), )

    
    expirationTime = property(__expirationTime.value, __expirationTime.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __accessControlPolicyIDs.name() : __accessControlPolicyIDs,
        __expirationTime.name() : __expirationTime
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'regularResource', regularResource)


# Complex type {http://www.onem2m.org/xml/protocols}announcedResource with content type ELEMENT_ONLY
class announcedResource (resource_):
    """Complex type {http://www.onem2m.org/xml/protocols}announcedResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'announcedResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 533, 1)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs uses Python identifier accessControlPolicyIDs
    __accessControlPolicyIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), 'accessControlPolicyIDs', '__httpwww_onem2m_orgxmlprotocols_announcedResource_accessControlPolicyIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5), )

    
    accessControlPolicyIDs = property(__accessControlPolicyIDs.value, __accessControlPolicyIDs.set, None, None)

    
    # Element expirationTime uses Python identifier expirationTime
    __expirationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expirationTime'), 'expirationTime', '__httpwww_onem2m_orgxmlprotocols_announcedResource_expirationTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5), )

    
    expirationTime = property(__expirationTime.value, __expirationTime.set, None, None)

    
    # Element link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__httpwww_onem2m_orgxmlprotocols_announcedResource_link', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __accessControlPolicyIDs.name() : __accessControlPolicyIDs,
        __expirationTime.name() : __expirationTime,
        __link.name() : __link
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'announcedResource', announcedResource)


# Complex type {http://www.onem2m.org/xml/protocols}announceableSubordinateResource with content type ELEMENT_ONLY
class announceableSubordinateResource (resource_):
    """Complex type {http://www.onem2m.org/xml/protocols}announceableSubordinateResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'announceableSubordinateResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 546, 1)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime uses Python identifier expirationTime
    __expirationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expirationTime'), 'expirationTime', '__httpwww_onem2m_orgxmlprotocols_announceableSubordinateResource_expirationTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5), )

    
    expirationTime = property(__expirationTime.value, __expirationTime.set, None, None)

    
    # Element announceTo uses Python identifier announceTo
    __announceTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'announceTo'), 'announceTo', '__httpwww_onem2m_orgxmlprotocols_announceableSubordinateResource_announceTo', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5), )

    
    announceTo = property(__announceTo.value, __announceTo.set, None, None)

    
    # Element announcedAttribute uses Python identifier announcedAttribute
    __announcedAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'announcedAttribute'), 'announcedAttribute', '__httpwww_onem2m_orgxmlprotocols_announceableSubordinateResource_announcedAttribute', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5), )

    
    announcedAttribute = property(__announcedAttribute.value, __announcedAttribute.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __expirationTime.name() : __expirationTime,
        __announceTo.name() : __announceTo,
        __announcedAttribute.name() : __announcedAttribute
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'announceableSubordinateResource', announceableSubordinateResource)


# Complex type {http://www.onem2m.org/xml/protocols}announcedSubordinateResource with content type ELEMENT_ONLY
class announcedSubordinateResource (resource_):
    """Complex type {http://www.onem2m.org/xml/protocols}announcedSubordinateResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'announcedSubordinateResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 567, 1)
    _ElementMap = resource_._ElementMap.copy()
    _AttributeMap = resource_._AttributeMap.copy()
    # Base type is resource_
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime uses Python identifier expirationTime
    __expirationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expirationTime'), 'expirationTime', '__httpwww_onem2m_orgxmlprotocols_announcedSubordinateResource_expirationTime', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5), )

    
    expirationTime = property(__expirationTime.value, __expirationTime.set, None, None)

    
    # Element link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__httpwww_onem2m_orgxmlprotocols_announcedSubordinateResource_link', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __expirationTime.name() : __expirationTime,
        __link.name() : __link
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'announcedSubordinateResource', announcedSubordinateResource)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (announcedResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 71, 2)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element appName uses Python identifier appName
    __appName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'appName'), 'appName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_appName', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 77, 6), )

    
    appName = property(__appName.value, __appName.set, None, None)

    
    # Element App-ID uses Python identifier App_ID
    __App_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'App-ID'), 'App_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_App_ID', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 78, 6), )

    
    App_ID = property(__App_ID.value, __App_ID.set, None, None)

    
    # Element AE-ID uses Python identifier AE_ID
    __AE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'AE-ID'), 'AE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_AE_ID', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 79, 6), )

    
    AE_ID = property(__AE_ID.value, __AE_ID.set, None, None)

    
    # Element pointOfAccess uses Python identifier pointOfAccess
    __pointOfAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), 'pointOfAccess', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_pointOfAccess', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 80, 6), )

    
    pointOfAccess = property(__pointOfAccess.value, __pointOfAccess.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_ontologyRef', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 81, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element nodeLink uses Python identifier nodeLink
    __nodeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeLink'), 'nodeLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_nodeLink', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 82, 6), )

    
    nodeLink = property(__nodeLink.value, __nodeLink.set, None, None)

    
    # Element requestReachability uses Python identifier requestReachability
    __requestReachability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestReachability'), 'requestReachability', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_requestReachability', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 83, 6), )

    
    requestReachability = property(__requestReachability.value, __requestReachability.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_childResource', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 87, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicy uses Python identifier accessControlPolicy
    __accessControlPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), 'accessControlPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolsaccessControlPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1), )

    
    accessControlPolicy = property(__accessControlPolicy.value, __accessControlPolicy.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicyAnnc uses Python identifier accessControlPolicyAnnc
    __accessControlPolicyAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc'), 'accessControlPolicyAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolsaccessControlPolicyAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 55, 1), )

    
    accessControlPolicyAnnc = property(__accessControlPolicyAnnc.value, __accessControlPolicyAnnc.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}containerAnnc uses Python identifier containerAnnc
    __containerAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), 'containerAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolscontainerAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1), )

    
    containerAnnc = property(__containerAnnc.value, __containerAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolsgroup', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1), )

    
    group = property(__group.value, __group.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}groupAnnc uses Python identifier groupAnnc
    __groupAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc'), 'groupAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolsgroupAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 63, 1), )

    
    groupAnnc = property(__groupAnnc.value, __groupAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}scheduleAnnc uses Python identifier scheduleAnnc
    __scheduleAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc'), 'scheduleAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolsscheduleAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 54, 1), )

    
    scheduleAnnc = property(__scheduleAnnc.value, __scheduleAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_8_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __appName.name() : __appName,
        __App_ID.name() : __App_ID,
        __AE_ID.name() : __AE_ID,
        __pointOfAccess.name() : __pointOfAccess,
        __ontologyRef.name() : __ontologyRef,
        __nodeLink.name() : __nodeLink,
        __requestReachability.name() : __requestReachability,
        __childResource.name() : __childResource,
        __accessControlPolicy.name() : __accessControlPolicy,
        __accessControlPolicyAnnc.name() : __accessControlPolicyAnnc,
        __container.name() : __container,
        __containerAnnc.name() : __containerAnnc,
        __group.name() : __group,
        __groupAnnc.name() : __groupAnnc,
        __scheduleAnnc.name() : __scheduleAnnc,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (announceableSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 34, 2)
    _ElementMap = announceableSubordinateResource._ElementMap.copy()
    _AttributeMap = announceableSubordinateResource._AttributeMap.copy()
    # Base type is announceableSubordinateResource
    
    # Element privileges uses Python identifier privileges
    __privileges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'privileges'), 'privileges', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_9_privileges', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 40, 6), )

    
    privileges = property(__privileges.value, __privileges.set, None, None)

    
    # Element selfPrivileges uses Python identifier selfPrivileges
    __selfPrivileges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'selfPrivileges'), 'selfPrivileges', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_9_selfPrivileges', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 41, 6), )

    
    selfPrivileges = property(__selfPrivileges.value, __selfPrivileges.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_9_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 45, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_9_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __privileges.name() : __privileges,
        __selfPrivileges.name() : __selfPrivileges,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (announcedSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 56, 2)
    _ElementMap = announcedSubordinateResource._ElementMap.copy()
    _AttributeMap = announcedSubordinateResource._AttributeMap.copy()
    # Base type is announcedSubordinateResource
    
    # Element privileges uses Python identifier privileges
    __privileges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'privileges'), 'privileges', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_10_privileges', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 62, 6), )

    
    privileges = property(__privileges.value, __privileges.set, None, None)

    
    # Element selfPrivileges uses Python identifier selfPrivileges
    __selfPrivileges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'selfPrivileges'), 'selfPrivileges', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_10_selfPrivileges', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 63, 6), )

    
    selfPrivileges = property(__selfPrivileges.value, __selfPrivileges.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_10_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 67, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_10_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __privileges.name() : __privileges,
        __selfPrivileges.name() : __selfPrivileges,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}announceableResource with content type ELEMENT_ONLY
class announceableResource (regularResource):
    """Complex type {http://www.onem2m.org/xml/protocols}announceableResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'announceableResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 513, 1)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo uses Python identifier announceTo
    __announceTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'announceTo'), 'announceTo', '__httpwww_onem2m_orgxmlprotocols_announceableResource_announceTo', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5), )

    
    announceTo = property(__announceTo.value, __announceTo.set, None, None)

    
    # Element announcedAttribute uses Python identifier announcedAttribute
    __announcedAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'announcedAttribute'), 'announcedAttribute', '__httpwww_onem2m_orgxmlprotocols_announceableResource_announcedAttribute', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5), )

    
    announcedAttribute = property(__announcedAttribute.value, __announcedAttribute.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __announceTo.name() : __announceTo,
        __announcedAttribute.name() : __announcedAttribute
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'announceableResource', announceableResource)


# Complex type {http://www.onem2m.org/xml/protocols}announcedMgmtResource with content type ELEMENT_ONLY
class announcedMgmtResource (announcedResource):
    """Complex type {http://www.onem2m.org/xml/protocols}announcedMgmtResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'announcedMgmtResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 591, 1)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition uses Python identifier mgmtDefinition
    __mgmtDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtDefinition'), 'mgmtDefinition', '__httpwww_onem2m_orgxmlprotocols_announcedMgmtResource_mgmtDefinition', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5), )

    
    mgmtDefinition = property(__mgmtDefinition.value, __mgmtDefinition.set, None, None)

    
    # Element objectIDs uses Python identifier objectIDs
    __objectIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'objectIDs'), 'objectIDs', '__httpwww_onem2m_orgxmlprotocols_announcedMgmtResource_objectIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5), )

    
    objectIDs = property(__objectIDs.value, __objectIDs.set, None, None)

    
    # Element objectPaths uses Python identifier objectPaths
    __objectPaths = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'objectPaths'), 'objectPaths', '__httpwww_onem2m_orgxmlprotocols_announcedMgmtResource_objectPaths', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5), )

    
    objectPaths = property(__objectPaths.value, __objectPaths.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_onem2m_orgxmlprotocols_announcedMgmtResource_description', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __mgmtDefinition.name() : __mgmtDefinition,
        __objectIDs.name() : __objectIDs,
        __objectPaths.name() : __objectPaths,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'announcedMgmtResource', announcedMgmtResource)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (announcedResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 68, 2)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}containerAnnc uses Python identifier containerAnnc
    __containerAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), 'containerAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_httpwww_onem2m_orgxmlprotocolscontainerAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1), )

    
    containerAnnc = property(__containerAnnc.value, __containerAnnc.set, None, None)

    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 73, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element maxNrOfInstances uses Python identifier maxNrOfInstances
    __maxNrOfInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances'), 'maxNrOfInstances', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_maxNrOfInstances', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 75, 6), )

    
    maxNrOfInstances = property(__maxNrOfInstances.value, __maxNrOfInstances.set, None, None)

    
    # Element maxByteSize uses Python identifier maxByteSize
    __maxByteSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxByteSize'), 'maxByteSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_maxByteSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 76, 6), )

    
    maxByteSize = property(__maxByteSize.value, __maxByteSize.set, None, None)

    
    # Element maxInstanceAge uses Python identifier maxInstanceAge
    __maxInstanceAge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxInstanceAge'), 'maxInstanceAge', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_maxInstanceAge', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 77, 6), )

    
    maxInstanceAge = property(__maxInstanceAge.value, __maxInstanceAge.set, None, None)

    
    # Element currentNrOfInstances uses Python identifier currentNrOfInstances
    __currentNrOfInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances'), 'currentNrOfInstances', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_currentNrOfInstances', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 78, 6), )

    
    currentNrOfInstances = property(__currentNrOfInstances.value, __currentNrOfInstances.set, None, None)

    
    # Element currentByteSize uses Python identifier currentByteSize
    __currentByteSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentByteSize'), 'currentByteSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_currentByteSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 79, 6), )

    
    currentByteSize = property(__currentByteSize.value, __currentByteSize.set, None, None)

    
    # Element locationID uses Python identifier locationID
    __locationID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationID'), 'locationID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_locationID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 80, 6), )

    
    locationID = property(__locationID.value, __locationID.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_ontologyRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 81, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 85, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}contentInstance uses Python identifier contentInstance
    __contentInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'contentInstance'), 'contentInstance', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_httpwww_onem2m_orgxmlprotocolscontentInstance', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 32, 1), )

    
    contentInstance = property(__contentInstance.value, __contentInstance.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}contentInstanceAnnc uses Python identifier contentInstanceAnnc
    __contentInstanceAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'contentInstanceAnnc'), 'contentInstanceAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_httpwww_onem2m_orgxmlprotocolscontentInstanceAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 51, 1), )

    
    contentInstanceAnnc = property(__contentInstanceAnnc.value, __contentInstanceAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_11_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __container.name() : __container,
        __containerAnnc.name() : __containerAnnc,
        __stateTag.name() : __stateTag,
        __maxNrOfInstances.name() : __maxNrOfInstances,
        __maxByteSize.name() : __maxByteSize,
        __maxInstanceAge.name() : __maxInstanceAge,
        __currentNrOfInstances.name() : __currentNrOfInstances,
        __currentByteSize.name() : __currentByteSize,
        __locationID.name() : __locationID,
        __ontologyRef.name() : __ontologyRef,
        __childResource.name() : __childResource,
        __contentInstance.name() : __contentInstance,
        __contentInstanceAnnc.name() : __contentInstanceAnnc,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (announceableSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 33, 2)
    _ElementMap = announceableSubordinateResource._ElementMap.copy()
    _AttributeMap = announceableSubordinateResource._AttributeMap.copy()
    # Base type is announceableSubordinateResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 38, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 40, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element contentInfo uses Python identifier contentInfo
    __contentInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'contentInfo'), 'contentInfo', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_contentInfo', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 41, 6), )

    
    contentInfo = property(__contentInfo.value, __contentInfo.set, None, None)

    
    # Element contentSize uses Python identifier contentSize
    __contentSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'contentSize'), 'contentSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_contentSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 42, 6), )

    
    contentSize = property(__contentSize.value, __contentSize.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_ontologyRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 43, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'content'), 'content_', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_12_content', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 44, 6), )

    
    content_ = property(__content.value, __content.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __stateTag.name() : __stateTag,
        __creator.name() : __creator,
        __contentInfo.name() : __contentInfo,
        __contentSize.name() : __contentSize,
        __ontologyRef.name() : __ontologyRef,
        __content.name() : __content
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (announcedSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 52, 2)
    _ElementMap = announcedSubordinateResource._ElementMap.copy()
    _AttributeMap = announcedSubordinateResource._AttributeMap.copy()
    # Base type is announcedSubordinateResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_13_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 57, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element contentInfo uses Python identifier contentInfo
    __contentInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'contentInfo'), 'contentInfo', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_13_contentInfo', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 59, 6), )

    
    contentInfo = property(__contentInfo.value, __contentInfo.set, None, None)

    
    # Element contentSize uses Python identifier contentSize
    __contentSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'contentSize'), 'contentSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_13_contentSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 60, 6), )

    
    contentSize = property(__contentSize.value, __contentSize.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_13_ontologyRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 61, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'content'), 'content_', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_13_content', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 62, 6), )

    
    content_ = property(__content.value, __content.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __stateTag.name() : __stateTag,
        __contentInfo.name() : __contentInfo,
        __contentSize.name() : __contentSize,
        __ontologyRef.name() : __ontologyRef,
        __content.name() : __content
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 35, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 41, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'source'), 'source', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_source', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 43, 6), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'target'), 'target', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_target', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 44, 6), )

    
    target = property(__target.value, __target.set, None, None)

    
    # Element lifespan uses Python identifier lifespan
    __lifespan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'lifespan'), 'lifespan', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_lifespan', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 45, 6), )

    
    lifespan = property(__lifespan.value, __lifespan.set, None, None)

    
    # Element eventCat uses Python identifier eventCat
    __eventCat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventCat'), 'eventCat', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_eventCat', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 46, 6), )

    
    eventCat = property(__eventCat.value, __eventCat.set, None, None)

    
    # Element deliveryMetaData uses Python identifier deliveryMetaData
    __deliveryMetaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deliveryMetaData'), 'deliveryMetaData', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_deliveryMetaData', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 47, 6), )

    
    deliveryMetaData = property(__deliveryMetaData.value, __deliveryMetaData.set, None, None)

    
    # Element aggregatedRequest uses Python identifier aggregatedRequest
    __aggregatedRequest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'aggregatedRequest'), 'aggregatedRequest', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_aggregatedRequest', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 48, 6), )

    
    aggregatedRequest = property(__aggregatedRequest.value, __aggregatedRequest.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 52, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_14_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __stateTag.name() : __stateTag,
        __source.name() : __source,
        __target.name() : __target,
        __lifespan.name() : __lifespan,
        __eventCat.name() : __eventCat,
        __deliveryMetaData.name() : __deliveryMetaData,
        __aggregatedRequest.name() : __aggregatedRequest,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 33, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 39, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element eventID uses Python identifier eventID
    __eventID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventID'), 'eventID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_eventID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 40, 6), )

    
    eventID = property(__eventID.value, __eventID.set, None, None)

    
    # Element eventType uses Python identifier eventType
    __eventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventType'), 'eventType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_eventType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 41, 6), )

    
    eventType = property(__eventType.value, __eventType.set, None, None)

    
    # Element eventStart uses Python identifier eventStart
    __eventStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventStart'), 'eventStart', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_eventStart', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 42, 6), )

    
    eventStart = property(__eventStart.value, __eventStart.set, None, None)

    
    # Element eventEnd uses Python identifier eventEnd
    __eventEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventEnd'), 'eventEnd', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_eventEnd', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 43, 6), )

    
    eventEnd = property(__eventEnd.value, __eventEnd.set, None, None)

    
    # Element operationType uses Python identifier operationType
    __operationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationType'), 'operationType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_operationType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 44, 6), )

    
    operationType = property(__operationType.value, __operationType.set, None, None)

    
    # Element dataSize uses Python identifier dataSize
    __dataSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'dataSize'), 'dataSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_dataSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 49, 6), )

    
    dataSize = property(__dataSize.value, __dataSize.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 53, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_15_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __creator.name() : __creator,
        __eventID.name() : __eventID,
        __eventType.name() : __eventType,
        __eventStart.name() : __eventStart,
        __eventEnd.name() : __eventEnd,
        __operationType.name() : __operationType,
        __dataSize.name() : __dataSize,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 33, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element execStatus uses Python identifier execStatus
    __execStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execStatus'), 'execStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 39, 17), )

    
    execStatus = property(__execStatus.value, __execStatus.set, None, None)

    
    # Element execResult uses Python identifier execResult
    __execResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execResult'), 'execResult', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execResult', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 40, 6), )

    
    execResult = property(__execResult.value, __execResult.set, None, None)

    
    # Element execDisable uses Python identifier execDisable
    __execDisable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execDisable'), 'execDisable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execDisable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 41, 6), )

    
    execDisable = property(__execDisable.value, __execDisable.set, None, None)

    
    # Element execTarget uses Python identifier execTarget
    __execTarget = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execTarget'), 'execTarget', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execTarget', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 42, 6), )

    
    execTarget = property(__execTarget.value, __execTarget.set, None, None)

    
    # Element execMode uses Python identifier execMode
    __execMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execMode'), 'execMode', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execMode', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 43, 6), )

    
    execMode = property(__execMode.value, __execMode.set, None, None)

    
    # Element execFrequency uses Python identifier execFrequency
    __execFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execFrequency'), 'execFrequency', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execFrequency', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 44, 6), )

    
    execFrequency = property(__execFrequency.value, __execFrequency.set, None, None)

    
    # Element execDelay uses Python identifier execDelay
    __execDelay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execDelay'), 'execDelay', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execDelay', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 45, 6), )

    
    execDelay = property(__execDelay.value, __execDelay.set, None, None)

    
    # Element execNumber uses Python identifier execNumber
    __execNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execNumber'), 'execNumber', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execNumber', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 46, 6), )

    
    execNumber = property(__execNumber.value, __execNumber.set, None, None)

    
    # Element execReqArgs uses Python identifier execReqArgs
    __execReqArgs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execReqArgs'), 'execReqArgs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_execReqArgs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 47, 6), )

    
    execReqArgs = property(__execReqArgs.value, __execReqArgs.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 51, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_16_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __execStatus.name() : __execStatus,
        __execResult.name() : __execResult,
        __execDisable.name() : __execDisable,
        __execTarget.name() : __execTarget,
        __execMode.name() : __execMode,
        __execFrequency.name() : __execFrequency,
        __execDelay.name() : __execDelay,
        __execNumber.name() : __execNumber,
        __execReqArgs.name() : __execReqArgs,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (announcedResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 64, 2)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element memberType uses Python identifier memberType
    __memberType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberType'), 'memberType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_memberType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 70, 6), )

    
    memberType = property(__memberType.value, __memberType.set, None, None)

    
    # Element currentNrOfMembers uses Python identifier currentNrOfMembers
    __currentNrOfMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers'), 'currentNrOfMembers', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_currentNrOfMembers', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 71, 6), )

    
    currentNrOfMembers = property(__currentNrOfMembers.value, __currentNrOfMembers.set, None, None)

    
    # Element maxNrOfMembers uses Python identifier maxNrOfMembers
    __maxNrOfMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers'), 'maxNrOfMembers', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_maxNrOfMembers', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 72, 6), )

    
    maxNrOfMembers = property(__maxNrOfMembers.value, __maxNrOfMembers.set, None, None)

    
    # Element memberIDs uses Python identifier memberIDs
    __memberIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberIDs'), 'memberIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_memberIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 73, 6), )

    
    memberIDs = property(__memberIDs.value, __memberIDs.set, None, None)

    
    # Element membersAccessControlPolicyIDs uses Python identifier membersAccessControlPolicyIDs
    __membersAccessControlPolicyIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs'), 'membersAccessControlPolicyIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_membersAccessControlPolicyIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 74, 6), )

    
    membersAccessControlPolicyIDs = property(__membersAccessControlPolicyIDs.value, __membersAccessControlPolicyIDs.set, None, None)

    
    # Element memberTypeValidated uses Python identifier memberTypeValidated
    __memberTypeValidated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberTypeValidated'), 'memberTypeValidated', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_memberTypeValidated', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 75, 6), )

    
    memberTypeValidated = property(__memberTypeValidated.value, __memberTypeValidated.set, None, None)

    
    # Element consistencyStrategy uses Python identifier consistencyStrategy
    __consistencyStrategy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'consistencyStrategy'), 'consistencyStrategy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_consistencyStrategy', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 76, 6), )

    
    consistencyStrategy = property(__consistencyStrategy.value, __consistencyStrategy.set, None, None)

    
    # Element groupName uses Python identifier groupName
    __groupName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'groupName'), 'groupName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_groupName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 77, 6), )

    
    groupName = property(__groupName.value, __groupName.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 82, 28), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_17_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __memberType.name() : __memberType,
        __currentNrOfMembers.name() : __currentNrOfMembers,
        __maxNrOfMembers.name() : __maxNrOfMembers,
        __memberIDs.name() : __memberIDs,
        __membersAccessControlPolicyIDs.name() : __membersAccessControlPolicyIDs,
        __memberTypeValidated.name() : __memberTypeValidated,
        __consistencyStrategy.name() : __consistencyStrategy,
        __groupName.name() : __groupName,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (announcedResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 62, 2)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element locationSource uses Python identifier locationSource
    __locationSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationSource'), 'locationSource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationSource', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 68, 6), )

    
    locationSource = property(__locationSource.value, __locationSource.set, None, None)

    
    # Element locationUpdatePeriod uses Python identifier locationUpdatePeriod
    __locationUpdatePeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod'), 'locationUpdatePeriod', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationUpdatePeriod', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 69, 6), )

    
    locationUpdatePeriod = property(__locationUpdatePeriod.value, __locationUpdatePeriod.set, None, None)

    
    # Element locationTargetID uses Python identifier locationTargetID
    __locationTargetID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationTargetID'), 'locationTargetID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationTargetID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 70, 6), )

    
    locationTargetID = property(__locationTargetID.value, __locationTargetID.set, None, None)

    
    # Element locationServer uses Python identifier locationServer
    __locationServer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationServer'), 'locationServer', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationServer', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 71, 6), )

    
    locationServer = property(__locationServer.value, __locationServer.set, None, None)

    
    # Element locationContainerID uses Python identifier locationContainerID
    __locationContainerID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationContainerID'), 'locationContainerID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationContainerID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 72, 6), )

    
    locationContainerID = property(__locationContainerID.value, __locationContainerID.set, None, None)

    
    # Element locationContainerName uses Python identifier locationContainerName
    __locationContainerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationContainerName'), 'locationContainerName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationContainerName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 73, 6), )

    
    locationContainerName = property(__locationContainerName.value, __locationContainerName.set, None, None)

    
    # Element locationStatus uses Python identifier locationStatus
    __locationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationStatus'), 'locationStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_18_locationStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 74, 6), )

    
    locationStatus = property(__locationStatus.value, __locationStatus.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __locationSource.name() : __locationSource,
        __locationUpdatePeriod.name() : __locationUpdatePeriod,
        __locationTargetID.name() : __locationTargetID,
        __locationServer.name() : __locationServer,
        __locationContainerID.name() : __locationContainerID,
        __locationContainerName.name() : __locationContainerName,
        __locationStatus.name() : __locationStatus
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element serviceRoles uses Python identifier serviceRoles
    __serviceRoles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'serviceRoles'), 'serviceRoles', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_19_serviceRoles', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 40, 6), )

    
    serviceRoles = property(__serviceRoles.value, __serviceRoles.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_19_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 48, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}serviceSubscribedNode uses Python identifier serviceSubscribedNode
    __serviceSubscribedNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedNode'), 'serviceSubscribedNode', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_19_httpwww_onem2m_orgxmlprotocolsserviceSubscribedNode', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 32, 1), )

    
    serviceSubscribedNode = property(__serviceSubscribedNode.value, __serviceSubscribedNode.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_19_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __serviceRoles.name() : __serviceRoles,
        __childResource.name() : __childResource,
        __serviceSubscribedNode.name() : __serviceSubscribedNode,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element {http://www.onem2m.org/xml/protocols}execInstance uses Python identifier execInstance
    __execInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'execInstance'), 'execInstance', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_httpwww_onem2m_orgxmlprotocolsexecInstance', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 32, 1), )

    
    execInstance = property(__execInstance.value, __execInstance.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_description', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 40, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element cmdType uses Python identifier cmdType
    __cmdType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cmdType'), 'cmdType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_cmdType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 41, 6), )

    
    cmdType = property(__cmdType.value, __cmdType.set, None, None)

    
    # Element execReqArgs uses Python identifier execReqArgs
    __execReqArgs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execReqArgs'), 'execReqArgs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execReqArgs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 42, 6), )

    
    execReqArgs = property(__execReqArgs.value, __execReqArgs.set, None, None)

    
    # Element execEnable uses Python identifier execEnable
    __execEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execEnable'), 'execEnable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execEnable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 43, 6), )

    
    execEnable = property(__execEnable.value, __execEnable.set, None, None)

    
    # Element execTarget uses Python identifier execTarget
    __execTarget = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execTarget'), 'execTarget', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execTarget', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 44, 6), )

    
    execTarget = property(__execTarget.value, __execTarget.set, None, None)

    
    # Element execMode uses Python identifier execMode
    __execMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execMode'), 'execMode', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execMode', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 45, 6), )

    
    execMode = property(__execMode.value, __execMode.set, None, None)

    
    # Element execFrequency uses Python identifier execFrequency
    __execFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execFrequency'), 'execFrequency', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execFrequency', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 46, 6), )

    
    execFrequency = property(__execFrequency.value, __execFrequency.set, None, None)

    
    # Element execDelay uses Python identifier execDelay
    __execDelay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execDelay'), 'execDelay', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execDelay', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 47, 6), )

    
    execDelay = property(__execDelay.value, __execDelay.set, None, None)

    
    # Element execNumber uses Python identifier execNumber
    __execNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'execNumber'), 'execNumber', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_execNumber', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 48, 6), )

    
    execNumber = property(__execNumber.value, __execNumber.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 52, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_20_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __execInstance.name() : __execInstance,
        __description.name() : __description,
        __cmdType.name() : __cmdType,
        __execReqArgs.name() : __execReqArgs,
        __execEnable.name() : __execEnable,
        __execTarget.name() : __execTarget,
        __execMode.name() : __execMode,
        __execFrequency.name() : __execFrequency,
        __execDelay.name() : __execDelay,
        __execNumber.name() : __execNumber,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element pollingChannelURI uses Python identifier pollingChannelURI
    __pollingChannelURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pollingChannelURI'), 'pollingChannelURI', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_21_pollingChannelURI', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 42, 6), )

    
    pollingChannelURI = property(__pollingChannelURI.value, __pollingChannelURI.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __pollingChannelURI.name() : __pollingChannelURI
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (announcedResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 74, 2)
    _ElementMap = announcedResource._ElementMap.copy()
    _AttributeMap = announcedResource._AttributeMap.copy()
    # Base type is announcedResource
    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicy uses Python identifier accessControlPolicy
    __accessControlPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), 'accessControlPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsaccessControlPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1), )

    
    accessControlPolicy = property(__accessControlPolicy.value, __accessControlPolicy.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicyAnnc uses Python identifier accessControlPolicyAnnc
    __accessControlPolicyAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc'), 'accessControlPolicyAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsaccessControlPolicyAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 55, 1), )

    
    accessControlPolicyAnnc = property(__accessControlPolicyAnnc.value, __accessControlPolicyAnnc.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}containerAnnc uses Python identifier containerAnnc
    __containerAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), 'containerAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolscontainerAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1), )

    
    containerAnnc = property(__containerAnnc.value, __containerAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsgroup', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1), )

    
    group = property(__group.value, __group.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}groupAnnc uses Python identifier groupAnnc
    __groupAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc'), 'groupAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsgroupAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 63, 1), )

    
    groupAnnc = property(__groupAnnc.value, __groupAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}locationPolicyAnnc uses Python identifier locationPolicyAnnc
    __locationPolicyAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'locationPolicyAnnc'), 'locationPolicyAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolslocationPolicyAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 61, 1), )

    
    locationPolicyAnnc = property(__locationPolicyAnnc.value, __locationPolicyAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}nodeAnnc uses Python identifier nodeAnnc
    __nodeAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'nodeAnnc'), 'nodeAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsnodeAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 80, 4), )

    
    nodeAnnc = property(__nodeAnnc.value, __nodeAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}pollingChannel uses Python identifier pollingChannel
    __pollingChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), 'pollingChannel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolspollingChannel', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1), )

    
    pollingChannel = property(__pollingChannel.value, __pollingChannel.set, None, None)

    
    # Element cseType uses Python identifier cseType
    __cseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cseType'), 'cseType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_cseType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 80, 6), )

    
    cseType = property(__cseType.value, __cseType.set, None, None)

    
    # Element pointOfAccess uses Python identifier pointOfAccess
    __pointOfAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), 'pointOfAccess', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_pointOfAccess', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 81, 6), )

    
    pointOfAccess = property(__pointOfAccess.value, __pointOfAccess.set, None, None)

    
    # Element CSEBase uses Python identifier CSEBase
    __CSEBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSEBase'), 'CSEBase', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_CSEBase', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 82, 6), )

    
    CSEBase = property(__CSEBase.value, __CSEBase.set, None, None)

    
    # Element CSE-ID uses Python identifier CSE_ID
    __CSE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSE-ID'), 'CSE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_CSE_ID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 83, 6), )

    
    CSE_ID = property(__CSE_ID.value, __CSE_ID.set, None, None)

    
    # Element requestReachability uses Python identifier requestReachability
    __requestReachability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestReachability'), 'requestReachability', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_requestReachability', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 84, 6), )

    
    requestReachability = property(__requestReachability.value, __requestReachability.set, None, None)

    
    # Element nodeLink uses Python identifier nodeLink
    __nodeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeLink'), 'nodeLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_nodeLink', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 85, 6), )

    
    nodeLink = property(__nodeLink.value, __nodeLink.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 89, 28), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}scheduleAnnc uses Python identifier scheduleAnnc
    __scheduleAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc'), 'scheduleAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolsscheduleAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 54, 1), )

    
    scheduleAnnc = property(__scheduleAnnc.value, __scheduleAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_22_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __accessControlPolicy.name() : __accessControlPolicy,
        __accessControlPolicyAnnc.name() : __accessControlPolicyAnnc,
        __container.name() : __container,
        __containerAnnc.name() : __containerAnnc,
        __group.name() : __group,
        __groupAnnc.name() : __groupAnnc,
        __locationPolicyAnnc.name() : __locationPolicyAnnc,
        __nodeAnnc.name() : __nodeAnnc,
        __pollingChannel.name() : __pollingChannel,
        __cseType.name() : __cseType,
        __pointOfAccess.name() : __pointOfAccess,
        __CSEBase.name() : __CSEBase,
        __CSE_ID.name() : __CSE_ID,
        __requestReachability.name() : __requestReachability,
        __nodeLink.name() : __nodeLink,
        __childResource.name() : __childResource,
        __scheduleAnnc.name() : __scheduleAnnc,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 40, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operation'), 'operation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_operation', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 42, 6), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Element target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'target'), 'target', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_target', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 43, 6), )

    
    target = property(__target.value, __target.set, None, None)

    
    # Element originator uses Python identifier originator
    __originator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'originator'), 'originator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_originator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 44, 6), )

    
    originator = property(__originator.value, __originator.set, None, None)

    
    # Element requestID uses Python identifier requestID
    __requestID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestID'), 'requestID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_requestID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 45, 6), )

    
    requestID = property(__requestID.value, __requestID.set, None, None)

    
    # Element metaInformation uses Python identifier metaInformation
    __metaInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'metaInformation'), 'metaInformation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_metaInformation', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 46, 6), )

    
    metaInformation = property(__metaInformation.value, __metaInformation.set, None, None)

    
    # Element primitiveContent uses Python identifier primitiveContent
    __primitiveContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'primitiveContent'), 'primitiveContent', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_primitiveContent', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 47, 6), )

    
    primitiveContent = property(__primitiveContent.value, __primitiveContent.set, None, None)

    
    # Element requestStatus uses Python identifier requestStatus
    __requestStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestStatus'), 'requestStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_requestStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 48, 6), )

    
    requestStatus = property(__requestStatus.value, __requestStatus.set, None, None)

    
    # Element operationResult uses Python identifier operationResult
    __operationResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'operationResult'), 'operationResult', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_operationResult', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 49, 6), )

    
    operationResult = property(__operationResult.value, __operationResult.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 53, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_23_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __stateTag.name() : __stateTag,
        __operation.name() : __operation,
        __target.name() : __target,
        __originator.name() : __originator,
        __requestID.name() : __requestID,
        __metaInformation.name() : __metaInformation,
        __primitiveContent.name() : __primitiveContent,
        __requestStatus.name() : __requestStatus,
        __operationResult.name() : __operationResult,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (announceableSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 34, 2)
    _ElementMap = announceableSubordinateResource._ElementMap.copy()
    _AttributeMap = announceableSubordinateResource._AttributeMap.copy()
    # Base type is announceableSubordinateResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableSubordinateResource
    
    # Element scheduleElement uses Python identifier scheduleElement
    __scheduleElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scheduleElement'), 'scheduleElement', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_24_scheduleElement', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 39, 6), )

    
    scheduleElement = property(__scheduleElement.value, __scheduleElement.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_24_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 43, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_24_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __scheduleElement.name() : __scheduleElement,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (announcedSubordinateResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 55, 2)
    _ElementMap = announcedSubordinateResource._ElementMap.copy()
    _AttributeMap = announcedSubordinateResource._AttributeMap.copy()
    # Base type is announcedSubordinateResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedSubordinateResource
    
    # Element scheduleElement uses Python identifier scheduleElement
    __scheduleElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'scheduleElement'), 'scheduleElement', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_25_scheduleElement', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 60, 6), )

    
    scheduleElement = property(__scheduleElement.value, __scheduleElement.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __scheduleElement.name() : __scheduleElement
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 33, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element applicableCredIDs uses Python identifier applicableCredIDs
    __applicableCredIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'applicableCredIDs'), 'applicableCredIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_26_applicableCredIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 39, 6), )

    
    applicableCredIDs = property(__applicableCredIDs.value, __applicableCredIDs.set, None, None)

    
    # Element allowedApp-IDs uses Python identifier allowedApp_IDs
    __allowedApp_IDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'allowedApp-IDs'), 'allowedApp_IDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_26_allowedApp_IDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 40, 6), )

    
    allowedApp_IDs = property(__allowedApp_IDs.value, __allowedApp_IDs.set, None, None)

    
    # Element allowedAEs uses Python identifier allowedAEs
    __allowedAEs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'allowedAEs'), 'allowedAEs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_26_allowedAEs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 41, 6), )

    
    allowedAEs = property(__allowedAEs.value, __allowedAEs.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_26_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 45, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_26_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __applicableCredIDs.name() : __applicableCredIDs,
        __allowedApp_IDs.name() : __allowedApp_IDs,
        __allowedAEs.name() : __allowedAEs,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 33, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element nodeID uses Python identifier nodeID
    __nodeID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeID'), 'nodeID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_nodeID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 39, 6), )

    
    nodeID = property(__nodeID.value, __nodeID.set, None, None)

    
    # Element CSE-ID uses Python identifier CSE_ID
    __CSE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSE-ID'), 'CSE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_CSE_ID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 40, 6), )

    
    CSE_ID = property(__CSE_ID.value, __CSE_ID.set, None, None)

    
    # Element deviceIdentifier uses Python identifier deviceIdentifier
    __deviceIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deviceIdentifier'), 'deviceIdentifier', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_deviceIdentifier', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 41, 6), )

    
    deviceIdentifier = property(__deviceIdentifier.value, __deviceIdentifier.set, None, None)

    
    # Element ruleLinks uses Python identifier ruleLinks
    __ruleLinks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ruleLinks'), 'ruleLinks', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_ruleLinks', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 46, 24), )

    
    ruleLinks = property(__ruleLinks.value, __ruleLinks.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 50, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_27_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __nodeID.name() : __nodeID,
        __CSE_ID.name() : __CSE_ID,
        __deviceIdentifier.name() : __deviceIdentifier,
        __ruleLinks.name() : __ruleLinks,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 33, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 39, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element statsCollectID uses Python identifier statsCollectID
    __statsCollectID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'statsCollectID'), 'statsCollectID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_statsCollectID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 40, 6), )

    
    statsCollectID = property(__statsCollectID.value, __statsCollectID.set, None, None)

    
    # Element collectingEntityID uses Python identifier collectingEntityID
    __collectingEntityID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'collectingEntityID'), 'collectingEntityID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_collectingEntityID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 41, 6), )

    
    collectingEntityID = property(__collectingEntityID.value, __collectingEntityID.set, None, None)

    
    # Element collectedEntityID uses Python identifier collectedEntityID
    __collectedEntityID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'collectedEntityID'), 'collectedEntityID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_collectedEntityID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 42, 24), )

    
    collectedEntityID = property(__collectedEntityID.value, __collectedEntityID.set, None, None)

    
    # Element statsRuleStatus uses Python identifier statsRuleStatus
    __statsRuleStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'statsRuleStatus'), 'statsRuleStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_statsRuleStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 43, 6), )

    
    statsRuleStatus = property(__statsRuleStatus.value, __statsRuleStatus.set, None, None)

    
    # Element statModel uses Python identifier statModel
    __statModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'statModel'), 'statModel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_statModel', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 44, 6), )

    
    statModel = property(__statModel.value, __statModel.set, None, None)

    
    # Element collectPeriod uses Python identifier collectPeriod
    __collectPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'collectPeriod'), 'collectPeriod', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_collectPeriod', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 45, 6), )

    
    collectPeriod = property(__collectPeriod.value, __collectPeriod.set, None, None)

    
    # Element eventID uses Python identifier eventID
    __eventID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventID'), 'eventID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_eventID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 46, 24), )

    
    eventID = property(__eventID.value, __eventID.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 50, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_28_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __creator.name() : __creator,
        __statsCollectID.name() : __statsCollectID,
        __collectingEntityID.name() : __collectingEntityID,
        __collectedEntityID.name() : __collectedEntityID,
        __statsRuleStatus.name() : __statsRuleStatus,
        __statModel.name() : __statModel,
        __collectPeriod.name() : __collectPeriod,
        __eventID.name() : __eventID,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element {http://www.onem2m.org/xml/protocols}eventConfig uses Python identifier eventConfig
    __eventConfig = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'eventConfig'), 'eventConfig', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_29_httpwww_onem2m_orgxmlprotocolseventConfig', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 32, 1), )

    
    eventConfig = property(__eventConfig.value, __eventConfig.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_29_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 40, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_29_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 44, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_29_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __eventConfig.name() : __eventConfig,
        __creator.name() : __creator,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (regularResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 34, 2)
    _ElementMap = regularResource._ElementMap.copy()
    _AttributeMap = regularResource._AttributeMap.copy()
    # Base type is regularResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element {http://www.onem2m.org/xml/protocols}schedule uses Python identifier schedule
    __schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'schedule'), 'schedule', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_httpwww_onem2m_orgxmlprotocolsschedule', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1), )

    
    schedule = property(__schedule.value, __schedule.set, None, None)

    
    # Element eventNotificationCriteria uses Python identifier eventNotificationCriteria
    __eventNotificationCriteria = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'eventNotificationCriteria'), 'eventNotificationCriteria', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_eventNotificationCriteria', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 40, 6), )

    
    eventNotificationCriteria = property(__eventNotificationCriteria.value, __eventNotificationCriteria.set, None, None)

    
    # Element expirationCounter uses Python identifier expirationCounter
    __expirationCounter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'expirationCounter'), 'expirationCounter', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_expirationCounter', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 41, 6), )

    
    expirationCounter = property(__expirationCounter.value, __expirationCounter.set, None, None)

    
    # Element notificationURI uses Python identifier notificationURI
    __notificationURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationURI'), 'notificationURI', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_notificationURI', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 42, 6), )

    
    notificationURI = property(__notificationURI.value, __notificationURI.set, None, None)

    
    # Element groupID uses Python identifier groupID
    __groupID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'groupID'), 'groupID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_groupID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 43, 6), )

    
    groupID = property(__groupID.value, __groupID.set, None, None)

    
    # Element notificationForwardingURI uses Python identifier notificationForwardingURI
    __notificationForwardingURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI'), 'notificationForwardingURI', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_notificationForwardingURI', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 44, 6), )

    
    notificationForwardingURI = property(__notificationForwardingURI.value, __notificationForwardingURI.set, None, None)

    
    # Element batchNotify uses Python identifier batchNotify
    __batchNotify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'batchNotify'), 'batchNotify', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_batchNotify', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 45, 6), )

    
    batchNotify = property(__batchNotify.value, __batchNotify.set, None, None)

    
    # Element rateLimit uses Python identifier rateLimit
    __rateLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'rateLimit'), 'rateLimit', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_rateLimit', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 46, 6), )

    
    rateLimit = property(__rateLimit.value, __rateLimit.set, None, None)

    
    # Element preSubscriptionNotify uses Python identifier preSubscriptionNotify
    __preSubscriptionNotify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'preSubscriptionNotify'), 'preSubscriptionNotify', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_preSubscriptionNotify', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 47, 6), )

    
    preSubscriptionNotify = property(__preSubscriptionNotify.value, __preSubscriptionNotify.set, None, None)

    
    # Element pendingNotification uses Python identifier pendingNotification
    __pendingNotification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pendingNotification'), 'pendingNotification', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_pendingNotification', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 48, 6), )

    
    pendingNotification = property(__pendingNotification.value, __pendingNotification.set, None, None)

    
    # Element notificationStoragePriority uses Python identifier notificationStoragePriority
    __notificationStoragePriority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationStoragePriority'), 'notificationStoragePriority', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_notificationStoragePriority', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 49, 6), )

    
    notificationStoragePriority = property(__notificationStoragePriority.value, __notificationStoragePriority.set, None, None)

    
    # Element latestNotify uses Python identifier latestNotify
    __latestNotify = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'latestNotify'), 'latestNotify', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_latestNotify', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 50, 6), )

    
    latestNotify = property(__latestNotify.value, __latestNotify.set, None, None)

    
    # Element notificationContentType uses Python identifier notificationContentType
    __notificationContentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationContentType'), 'notificationContentType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_notificationContentType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 51, 6), )

    
    notificationContentType = property(__notificationContentType.value, __notificationContentType.set, None, None)

    
    # Element notificationEventCat uses Python identifier notificationEventCat
    __notificationEventCat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'notificationEventCat'), 'notificationEventCat', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_notificationEventCat', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 52, 6), )

    
    notificationEventCat = property(__notificationEventCat.value, __notificationEventCat.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 53, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element subscriberURI uses Python identifier subscriberURI
    __subscriberURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'subscriberURI'), 'subscriberURI', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_subscriberURI', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 54, 6), )

    
    subscriberURI = property(__subscriberURI.value, __subscriberURI.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_30_childResource', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 58, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __schedule.name() : __schedule,
        __eventNotificationCriteria.name() : __eventNotificationCriteria,
        __expirationCounter.name() : __expirationCounter,
        __notificationURI.name() : __notificationURI,
        __groupID.name() : __groupID,
        __notificationForwardingURI.name() : __notificationForwardingURI,
        __batchNotify.name() : __batchNotify,
        __rateLimit.name() : __rateLimit,
        __preSubscriptionNotify.name() : __preSubscriptionNotify,
        __pendingNotification.name() : __pendingNotification,
        __notificationStoragePriority.name() : __notificationStoragePriority,
        __latestNotify.name() : __latestNotify,
        __notificationContentType.name() : __notificationContentType,
        __notificationEventCat.name() : __notificationEventCat,
        __creator.name() : __creator,
        __subscriberURI.name() : __subscriberURI,
        __childResource.name() : __childResource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 38, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element appName uses Python identifier appName
    __appName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'appName'), 'appName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_appName', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 44, 6), )

    
    appName = property(__appName.value, __appName.set, None, None)

    
    # Element App-ID uses Python identifier App_ID
    __App_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'App-ID'), 'App_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_App_ID', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 45, 6), )

    
    App_ID = property(__App_ID.value, __App_ID.set, None, None)

    
    # Element AE-ID uses Python identifier AE_ID
    __AE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'AE-ID'), 'AE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_AE_ID', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 46, 6), )

    
    AE_ID = property(__AE_ID.value, __AE_ID.set, None, None)

    
    # Element pointOfAccess uses Python identifier pointOfAccess
    __pointOfAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), 'pointOfAccess', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_pointOfAccess', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 47, 6), )

    
    pointOfAccess = property(__pointOfAccess.value, __pointOfAccess.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_ontologyRef', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 48, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element nodeLink uses Python identifier nodeLink
    __nodeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeLink'), 'nodeLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_nodeLink', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 49, 6), )

    
    nodeLink = property(__nodeLink.value, __nodeLink.set, None, None)

    
    # Element requestReachability uses Python identifier requestReachability
    __requestReachability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestReachability'), 'requestReachability', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_requestReachability', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 50, 6), )

    
    requestReachability = property(__requestReachability.value, __requestReachability.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_childResource', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 54, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicy uses Python identifier accessControlPolicy
    __accessControlPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), 'accessControlPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolsaccessControlPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1), )

    
    accessControlPolicy = property(__accessControlPolicy.value, __accessControlPolicy.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolsgroup', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1), )

    
    group = property(__group.value, __group.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}pollingChannel uses Python identifier pollingChannel
    __pollingChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), 'pollingChannel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolspollingChannel', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1), )

    
    pollingChannel = property(__pollingChannel.value, __pollingChannel.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}schedule uses Python identifier schedule
    __schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'schedule'), 'schedule', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolsschedule', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1), )

    
    schedule = property(__schedule.value, __schedule.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_31_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __appName.name() : __appName,
        __App_ID.name() : __App_ID,
        __AE_ID.name() : __AE_ID,
        __pointOfAccess.name() : __pointOfAccess,
        __ontologyRef.name() : __ontologyRef,
        __nodeLink.name() : __nodeLink,
        __requestReachability.name() : __requestReachability,
        __childResource.name() : __childResource,
        __accessControlPolicy.name() : __accessControlPolicy,
        __container.name() : __container,
        __group.name() : __group,
        __pollingChannel.name() : __pollingChannel,
        __schedule.name() : __schedule,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 59, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element devID uses Python identifier devID
    __devID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devID'), 'devID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_devID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 65, 6), )

    
    devID = property(__devID.value, __devID.set, None, None)

    
    # Element devType uses Python identifier devType
    __devType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devType'), 'devType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_devType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 66, 6), )

    
    devType = property(__devType.value, __devType.set, None, None)

    
    # Element areaNwkId uses Python identifier areaNwkId
    __areaNwkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'areaNwkId'), 'areaNwkId', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_areaNwkId', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 67, 6), )

    
    areaNwkId = property(__areaNwkId.value, __areaNwkId.set, None, None)

    
    # Element sleepInterval uses Python identifier sleepInterval
    __sleepInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sleepInterval'), 'sleepInterval', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_sleepInterval', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 68, 6), )

    
    sleepInterval = property(__sleepInterval.value, __sleepInterval.set, None, None)

    
    # Element sleepDuration uses Python identifier sleepDuration
    __sleepDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sleepDuration'), 'sleepDuration', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_sleepDuration', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 69, 6), )

    
    sleepDuration = property(__sleepDuration.value, __sleepDuration.set, None, None)

    
    # Element devStatus uses Python identifier devStatus
    __devStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devStatus'), 'devStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_devStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 70, 6), )

    
    devStatus = property(__devStatus.value, __devStatus.set, None, None)

    
    # Element listOfNeighbors uses Python identifier listOfNeighbors
    __listOfNeighbors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'listOfNeighbors'), 'listOfNeighbors', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_listOfNeighbors', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 71, 6), )

    
    listOfNeighbors = property(__listOfNeighbors.value, __listOfNeighbors.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 75, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_32_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __devID.name() : __devID,
        __devType.name() : __devType,
        __areaNwkId.name() : __areaNwkId,
        __sleepInterval.name() : __sleepInterval,
        __sleepDuration.name() : __sleepDuration,
        __devStatus.name() : __devStatus,
        __listOfNeighbors.name() : __listOfNeighbors,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 54, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element areaNwkType uses Python identifier areaNwkType
    __areaNwkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'areaNwkType'), 'areaNwkType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_33_areaNwkType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 60, 6), )

    
    areaNwkType = property(__areaNwkType.value, __areaNwkType.set, None, None)

    
    # Element listOfDevices uses Python identifier listOfDevices
    __listOfDevices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'listOfDevices'), 'listOfDevices', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_33_listOfDevices', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 61, 6), )

    
    listOfDevices = property(__listOfDevices.value, __listOfDevices.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_33_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 65, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_33_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __areaNwkType.name() : __areaNwkType,
        __listOfDevices.name() : __listOfDevices,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 55, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element batteryLevel uses Python identifier batteryLevel
    __batteryLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'batteryLevel'), 'batteryLevel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_34_batteryLevel', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 61, 6), )

    
    batteryLevel = property(__batteryLevel.value, __batteryLevel.set, None, None)

    
    # Element batteryStatus uses Python identifier batteryStatus
    __batteryStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'batteryStatus'), 'batteryStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_34_batteryStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 62, 6), )

    
    batteryStatus = property(__batteryStatus.value, __batteryStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_34_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 66, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_34_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __batteryLevel.name() : __batteryLevel,
        __batteryStatus.name() : __batteryStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.onem2m.org/xml/protocols}mgmtResource with content type ELEMENT_ONLY
class mgmtResource (announceableResource):
    """Complex type {http://www.onem2m.org/xml/protocols}mgmtResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'mgmtResource')
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 578, 1)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition uses Python identifier mgmtDefinition
    __mgmtDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtDefinition'), 'mgmtDefinition', '__httpwww_onem2m_orgxmlprotocols_mgmtResource_mgmtDefinition', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5), )

    
    mgmtDefinition = property(__mgmtDefinition.value, __mgmtDefinition.set, None, None)

    
    # Element objectIDs uses Python identifier objectIDs
    __objectIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'objectIDs'), 'objectIDs', '__httpwww_onem2m_orgxmlprotocols_mgmtResource_objectIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5), )

    
    objectIDs = property(__objectIDs.value, __objectIDs.set, None, None)

    
    # Element objectPaths uses Python identifier objectPaths
    __objectPaths = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'objectPaths'), 'objectPaths', '__httpwww_onem2m_orgxmlprotocols_mgmtResource_objectPaths', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5), )

    
    objectPaths = property(__objectPaths.value, __objectPaths.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpwww_onem2m_orgxmlprotocols_mgmtResource_description', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __mgmtDefinition.name() : __mgmtDefinition,
        __objectIDs.name() : __objectIDs,
        __objectPaths.name() : __objectPaths,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'mgmtResource', mgmtResource)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 34, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element stateTag uses Python identifier stateTag
    __stateTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'stateTag'), 'stateTag', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_stateTag', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 39, 6), )

    
    stateTag = property(__stateTag.value, __stateTag.set, None, None)

    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 41, 6), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element maxNrOfInstances uses Python identifier maxNrOfInstances
    __maxNrOfInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances'), 'maxNrOfInstances', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_maxNrOfInstances', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 42, 6), )

    
    maxNrOfInstances = property(__maxNrOfInstances.value, __maxNrOfInstances.set, None, None)

    
    # Element maxByteSize uses Python identifier maxByteSize
    __maxByteSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxByteSize'), 'maxByteSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_maxByteSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 43, 6), )

    
    maxByteSize = property(__maxByteSize.value, __maxByteSize.set, None, None)

    
    # Element maxInstanceAge uses Python identifier maxInstanceAge
    __maxInstanceAge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxInstanceAge'), 'maxInstanceAge', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_maxInstanceAge', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 44, 6), )

    
    maxInstanceAge = property(__maxInstanceAge.value, __maxInstanceAge.set, None, None)

    
    # Element currentNrOfInstances uses Python identifier currentNrOfInstances
    __currentNrOfInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances'), 'currentNrOfInstances', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_currentNrOfInstances', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 45, 6), )

    
    currentNrOfInstances = property(__currentNrOfInstances.value, __currentNrOfInstances.set, None, None)

    
    # Element currentByteSize uses Python identifier currentByteSize
    __currentByteSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentByteSize'), 'currentByteSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_currentByteSize', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 46, 6), )

    
    currentByteSize = property(__currentByteSize.value, __currentByteSize.set, None, None)

    
    # Element locationID uses Python identifier locationID
    __locationID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationID'), 'locationID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_locationID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 47, 6), )

    
    locationID = property(__locationID.value, __locationID.set, None, None)

    
    # Element ontologyRef uses Python identifier ontologyRef
    __ontologyRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'ontologyRef'), 'ontologyRef', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_ontologyRef', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 48, 6), )

    
    ontologyRef = property(__ontologyRef.value, __ontologyRef.set, None, None)

    
    # Element latest uses Python identifier latest
    __latest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'latest'), 'latest', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_latest', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 51, 6), )

    
    latest = property(__latest.value, __latest.set, None, None)

    
    # Element oldest uses Python identifier oldest
    __oldest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'oldest'), 'oldest', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_oldest', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 52, 6), )

    
    oldest = property(__oldest.value, __oldest.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 54, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}contentInstance uses Python identifier contentInstance
    __contentInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'contentInstance'), 'contentInstance', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_httpwww_onem2m_orgxmlprotocolscontentInstance', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 32, 1), )

    
    contentInstance = property(__contentInstance.value, __contentInstance.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_35_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __container.name() : __container,
        __stateTag.name() : __stateTag,
        __creator.name() : __creator,
        __maxNrOfInstances.name() : __maxNrOfInstances,
        __maxByteSize.name() : __maxByteSize,
        __maxInstanceAge.name() : __maxInstanceAge,
        __currentNrOfInstances.name() : __currentNrOfInstances,
        __currentByteSize.name() : __currentByteSize,
        __locationID.name() : __locationID,
        __ontologyRef.name() : __ontologyRef,
        __latest.name() : __latest,
        __oldest.name() : __oldest,
        __childResource.name() : __childResource,
        __contentInstance.name() : __contentInstance,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 59, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element capabilityName uses Python identifier capabilityName
    __capabilityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'capabilityName'), 'capabilityName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_capabilityName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 65, 6), )

    
    capabilityName = property(__capabilityName.value, __capabilityName.set, None, None)

    
    # Element attached uses Python identifier attached
    __attached = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attached'), 'attached', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_attached', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 66, 6), )

    
    attached = property(__attached.value, __attached.set, None, None)

    
    # Element capabilityActionStatus uses Python identifier capabilityActionStatus
    __capabilityActionStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus'), 'capabilityActionStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_capabilityActionStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 67, 6), )

    
    capabilityActionStatus = property(__capabilityActionStatus.value, __capabilityActionStatus.set, None, None)

    
    # Element currentState uses Python identifier currentState
    __currentState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentState'), 'currentState', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_currentState', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 68, 6), )

    
    currentState = property(__currentState.value, __currentState.set, None, None)

    
    # Element enable uses Python identifier enable
    __enable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'enable'), 'enable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_enable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 69, 6), )

    
    enable = property(__enable.value, __enable.set, None, None)

    
    # Element disable uses Python identifier disable
    __disable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'disable'), 'disable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_disable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 70, 6), )

    
    disable = property(__disable.value, __disable.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 74, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_36_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __capabilityName.name() : __capabilityName,
        __attached.name() : __attached,
        __capabilityActionStatus.name() : __capabilityActionStatus,
        __currentState.name() : __currentState,
        __enable.name() : __enable,
        __disable.name() : __disable,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 60, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element deviceLabel uses Python identifier deviceLabel
    __deviceLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deviceLabel'), 'deviceLabel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_deviceLabel', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 66, 6), )

    
    deviceLabel = property(__deviceLabel.value, __deviceLabel.set, None, None)

    
    # Element manufacturer uses Python identifier manufacturer
    __manufacturer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'manufacturer'), 'manufacturer', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_manufacturer', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 67, 6), )

    
    manufacturer = property(__manufacturer.value, __manufacturer.set, None, None)

    
    # Element model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'model'), 'model', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_model', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 68, 6), )

    
    model = property(__model.value, __model.set, None, None)

    
    # Element deviceType uses Python identifier deviceType
    __deviceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deviceType'), 'deviceType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_deviceType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 69, 6), )

    
    deviceType = property(__deviceType.value, __deviceType.set, None, None)

    
    # Element fwVersion uses Python identifier fwVersion
    __fwVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fwVersion'), 'fwVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_fwVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 70, 6), )

    
    fwVersion = property(__fwVersion.value, __fwVersion.set, None, None)

    
    # Element swVersion uses Python identifier swVersion
    __swVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'swVersion'), 'swVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_swVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 71, 6), )

    
    swVersion = property(__swVersion.value, __swVersion.set, None, None)

    
    # Element hwVersion uses Python identifier hwVersion
    __hwVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hwVersion'), 'hwVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_hwVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 72, 6), )

    
    hwVersion = property(__hwVersion.value, __hwVersion.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 76, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_37_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __deviceLabel.name() : __deviceLabel,
        __manufacturer.name() : __manufacturer,
        __model.name() : __model,
        __deviceType.name() : __deviceType,
        __fwVersion.name() : __fwVersion,
        __swVersion.name() : __swVersion,
        __hwVersion.name() : __hwVersion,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 58, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element logTypeId uses Python identifier logTypeId
    __logTypeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logTypeId'), 'logTypeId', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_logTypeId', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 64, 6), )

    
    logTypeId = property(__logTypeId.value, __logTypeId.set, None, None)

    
    # Element logData uses Python identifier logData
    __logData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logData'), 'logData', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_logData', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 65, 6), )

    
    logData = property(__logData.value, __logData.set, None, None)

    
    # Element logStatus uses Python identifier logStatus
    __logStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStatus'), 'logStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_logStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 66, 6), )

    
    logStatus = property(__logStatus.value, __logStatus.set, None, None)

    
    # Element logStart uses Python identifier logStart
    __logStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStart'), 'logStart', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_logStart', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 67, 6), )

    
    logStart = property(__logStart.value, __logStart.set, None, None)

    
    # Element logStop uses Python identifier logStop
    __logStop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStop'), 'logStop', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_logStop', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 68, 6), )

    
    logStop = property(__logStop.value, __logStop.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 72, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_38_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __logTypeId.name() : __logTypeId,
        __logData.name() : __logData,
        __logStatus.name() : __logStatus,
        __logStart.name() : __logStart,
        __logStop.name() : __logStop,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 58, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 64, 6), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element firmwareName uses Python identifier firmwareName
    __firmwareName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'firmwareName'), 'firmwareName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_firmwareName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 65, 6), )

    
    firmwareName = property(__firmwareName.value, __firmwareName.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 66, 6), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element update uses Python identifier update
    __update = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'update'), 'update', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_update', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 67, 6), )

    
    update = property(__update.value, __update.set, None, None)

    
    # Element updateStatus uses Python identifier updateStatus
    __updateStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'updateStatus'), 'updateStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_updateStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 68, 6), )

    
    updateStatus = property(__updateStatus.value, __updateStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 72, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_39_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __version.name() : __version,
        __firmwareName.name() : __firmwareName,
        __URL.name() : __URL,
        __update.name() : __update,
        __updateStatus.name() : __updateStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 34, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'creator'), 'creator', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_creator', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 40, 24), )

    
    creator = property(__creator.value, __creator.set, None, None)

    
    # Element memberType uses Python identifier memberType
    __memberType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberType'), 'memberType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_memberType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 41, 6), )

    
    memberType = property(__memberType.value, __memberType.set, None, None)

    
    # Element currentNrOfMembers uses Python identifier currentNrOfMembers
    __currentNrOfMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers'), 'currentNrOfMembers', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_currentNrOfMembers', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 42, 6), )

    
    currentNrOfMembers = property(__currentNrOfMembers.value, __currentNrOfMembers.set, None, None)

    
    # Element maxNrOfMembers uses Python identifier maxNrOfMembers
    __maxNrOfMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers'), 'maxNrOfMembers', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_maxNrOfMembers', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 43, 6), )

    
    maxNrOfMembers = property(__maxNrOfMembers.value, __maxNrOfMembers.set, None, None)

    
    # Element memberIDs uses Python identifier memberIDs
    __memberIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberIDs'), 'memberIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_memberIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 44, 6), )

    
    memberIDs = property(__memberIDs.value, __memberIDs.set, None, None)

    
    # Element membersAccessControlPolicyIDs uses Python identifier membersAccessControlPolicyIDs
    __membersAccessControlPolicyIDs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs'), 'membersAccessControlPolicyIDs', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_membersAccessControlPolicyIDs', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 45, 6), )

    
    membersAccessControlPolicyIDs = property(__membersAccessControlPolicyIDs.value, __membersAccessControlPolicyIDs.set, None, None)

    
    # Element memberTypeValidated uses Python identifier memberTypeValidated
    __memberTypeValidated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memberTypeValidated'), 'memberTypeValidated', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_memberTypeValidated', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 46, 6), )

    
    memberTypeValidated = property(__memberTypeValidated.value, __memberTypeValidated.set, None, None)

    
    # Element consistencyStrategy uses Python identifier consistencyStrategy
    __consistencyStrategy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'consistencyStrategy'), 'consistencyStrategy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_consistencyStrategy', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 47, 6), )

    
    consistencyStrategy = property(__consistencyStrategy.value, __consistencyStrategy.set, None, None)

    
    # Element groupName uses Python identifier groupName
    __groupName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'groupName'), 'groupName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_groupName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 48, 6), )

    
    groupName = property(__groupName.value, __groupName.set, None, None)

    
    # Element fanOutPoint uses Python identifier fanOutPoint
    __fanOutPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fanOutPoint'), 'fanOutPoint', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_fanOutPoint', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 51, 6), )

    
    fanOutPoint = property(__fanOutPoint.value, __fanOutPoint.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 54, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_40_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __creator.name() : __creator,
        __memberType.name() : __memberType,
        __currentNrOfMembers.name() : __currentNrOfMembers,
        __maxNrOfMembers.name() : __maxNrOfMembers,
        __memberIDs.name() : __memberIDs,
        __membersAccessControlPolicyIDs.name() : __membersAccessControlPolicyIDs,
        __memberTypeValidated.name() : __memberTypeValidated,
        __consistencyStrategy.name() : __consistencyStrategy,
        __groupName.name() : __groupName,
        __fanOutPoint.name() : __fanOutPoint,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 34, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element locationSource uses Python identifier locationSource
    __locationSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationSource'), 'locationSource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationSource', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 40, 6), )

    
    locationSource = property(__locationSource.value, __locationSource.set, None, None)

    
    # Element locationUpdatePeriod uses Python identifier locationUpdatePeriod
    __locationUpdatePeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod'), 'locationUpdatePeriod', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationUpdatePeriod', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 41, 6), )

    
    locationUpdatePeriod = property(__locationUpdatePeriod.value, __locationUpdatePeriod.set, None, None)

    
    # Element locationTargetID uses Python identifier locationTargetID
    __locationTargetID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationTargetID'), 'locationTargetID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationTargetID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 42, 6), )

    
    locationTargetID = property(__locationTargetID.value, __locationTargetID.set, None, None)

    
    # Element locationServer uses Python identifier locationServer
    __locationServer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationServer'), 'locationServer', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationServer', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 43, 6), )

    
    locationServer = property(__locationServer.value, __locationServer.set, None, None)

    
    # Element locationContainerID uses Python identifier locationContainerID
    __locationContainerID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationContainerID'), 'locationContainerID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationContainerID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 44, 6), )

    
    locationContainerID = property(__locationContainerID.value, __locationContainerID.set, None, None)

    
    # Element locationContainerName uses Python identifier locationContainerName
    __locationContainerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationContainerName'), 'locationContainerName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationContainerName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 45, 6), )

    
    locationContainerName = property(__locationContainerName.value, __locationContainerName.set, None, None)

    
    # Element locationStatus uses Python identifier locationStatus
    __locationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'locationStatus'), 'locationStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_locationStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 46, 6), )

    
    locationStatus = property(__locationStatus.value, __locationStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 50, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_41_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __locationSource.name() : __locationSource,
        __locationUpdatePeriod.name() : __locationUpdatePeriod,
        __locationTargetID.name() : __locationTargetID,
        __locationServer.name() : __locationServer,
        __locationContainerID.name() : __locationContainerID,
        __locationContainerName.name() : __locationContainerName,
        __locationStatus.name() : __locationStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 55, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element memAvailable uses Python identifier memAvailable
    __memAvailable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memAvailable'), 'memAvailable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_42_memAvailable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 61, 6), )

    
    memAvailable = property(__memAvailable.value, __memAvailable.set, None, None)

    
    # Element memTotal uses Python identifier memTotal
    __memTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memTotal'), 'memTotal', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_42_memTotal', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 62, 6), )

    
    memTotal = property(__memTotal.value, __memTotal.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_42_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 66, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_42_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __memAvailable.name() : __memAvailable,
        __memTotal.name() : __memTotal,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 46, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}activeCmdhPolicy uses Python identifier activeCmdhPolicy
    __activeCmdhPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'activeCmdhPolicy'), 'activeCmdhPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsactiveCmdhPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 33, 4), )

    
    activeCmdhPolicy = property(__activeCmdhPolicy.value, __activeCmdhPolicy.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}areaNwkDeviceInfo uses Python identifier areaNwkDeviceInfo
    __areaNwkDeviceInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfo'), 'areaNwkDeviceInfo', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsareaNwkDeviceInfo', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 32, 1), )

    
    areaNwkDeviceInfo = property(__areaNwkDeviceInfo.value, __areaNwkDeviceInfo.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}areaNwkInfo uses Python identifier areaNwkInfo
    __areaNwkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfo'), 'areaNwkInfo', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsareaNwkInfo', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 32, 1), )

    
    areaNwkInfo = property(__areaNwkInfo.value, __areaNwkInfo.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}battery uses Python identifier battery
    __battery = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'battery'), 'battery', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsbattery', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 33, 1), )

    
    battery = property(__battery.value, __battery.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}cmdhPolicy uses Python identifier cmdhPolicy
    __cmdhPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'cmdhPolicy'), 'cmdhPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolscmdhPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 33, 4), )

    
    cmdhPolicy = property(__cmdhPolicy.value, __cmdhPolicy.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}deviceCapability uses Python identifier deviceCapability
    __deviceCapability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceCapability'), 'deviceCapability', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsdeviceCapability', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 33, 1), )

    
    deviceCapability = property(__deviceCapability.value, __deviceCapability.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}deviceInfo uses Python identifier deviceInfo
    __deviceInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceInfo'), 'deviceInfo', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsdeviceInfo', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 33, 1), )

    
    deviceInfo = property(__deviceInfo.value, __deviceInfo.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}eventLog uses Python identifier eventLog
    __eventLog = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'eventLog'), 'eventLog', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolseventLog', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 33, 1), )

    
    eventLog = property(__eventLog.value, __eventLog.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}firmware uses Python identifier firmware
    __firmware = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'firmware'), 'firmware', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsfirmware', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 33, 1), )

    
    firmware = property(__firmware.value, __firmware.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}memory uses Python identifier memory
    __memory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'memory'), 'memory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsmemory', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 33, 1), )

    
    memory = property(__memory.value, __memory.set, None, None)

    
    # Element nodeID uses Python identifier nodeID
    __nodeID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeID'), 'nodeID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_nodeID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 52, 6), )

    
    nodeID = property(__nodeID.value, __nodeID.set, None, None)

    
    # Element hostedCSELink uses Python identifier hostedCSELink
    __hostedCSELink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hostedCSELink'), 'hostedCSELink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_hostedCSELink', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 53, 6), )

    
    hostedCSELink = property(__hostedCSELink.value, __hostedCSELink.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 57, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}reboot uses Python identifier reboot
    __reboot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'reboot'), 'reboot', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolsreboot', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 33, 1), )

    
    reboot = property(__reboot.value, __reboot.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}software uses Python identifier software
    __software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'software'), 'software', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolssoftware', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 33, 1), )

    
    software = property(__software.value, __software.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_43_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __activeCmdhPolicy.name() : __activeCmdhPolicy,
        __areaNwkDeviceInfo.name() : __areaNwkDeviceInfo,
        __areaNwkInfo.name() : __areaNwkInfo,
        __battery.name() : __battery,
        __cmdhPolicy.name() : __cmdhPolicy,
        __deviceCapability.name() : __deviceCapability,
        __deviceInfo.name() : __deviceInfo,
        __eventLog.name() : __eventLog,
        __firmware.name() : __firmware,
        __memory.name() : __memory,
        __nodeID.name() : __nodeID,
        __hostedCSELink.name() : __hostedCSELink,
        __childResource.name() : __childResource,
        __reboot.name() : __reboot,
        __software.name() : __software,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 81, 8)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}areaNwkDeviceInfoAnnc uses Python identifier areaNwkDeviceInfoAnnc
    __areaNwkDeviceInfoAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfoAnnc'), 'areaNwkDeviceInfoAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsareaNwkDeviceInfoAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 58, 1), )

    
    areaNwkDeviceInfoAnnc = property(__areaNwkDeviceInfoAnnc.value, __areaNwkDeviceInfoAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}areaNwkInfoAnnc uses Python identifier areaNwkInfoAnnc
    __areaNwkInfoAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfoAnnc'), 'areaNwkInfoAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsareaNwkInfoAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 53, 1), )

    
    areaNwkInfoAnnc = property(__areaNwkInfoAnnc.value, __areaNwkInfoAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}batteryAnnc uses Python identifier batteryAnnc
    __batteryAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'batteryAnnc'), 'batteryAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsbatteryAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 54, 1), )

    
    batteryAnnc = property(__batteryAnnc.value, __batteryAnnc.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}deviceCapabilityAnnc uses Python identifier deviceCapabilityAnnc
    __deviceCapabilityAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceCapabilityAnnc'), 'deviceCapabilityAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsdeviceCapabilityAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 58, 1), )

    
    deviceCapabilityAnnc = property(__deviceCapabilityAnnc.value, __deviceCapabilityAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}deviceInfoAnnc uses Python identifier deviceInfoAnnc
    __deviceInfoAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'deviceInfoAnnc'), 'deviceInfoAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsdeviceInfoAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 59, 1), )

    
    deviceInfoAnnc = property(__deviceInfoAnnc.value, __deviceInfoAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}eventLogAnnc uses Python identifier eventLogAnnc
    __eventLogAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'eventLogAnnc'), 'eventLogAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolseventLogAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 57, 1), )

    
    eventLogAnnc = property(__eventLogAnnc.value, __eventLogAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}firmwareAnnc uses Python identifier firmwareAnnc
    __firmwareAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'firmwareAnnc'), 'firmwareAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsfirmwareAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 57, 1), )

    
    firmwareAnnc = property(__firmwareAnnc.value, __firmwareAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}memoryAnnc uses Python identifier memoryAnnc
    __memoryAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'memoryAnnc'), 'memoryAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsmemoryAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 54, 1), )

    
    memoryAnnc = property(__memoryAnnc.value, __memoryAnnc.set, None, None)

    
    # Element nodeID uses Python identifier nodeID
    __nodeID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeID'), 'nodeID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_nodeID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 87, 24), )

    
    nodeID = property(__nodeID.value, __nodeID.set, None, None)

    
    # Element hostedCSELink uses Python identifier hostedCSELink
    __hostedCSELink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hostedCSELink'), 'hostedCSELink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_hostedCSELink', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 88, 24), )

    
    hostedCSELink = property(__hostedCSELink.value, __hostedCSELink.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 92, 28), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}rebootAnnc uses Python identifier rebootAnnc
    __rebootAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'rebootAnnc'), 'rebootAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolsrebootAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 54, 1), )

    
    rebootAnnc = property(__rebootAnnc.value, __rebootAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}softwareAnnc uses Python identifier softwareAnnc
    __softwareAnnc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'softwareAnnc'), 'softwareAnnc', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolssoftwareAnnc', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 61, 1), )

    
    softwareAnnc = property(__softwareAnnc.value, __softwareAnnc.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_44_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __areaNwkDeviceInfoAnnc.name() : __areaNwkDeviceInfoAnnc,
        __areaNwkInfoAnnc.name() : __areaNwkInfoAnnc,
        __batteryAnnc.name() : __batteryAnnc,
        __deviceCapabilityAnnc.name() : __deviceCapabilityAnnc,
        __deviceInfoAnnc.name() : __deviceInfoAnnc,
        __eventLogAnnc.name() : __eventLogAnnc,
        __firmwareAnnc.name() : __firmwareAnnc,
        __memoryAnnc.name() : __memoryAnnc,
        __nodeID.name() : __nodeID,
        __hostedCSELink.name() : __hostedCSELink,
        __childResource.name() : __childResource,
        __rebootAnnc.name() : __rebootAnnc,
        __softwareAnnc.name() : __softwareAnnc,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 55, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element reboot uses Python identifier reboot
    __reboot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'reboot'), 'reboot', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_45_reboot', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 61, 6), )

    
    reboot = property(__reboot.value, __reboot.set, None, None)

    
    # Element factoryReset uses Python identifier factoryReset
    __factoryReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'factoryReset'), 'factoryReset', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_45_factoryReset', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 62, 6), )

    
    factoryReset = property(__factoryReset.value, __factoryReset.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_45_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 66, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_45_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __reboot.name() : __reboot,
        __factoryReset.name() : __factoryReset,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (announceableResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 40, 2)
    _ElementMap = announceableResource._ElementMap.copy()
    _AttributeMap = announceableResource._AttributeMap.copy()
    # Base type is announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}accessControlPolicy uses Python identifier accessControlPolicy
    __accessControlPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), 'accessControlPolicy', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolsaccessControlPolicy', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1), )

    
    accessControlPolicy = property(__accessControlPolicy.value, __accessControlPolicy.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element {http://www.onem2m.org/xml/protocols}container uses Python identifier container
    __container = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'container'), 'container', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolscontainer', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1), )

    
    container = property(__container.value, __container.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolsgroup', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1), )

    
    group = property(__group.value, __group.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}pollingChannel uses Python identifier pollingChannel
    __pollingChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), 'pollingChannel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolspollingChannel', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1), )

    
    pollingChannel = property(__pollingChannel.value, __pollingChannel.set, None, None)

    
    # Element cseType uses Python identifier cseType
    __cseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cseType'), 'cseType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_cseType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 46, 6), )

    
    cseType = property(__cseType.value, __cseType.set, None, None)

    
    # Element pointOfAccess uses Python identifier pointOfAccess
    __pointOfAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), 'pointOfAccess', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_pointOfAccess', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 47, 6), )

    
    pointOfAccess = property(__pointOfAccess.value, __pointOfAccess.set, None, None)

    
    # Element CSEBase uses Python identifier CSEBase
    __CSEBase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSEBase'), 'CSEBase', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_CSEBase', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 48, 6), )

    
    CSEBase = property(__CSEBase.value, __CSEBase.set, None, None)

    
    # Element CSE-ID uses Python identifier CSE_ID
    __CSE_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'CSE-ID'), 'CSE_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_CSE_ID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 49, 6), )

    
    CSE_ID = property(__CSE_ID.value, __CSE_ID.set, None, None)

    
    # Element M2M-Ext-ID uses Python identifier M2M_Ext_ID
    __M2M_Ext_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'M2M-Ext-ID'), 'M2M_Ext_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_M2M_Ext_ID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 50, 6), )

    
    M2M_Ext_ID = property(__M2M_Ext_ID.value, __M2M_Ext_ID.set, None, None)

    
    # Element Trigger-Recipient-ID uses Python identifier Trigger_Recipient_ID
    __Trigger_Recipient_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'Trigger-Recipient-ID'), 'Trigger_Recipient_ID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_Trigger_Recipient_ID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 51, 6), )

    
    Trigger_Recipient_ID = property(__Trigger_Recipient_ID.value, __Trigger_Recipient_ID.set, None, None)

    
    # Element requestReachability uses Python identifier requestReachability
    __requestReachability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestReachability'), 'requestReachability', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_requestReachability', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 52, 6), )

    
    requestReachability = property(__requestReachability.value, __requestReachability.set, None, None)

    
    # Element nodeLink uses Python identifier nodeLink
    __nodeLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'nodeLink'), 'nodeLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_nodeLink', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 53, 6), )

    
    nodeLink = property(__nodeLink.value, __nodeLink.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 57, 28), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}schedule uses Python identifier schedule
    __schedule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'schedule'), 'schedule', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolsschedule', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1), )

    
    schedule = property(__schedule.value, __schedule.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_46_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __accessControlPolicy.name() : __accessControlPolicy,
        __container.name() : __container,
        __group.name() : __group,
        __pollingChannel.name() : __pollingChannel,
        __cseType.name() : __cseType,
        __pointOfAccess.name() : __pointOfAccess,
        __CSEBase.name() : __CSEBase,
        __CSE_ID.name() : __CSE_ID,
        __M2M_Ext_ID.name() : __M2M_Ext_ID,
        __Trigger_Recipient_ID.name() : __Trigger_Recipient_ID,
        __requestReachability.name() : __requestReachability,
        __nodeLink.name() : __nodeLink,
        __childResource.name() : __childResource,
        __schedule.name() : __schedule,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (announcedMgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 62, 2)
    _ElementMap = announcedMgmtResource._ElementMap.copy()
    _AttributeMap = announcedMgmtResource._AttributeMap.copy()
    # Base type is announcedMgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element link (link) inherited from {http://www.onem2m.org/xml/protocols}announcedResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}announcedMgmtResource
    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 68, 6), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element softwareName uses Python identifier softwareName
    __softwareName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'softwareName'), 'softwareName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_softwareName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 69, 6), )

    
    softwareName = property(__softwareName.value, __softwareName.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 70, 6), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element install uses Python identifier install
    __install = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'install'), 'install', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_install', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 71, 6), )

    
    install = property(__install.value, __install.set, None, None)

    
    # Element uninstall uses Python identifier uninstall
    __uninstall = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'uninstall'), 'uninstall', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_uninstall', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 72, 6), )

    
    uninstall = property(__uninstall.value, __uninstall.set, None, None)

    
    # Element installStatus uses Python identifier installStatus
    __installStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'installStatus'), 'installStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_installStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 73, 6), )

    
    installStatus = property(__installStatus.value, __installStatus.set, None, None)

    
    # Element activate uses Python identifier activate
    __activate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'activate'), 'activate', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_activate', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 74, 6), )

    
    activate = property(__activate.value, __activate.set, None, None)

    
    # Element deactivate uses Python identifier deactivate
    __deactivate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deactivate'), 'deactivate', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_deactivate', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 75, 6), )

    
    deactivate = property(__deactivate.value, __deactivate.set, None, None)

    
    # Element activeStatus uses Python identifier activeStatus
    __activeStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'activeStatus'), 'activeStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_activeStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 76, 6), )

    
    activeStatus = property(__activeStatus.value, __activeStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 80, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_47_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __version.name() : __version,
        __softwareName.name() : __softwareName,
        __URL.name() : __URL,
        __install.name() : __install,
        __uninstall.name() : __uninstall,
        __installStatus.name() : __installStatus,
        __activate.name() : __activate,
        __deactivate.name() : __deactivate,
        __activeStatus.name() : __activeStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 34, 6)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element activeCmdhPolicyLink uses Python identifier activeCmdhPolicyLink
    __activeCmdhPolicyLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'activeCmdhPolicyLink'), 'activeCmdhPolicyLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_48_activeCmdhPolicyLink', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 40, 13), )

    
    activeCmdhPolicyLink = property(__activeCmdhPolicyLink.value, __activeCmdhPolicyLink.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __activeCmdhPolicyLink.name() : __activeCmdhPolicyLink
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 33, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element devID uses Python identifier devID
    __devID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devID'), 'devID', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_devID', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 39, 6), )

    
    devID = property(__devID.value, __devID.set, None, None)

    
    # Element devType uses Python identifier devType
    __devType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devType'), 'devType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_devType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 40, 6), )

    
    devType = property(__devType.value, __devType.set, None, None)

    
    # Element areaNwkId uses Python identifier areaNwkId
    __areaNwkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'areaNwkId'), 'areaNwkId', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_areaNwkId', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 41, 6), )

    
    areaNwkId = property(__areaNwkId.value, __areaNwkId.set, None, None)

    
    # Element sleepInterval uses Python identifier sleepInterval
    __sleepInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sleepInterval'), 'sleepInterval', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_sleepInterval', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 42, 6), )

    
    sleepInterval = property(__sleepInterval.value, __sleepInterval.set, None, None)

    
    # Element sleepDuration uses Python identifier sleepDuration
    __sleepDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'sleepDuration'), 'sleepDuration', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_sleepDuration', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 43, 6), )

    
    sleepDuration = property(__sleepDuration.value, __sleepDuration.set, None, None)

    
    # Element devStatus uses Python identifier devStatus
    __devStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'devStatus'), 'devStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_devStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 44, 6), )

    
    devStatus = property(__devStatus.value, __devStatus.set, None, None)

    
    # Element listOfNeighbors uses Python identifier listOfNeighbors
    __listOfNeighbors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'listOfNeighbors'), 'listOfNeighbors', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_listOfNeighbors', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 45, 6), )

    
    listOfNeighbors = property(__listOfNeighbors.value, __listOfNeighbors.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 49, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_49_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __devID.name() : __devID,
        __devType.name() : __devType,
        __areaNwkId.name() : __areaNwkId,
        __sleepInterval.name() : __sleepInterval,
        __sleepDuration.name() : __sleepDuration,
        __devStatus.name() : __devStatus,
        __listOfNeighbors.name() : __listOfNeighbors,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 33, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element areaNwkType uses Python identifier areaNwkType
    __areaNwkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'areaNwkType'), 'areaNwkType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_50_areaNwkType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 39, 6), )

    
    areaNwkType = property(__areaNwkType.value, __areaNwkType.set, None, None)

    
    # Element listOfDevices uses Python identifier listOfDevices
    __listOfDevices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'listOfDevices'), 'listOfDevices', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_50_listOfDevices', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 40, 6), )

    
    listOfDevices = property(__listOfDevices.value, __listOfDevices.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_50_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 44, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_50_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __areaNwkType.name() : __areaNwkType,
        __listOfDevices.name() : __listOfDevices,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element batteryLevel uses Python identifier batteryLevel
    __batteryLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'batteryLevel'), 'batteryLevel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_51_batteryLevel', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 40, 6), )

    
    batteryLevel = property(__batteryLevel.value, __batteryLevel.set, None, None)

    
    # Element batteryStatus uses Python identifier batteryStatus
    __batteryStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'batteryStatus'), 'batteryStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_51_batteryStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 41, 6), )

    
    batteryStatus = property(__batteryStatus.value, __batteryStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_51_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 45, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_51_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __batteryLevel.name() : __batteryLevel,
        __batteryStatus.name() : __batteryStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element applicableEventCategory uses Python identifier applicableEventCategory
    __applicableEventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'applicableEventCategory'), 'applicableEventCategory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_52_applicableEventCategory', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 40, 12), )

    
    applicableEventCategory = property(__applicableEventCategory.value, __applicableEventCategory.set, None, None)

    
    # Element maxBufferSize uses Python identifier maxBufferSize
    __maxBufferSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'maxBufferSize'), 'maxBufferSize', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_52_maxBufferSize', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 41, 12), )

    
    maxBufferSize = property(__maxBufferSize.value, __maxBufferSize.set, None, None)

    
    # Element storagePriority uses Python identifier storagePriority
    __storagePriority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'storagePriority'), 'storagePriority', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_52_storagePriority', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 42, 12), )

    
    storagePriority = property(__storagePriority.value, __storagePriority.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __applicableEventCategory.name() : __applicableEventCategory,
        __maxBufferSize.name() : __maxBufferSize,
        __storagePriority.name() : __storagePriority
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element order uses Python identifier order
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'order'), 'order', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_order', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 40, 12), )

    
    order = property(__order.value, __order.set, None, None)

    
    # Element defEcValue uses Python identifier defEcValue
    __defEcValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defEcValue'), 'defEcValue', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_defEcValue', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 41, 12), )

    
    defEcValue = property(__defEcValue.value, __defEcValue.set, None, None)

    
    # Element requestOrigin uses Python identifier requestOrigin
    __requestOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestOrigin'), 'requestOrigin', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_requestOrigin', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 42, 12), )

    
    requestOrigin = property(__requestOrigin.value, __requestOrigin.set, None, None)

    
    # Element requestContext uses Python identifier requestContext
    __requestContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestContext'), 'requestContext', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_requestContext', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 43, 12), )

    
    requestContext = property(__requestContext.value, __requestContext.set, None, None)

    
    # Element requestContextNotification uses Python identifier requestContextNotification
    __requestContextNotification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestContextNotification'), 'requestContextNotification', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_requestContextNotification', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 44, 12), )

    
    requestContextNotification = property(__requestContextNotification.value, __requestContextNotification.set, None, None)

    
    # Element requestCharacteristics uses Python identifier requestCharacteristics
    __requestCharacteristics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestCharacteristics'), 'requestCharacteristics', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_53_requestCharacteristics', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 45, 12), )

    
    requestCharacteristics = property(__requestCharacteristics.value, __requestCharacteristics.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __order.name() : __order,
        __defEcValue.name() : __defEcValue,
        __requestOrigin.name() : __requestOrigin,
        __requestContext.name() : __requestContext,
        __requestContextNotification.name() : __requestContextNotification,
        __requestCharacteristics.name() : __requestCharacteristics
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 34, 6)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element mgmtLink uses Python identifier mgmtLink
    __mgmtLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtLink'), 'mgmtLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_54_mgmtLink', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 46, 14), )

    
    mgmtLink = property(__mgmtLink.value, __mgmtLink.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __mgmtLink.name() : __mgmtLink
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element applicableEventCategory uses Python identifier applicableEventCategory
    __applicableEventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'applicableEventCategory'), 'applicableEventCategory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_applicableEventCategory', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 40, 12), )

    
    applicableEventCategory = property(__applicableEventCategory.value, __applicableEventCategory.set, None, None)

    
    # Element defaultRequestExpTime uses Python identifier defaultRequestExpTime
    __defaultRequestExpTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaultRequestExpTime'), 'defaultRequestExpTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_defaultRequestExpTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 41, 12), )

    
    defaultRequestExpTime = property(__defaultRequestExpTime.value, __defaultRequestExpTime.set, None, None)

    
    # Element defaultResultExpTime uses Python identifier defaultResultExpTime
    __defaultResultExpTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaultResultExpTime'), 'defaultResultExpTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_defaultResultExpTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 42, 12), )

    
    defaultResultExpTime = property(__defaultResultExpTime.value, __defaultResultExpTime.set, None, None)

    
    # Element defaultOpExecTime uses Python identifier defaultOpExecTime
    __defaultOpExecTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaultOpExecTime'), 'defaultOpExecTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_defaultOpExecTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 43, 12), )

    
    defaultOpExecTime = property(__defaultOpExecTime.value, __defaultOpExecTime.set, None, None)

    
    # Element defaultRespPersistence uses Python identifier defaultRespPersistence
    __defaultRespPersistence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaultRespPersistence'), 'defaultRespPersistence', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_defaultRespPersistence', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 44, 12), )

    
    defaultRespPersistence = property(__defaultRespPersistence.value, __defaultRespPersistence.set, None, None)

    
    # Element defaultDelAggregation uses Python identifier defaultDelAggregation
    __defaultDelAggregation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'defaultDelAggregation'), 'defaultDelAggregation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_55_defaultDelAggregation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 45, 12), )

    
    defaultDelAggregation = property(__defaultDelAggregation.value, __defaultDelAggregation.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __applicableEventCategory.name() : __applicableEventCategory,
        __defaultRequestExpTime.name() : __defaultRequestExpTime,
        __defaultResultExpTime.name() : __defaultResultExpTime,
        __defaultOpExecTime.name() : __defaultOpExecTime,
        __defaultRespPersistence.name() : __defaultRespPersistence,
        __defaultDelAggregation.name() : __defaultDelAggregation
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element order uses Python identifier order
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'order'), 'order', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_order', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 41, 12), )

    
    order = property(__order.value, __order.set, None, None)

    
    # Element requestOrigin uses Python identifier requestOrigin
    __requestOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestOrigin'), 'requestOrigin', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_requestOrigin', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 42, 12), )

    
    requestOrigin = property(__requestOrigin.value, __requestOrigin.set, None, None)

    
    # Element requestContext uses Python identifier requestContext
    __requestContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestContext'), 'requestContext', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_requestContext', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 43, 12), )

    
    requestContext = property(__requestContext.value, __requestContext.set, None, None)

    
    # Element requestContextNotification uses Python identifier requestContextNotification
    __requestContextNotification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestContextNotification'), 'requestContextNotification', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_requestContextNotification', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 44, 12), )

    
    requestContextNotification = property(__requestContextNotification.value, __requestContextNotification.set, None, None)

    
    # Element requestCharacteristics uses Python identifier requestCharacteristics
    __requestCharacteristics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'requestCharacteristics'), 'requestCharacteristics', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_requestCharacteristics', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 45, 12), )

    
    requestCharacteristics = property(__requestCharacteristics.value, __requestCharacteristics.set, None, None)

    
    # Element limitsEventCategory uses Python identifier limitsEventCategory
    __limitsEventCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsEventCategory'), 'limitsEventCategory', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsEventCategory', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 46, 12), )

    
    limitsEventCategory = property(__limitsEventCategory.value, __limitsEventCategory.set, None, None)

    
    # Element limitsRequestExpTime uses Python identifier limitsRequestExpTime
    __limitsRequestExpTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsRequestExpTime'), 'limitsRequestExpTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsRequestExpTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 47, 12), )

    
    limitsRequestExpTime = property(__limitsRequestExpTime.value, __limitsRequestExpTime.set, None, None)

    
    # Element limitsResultExpTime uses Python identifier limitsResultExpTime
    __limitsResultExpTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsResultExpTime'), 'limitsResultExpTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsResultExpTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 48, 12), )

    
    limitsResultExpTime = property(__limitsResultExpTime.value, __limitsResultExpTime.set, None, None)

    
    # Element limitsOpExecTime uses Python identifier limitsOpExecTime
    __limitsOpExecTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsOpExecTime'), 'limitsOpExecTime', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsOpExecTime', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 49, 12), )

    
    limitsOpExecTime = property(__limitsOpExecTime.value, __limitsOpExecTime.set, None, None)

    
    # Element limitsRespPersistence uses Python identifier limitsRespPersistence
    __limitsRespPersistence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsRespPersistence'), 'limitsRespPersistence', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsRespPersistence', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 50, 12), )

    
    limitsRespPersistence = property(__limitsRespPersistence.value, __limitsRespPersistence.set, None, None)

    
    # Element limitsDelAggregation uses Python identifier limitsDelAggregation
    __limitsDelAggregation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'limitsDelAggregation'), 'limitsDelAggregation', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_56_limitsDelAggregation', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 51, 12), )

    
    limitsDelAggregation = property(__limitsDelAggregation.value, __limitsDelAggregation.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __order.name() : __order,
        __requestOrigin.name() : __requestOrigin,
        __requestContext.name() : __requestContext,
        __requestContextNotification.name() : __requestContextNotification,
        __requestCharacteristics.name() : __requestCharacteristics,
        __limitsEventCategory.name() : __limitsEventCategory,
        __limitsRequestExpTime.name() : __limitsRequestExpTime,
        __limitsResultExpTime.name() : __limitsResultExpTime,
        __limitsOpExecTime.name() : __limitsOpExecTime,
        __limitsRespPersistence.name() : __limitsRespPersistence,
        __limitsDelAggregation.name() : __limitsDelAggregation
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element applicableEventCategories uses Python identifier applicableEventCategories
    __applicableEventCategories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'applicableEventCategories'), 'applicableEventCategories', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_57_applicableEventCategories', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 41, 13), )

    
    applicableEventCategories = property(__applicableEventCategories.value, __applicableEventCategories.set, None, None)

    
    # Element mgmtLink uses Python identifier mgmtLink
    __mgmtLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtLink'), 'mgmtLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_57_mgmtLink', True, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 45, 12), )

    
    mgmtLink = property(__mgmtLink.value, __mgmtLink.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __applicableEventCategories.name() : __applicableEventCategories,
        __mgmtLink.name() : __mgmtLink
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 34, 4)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element targetNetwork uses Python identifier targetNetwork
    __targetNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'targetNetwork'), 'targetNetwork', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_58_targetNetwork', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 40, 12), )

    
    targetNetwork = property(__targetNetwork.value, __targetNetwork.set, None, None)

    
    # Element minReqVolume uses Python identifier minReqVolume
    __minReqVolume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'minReqVolume'), 'minReqVolume', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_58_minReqVolume', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 41, 12), )

    
    minReqVolume = property(__minReqVolume.value, __minReqVolume.set, None, None)

    
    # Element backOffParameters uses Python identifier backOffParameters
    __backOffParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'backOffParameters'), 'backOffParameters', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_58_backOffParameters', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 42, 12), )

    
    backOffParameters = property(__backOffParameters.value, __backOffParameters.set, None, None)

    
    # Element otherConditions uses Python identifier otherConditions
    __otherConditions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'otherConditions'), 'otherConditions', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_58_otherConditions', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 43, 12), )

    
    otherConditions = property(__otherConditions.value, __otherConditions.set, None, None)

    
    # Element mgmtLink uses Python identifier mgmtLink
    __mgmtLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtLink'), 'mgmtLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_58_mgmtLink', False, pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 48, 12), )

    
    mgmtLink = property(__mgmtLink.value, __mgmtLink.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __targetNetwork.name() : __targetNetwork,
        __minReqVolume.name() : __minReqVolume,
        __backOffParameters.name() : __backOffParameters,
        __otherConditions.name() : __otherConditions,
        __mgmtLink.name() : __mgmtLink
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 34, 6)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element cmdhPolicyName uses Python identifier cmdhPolicyName
    __cmdhPolicyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'cmdhPolicyName'), 'cmdhPolicyName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_59_cmdhPolicyName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 40, 14), )

    
    cmdhPolicyName = property(__cmdhPolicyName.value, __cmdhPolicyName.set, None, None)

    
    # Element mgmtLink uses Python identifier mgmtLink
    __mgmtLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'mgmtLink'), 'mgmtLink', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_59_mgmtLink', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 47, 11), )

    
    mgmtLink = property(__mgmtLink.value, __mgmtLink.set, None, None)

    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __cmdhPolicyName.name() : __cmdhPolicyName,
        __mgmtLink.name() : __mgmtLink
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element capabilityName uses Python identifier capabilityName
    __capabilityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'capabilityName'), 'capabilityName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_capabilityName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 40, 6), )

    
    capabilityName = property(__capabilityName.value, __capabilityName.set, None, None)

    
    # Element attached uses Python identifier attached
    __attached = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'attached'), 'attached', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_attached', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 41, 6), )

    
    attached = property(__attached.value, __attached.set, None, None)

    
    # Element capabilityActionStatus uses Python identifier capabilityActionStatus
    __capabilityActionStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus'), 'capabilityActionStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_capabilityActionStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 42, 6), )

    
    capabilityActionStatus = property(__capabilityActionStatus.value, __capabilityActionStatus.set, None, None)

    
    # Element currentState uses Python identifier currentState
    __currentState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'currentState'), 'currentState', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_currentState', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 43, 6), )

    
    currentState = property(__currentState.value, __currentState.set, None, None)

    
    # Element enable uses Python identifier enable
    __enable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'enable'), 'enable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_enable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 44, 6), )

    
    enable = property(__enable.value, __enable.set, None, None)

    
    # Element disable uses Python identifier disable
    __disable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'disable'), 'disable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_disable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 45, 6), )

    
    disable = property(__disable.value, __disable.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 49, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_60_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __capabilityName.name() : __capabilityName,
        __attached.name() : __attached,
        __capabilityActionStatus.name() : __capabilityActionStatus,
        __currentState.name() : __currentState,
        __enable.name() : __enable,
        __disable.name() : __disable,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element deviceLabel uses Python identifier deviceLabel
    __deviceLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deviceLabel'), 'deviceLabel', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_deviceLabel', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 40, 6), )

    
    deviceLabel = property(__deviceLabel.value, __deviceLabel.set, None, None)

    
    # Element manufacturer uses Python identifier manufacturer
    __manufacturer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'manufacturer'), 'manufacturer', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_manufacturer', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 41, 6), )

    
    manufacturer = property(__manufacturer.value, __manufacturer.set, None, None)

    
    # Element model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'model'), 'model', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_model', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 42, 6), )

    
    model = property(__model.value, __model.set, None, None)

    
    # Element deviceType uses Python identifier deviceType
    __deviceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deviceType'), 'deviceType', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_deviceType', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 43, 6), )

    
    deviceType = property(__deviceType.value, __deviceType.set, None, None)

    
    # Element fwVersion uses Python identifier fwVersion
    __fwVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'fwVersion'), 'fwVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_fwVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 44, 6), )

    
    fwVersion = property(__fwVersion.value, __fwVersion.set, None, None)

    
    # Element swVersion uses Python identifier swVersion
    __swVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'swVersion'), 'swVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_swVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 45, 6), )

    
    swVersion = property(__swVersion.value, __swVersion.set, None, None)

    
    # Element hwVersion uses Python identifier hwVersion
    __hwVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'hwVersion'), 'hwVersion', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_hwVersion', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 46, 6), )

    
    hwVersion = property(__hwVersion.value, __hwVersion.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 50, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_61_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __deviceLabel.name() : __deviceLabel,
        __manufacturer.name() : __manufacturer,
        __model.name() : __model,
        __deviceType.name() : __deviceType,
        __fwVersion.name() : __fwVersion,
        __swVersion.name() : __swVersion,
        __hwVersion.name() : __hwVersion,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element logTypeId uses Python identifier logTypeId
    __logTypeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logTypeId'), 'logTypeId', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_logTypeId', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 40, 6), )

    
    logTypeId = property(__logTypeId.value, __logTypeId.set, None, None)

    
    # Element logData uses Python identifier logData
    __logData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logData'), 'logData', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_logData', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 41, 6), )

    
    logData = property(__logData.value, __logData.set, None, None)

    
    # Element logStatus uses Python identifier logStatus
    __logStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStatus'), 'logStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_logStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 42, 6), )

    
    logStatus = property(__logStatus.value, __logStatus.set, None, None)

    
    # Element logStart uses Python identifier logStart
    __logStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStart'), 'logStart', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_logStart', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 43, 6), )

    
    logStart = property(__logStart.value, __logStart.set, None, None)

    
    # Element logStop uses Python identifier logStop
    __logStop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'logStop'), 'logStop', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_logStop', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 44, 6), )

    
    logStop = property(__logStop.value, __logStop.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 48, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_62_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __logTypeId.name() : __logTypeId,
        __logData.name() : __logData,
        __logStatus.name() : __logStatus,
        __logStart.name() : __logStart,
        __logStop.name() : __logStop,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 40, 6), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element firmwareName uses Python identifier firmwareName
    __firmwareName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'firmwareName'), 'firmwareName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_firmwareName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 41, 6), )

    
    firmwareName = property(__firmwareName.value, __firmwareName.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 42, 6), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element update uses Python identifier update
    __update = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'update'), 'update', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_update', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 43, 6), )

    
    update = property(__update.value, __update.set, None, None)

    
    # Element updateStatus uses Python identifier updateStatus
    __updateStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'updateStatus'), 'updateStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_updateStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 44, 6), )

    
    updateStatus = property(__updateStatus.value, __updateStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 48, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_63_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __version.name() : __version,
        __firmwareName.name() : __firmwareName,
        __URL.name() : __URL,
        __update.name() : __update,
        __updateStatus.name() : __updateStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element memAvailable uses Python identifier memAvailable
    __memAvailable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memAvailable'), 'memAvailable', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_64_memAvailable', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 40, 6), )

    
    memAvailable = property(__memAvailable.value, __memAvailable.set, None, None)

    
    # Element memTotal uses Python identifier memTotal
    __memTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'memTotal'), 'memTotal', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_64_memTotal', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 41, 6), )

    
    memTotal = property(__memTotal.value, __memTotal.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_64_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 45, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_64_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __memAvailable.name() : __memAvailable,
        __memTotal.name() : __memTotal,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element reboot uses Python identifier reboot
    __reboot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'reboot'), 'reboot', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_65_reboot', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 40, 6), )

    
    reboot = property(__reboot.value, __reboot.set, None, None)

    
    # Element factoryReset uses Python identifier factoryReset
    __factoryReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'factoryReset'), 'factoryReset', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_65_factoryReset', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 41, 6), )

    
    factoryReset = property(__factoryReset.value, __factoryReset.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_65_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 45, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_65_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __reboot.name() : __reboot,
        __factoryReset.name() : __factoryReset,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (mgmtResource):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 34, 2)
    _ElementMap = mgmtResource._ElementMap.copy()
    _AttributeMap = mgmtResource._AttributeMap.copy()
    # Base type is mgmtResource
    
    # Element resourceType (resourceType) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element resourceID (resourceID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element parentID (parentID) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element creationTime (creationTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element lastModifiedTime (lastModifiedTime) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element labels (labels) inherited from {http://www.onem2m.org/xml/protocols}resource
    
    # Element accessControlPolicyIDs (accessControlPolicyIDs) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element expirationTime (expirationTime) inherited from {http://www.onem2m.org/xml/protocols}regularResource
    
    # Element announceTo (announceTo) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element announcedAttribute (announcedAttribute) inherited from {http://www.onem2m.org/xml/protocols}announceableResource
    
    # Element mgmtDefinition (mgmtDefinition) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectIDs (objectIDs) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element objectPaths (objectPaths) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element description (description) inherited from {http://www.onem2m.org/xml/protocols}mgmtResource
    
    # Element version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_version', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 40, 6), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element softwareName uses Python identifier softwareName
    __softwareName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'softwareName'), 'softwareName', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_softwareName', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 41, 6), )

    
    softwareName = property(__softwareName.value, __softwareName.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'URL'), 'URL', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_URL', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 42, 6), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element install uses Python identifier install
    __install = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'install'), 'install', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_install', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 43, 6), )

    
    install = property(__install.value, __install.set, None, None)

    
    # Element uninstall uses Python identifier uninstall
    __uninstall = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'uninstall'), 'uninstall', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_uninstall', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 44, 6), )

    
    uninstall = property(__uninstall.value, __uninstall.set, None, None)

    
    # Element installStatus uses Python identifier installStatus
    __installStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'installStatus'), 'installStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_installStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 45, 6), )

    
    installStatus = property(__installStatus.value, __installStatus.set, None, None)

    
    # Element activate uses Python identifier activate
    __activate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'activate'), 'activate', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_activate', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 46, 6), )

    
    activate = property(__activate.value, __activate.set, None, None)

    
    # Element deactivate uses Python identifier deactivate
    __deactivate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'deactivate'), 'deactivate', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_deactivate', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 47, 6), )

    
    deactivate = property(__deactivate.value, __deactivate.set, None, None)

    
    # Element activeStatus uses Python identifier activeStatus
    __activeStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'activeStatus'), 'activeStatus', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_activeStatus', False, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 48, 6), )

    
    activeStatus = property(__activeStatus.value, __activeStatus.set, None, None)

    
    # Element childResource uses Python identifier childResource
    __childResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, u'childResource'), 'childResource', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_childResource', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 52, 7), )

    
    childResource = property(__childResource.value, __childResource.set, None, None)

    
    # Element {http://www.onem2m.org/xml/protocols}subscription uses Python identifier subscription
    __subscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'subscription'), 'subscription', '__httpwww_onem2m_orgxmlprotocols_CTD_ANON_66_httpwww_onem2m_orgxmlprotocolssubscription', True, pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1), )

    
    subscription = property(__subscription.value, __subscription.set, None, None)

    
    # Attribute resourceName inherited from {http://www.onem2m.org/xml/protocols}resource
    _ElementMap.update({
        __version.name() : __version,
        __softwareName.name() : __softwareName,
        __URL.name() : __URL,
        __install.name() : __install,
        __uninstall.name() : __uninstall,
        __installStatus.name() : __installStatus,
        __activate.name() : __activate,
        __deactivate.name() : __deactivate,
        __activeStatus.name() : __activeStatus,
        __childResource.name() : __childResource,
        __subscription.name() : __subscription
    })
    _AttributeMap.update({
        
    })



notification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'notification'), notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 31, 8))
Namespace.addCategoryObject('elementBinding', notification.name().localName(), notification)

aggregatedNotification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'aggregatedNotification'), aggregatedNotification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 33, 8))
Namespace.addCategoryObject('elementBinding', aggregatedNotification.name().localName(), aggregatedNotification)

requestPrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'requestPrimitive'), CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', requestPrimitive.name().localName(), requestPrimitive)

attributeList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'attributeList'), attributeList_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 80, 4))
Namespace.addCategoryObject('elementBinding', attributeList.name().localName(), attributeList)

responsePrimitive = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsePrimitive'), CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', responsePrimitive.name().localName(), responsePrimitive)

aggregatedResponse = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'aggregatedResponse'), aggregatedResponse_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 62, 2))
Namespace.addCategoryObject('elementBinding', aggregatedResponse.name().localName(), aggregatedResponse)

CSEBase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CSEBase'), CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 47, 1))
Namespace.addCategoryObject('elementBinding', CSEBase.name().localName(), CSEBase)

resource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'resource'), resourceWrapper, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 58, 2))
Namespace.addCategoryObject('elementBinding', resource.name().localName(), resource)

URIList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'URIList'), listOfURIs, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 60, 2))
Namespace.addCategoryObject('elementBinding', URIList.name().localName(), URIList)

AEAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AEAnnc'), CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 70, 1))
Namespace.addCategoryObject('elementBinding', AEAnnc.name().localName(), AEAnnc)

accessControlPolicy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', accessControlPolicy.name().localName(), accessControlPolicy)

accessControlPolicyAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc'), CTD_ANON_10, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 55, 1))
Namespace.addCategoryObject('elementBinding', accessControlPolicyAnnc.name().localName(), accessControlPolicyAnnc)

containerAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1))
Namespace.addCategoryObject('elementBinding', containerAnnc.name().localName(), containerAnnc)

contentInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'contentInstance'), CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', contentInstance.name().localName(), contentInstance)

contentInstanceAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'contentInstanceAnnc'), CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 51, 1))
Namespace.addCategoryObject('elementBinding', contentInstanceAnnc.name().localName(), contentInstanceAnnc)

delivery = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'delivery'), CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 34, 1))
Namespace.addCategoryObject('elementBinding', delivery.name().localName(), delivery)

eventConfig = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventConfig'), CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', eventConfig.name().localName(), eventConfig)

execInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'execInstance'), CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', execInstance.name().localName(), execInstance)

groupAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc'), CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 63, 1))
Namespace.addCategoryObject('elementBinding', groupAnnc.name().localName(), groupAnnc)

locationPolicyAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locationPolicyAnnc'), CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 61, 1))
Namespace.addCategoryObject('elementBinding', locationPolicyAnnc.name().localName(), locationPolicyAnnc)

m2mServiceSubscriptionProfile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm2mServiceSubscriptionProfile'), CTD_ANON_19, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', m2mServiceSubscriptionProfile.name().localName(), m2mServiceSubscriptionProfile)

mgmtCmd = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mgmtCmd'), CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', mgmtCmd.name().localName(), mgmtCmd)

pollingChannel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), CTD_ANON_21, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', pollingChannel.name().localName(), pollingChannel)

remoteCSEAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remoteCSEAnnc'), CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 73, 1))
Namespace.addCategoryObject('elementBinding', remoteCSEAnnc.name().localName(), remoteCSEAnnc)

request = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'request'), CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', request.name().localName(), request)

schedule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'schedule'), CTD_ANON_24, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', schedule.name().localName(), schedule)

scheduleAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc'), CTD_ANON_25, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', scheduleAnnc.name().localName(), scheduleAnnc)

serviceSubscribedAppRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedAppRule'), CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', serviceSubscribedAppRule.name().localName(), serviceSubscribedAppRule)

serviceSubscribedNode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedNode'), CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', serviceSubscribedNode.name().localName(), serviceSubscribedNode)

statsCollect = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'statsCollect'), CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', statsCollect.name().localName(), statsCollect)

statsConfig = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'statsConfig'), CTD_ANON_29, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', statsConfig.name().localName(), statsConfig)

subscription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', subscription.name().localName(), subscription)

AE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AE'), CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 37, 1))
Namespace.addCategoryObject('elementBinding', AE.name().localName(), AE)

areaNwkDeviceInfoAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfoAnnc'), CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 58, 1))
Namespace.addCategoryObject('elementBinding', areaNwkDeviceInfoAnnc.name().localName(), areaNwkDeviceInfoAnnc)

areaNwkInfoAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfoAnnc'), CTD_ANON_33, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 53, 1))
Namespace.addCategoryObject('elementBinding', areaNwkInfoAnnc.name().localName(), areaNwkInfoAnnc)

batteryAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batteryAnnc'), CTD_ANON_34, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', batteryAnnc.name().localName(), batteryAnnc)

container = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', container.name().localName(), container)

deviceCapabilityAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceCapabilityAnnc'), CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 58, 1))
Namespace.addCategoryObject('elementBinding', deviceCapabilityAnnc.name().localName(), deviceCapabilityAnnc)

deviceInfoAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceInfoAnnc'), CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 59, 1))
Namespace.addCategoryObject('elementBinding', deviceInfoAnnc.name().localName(), deviceInfoAnnc)

eventLogAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventLogAnnc'), CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 57, 1))
Namespace.addCategoryObject('elementBinding', eventLogAnnc.name().localName(), eventLogAnnc)

firmwareAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firmwareAnnc'), CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 57, 1))
Namespace.addCategoryObject('elementBinding', firmwareAnnc.name().localName(), firmwareAnnc)

group = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', group.name().localName(), group)

locationPolicy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locationPolicy'), CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', locationPolicy.name().localName(), locationPolicy)

memoryAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'memoryAnnc'), CTD_ANON_42, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', memoryAnnc.name().localName(), memoryAnnc)

node = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'node'), CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 45, 1))
Namespace.addCategoryObject('elementBinding', node.name().localName(), node)

nodeAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'nodeAnnc'), CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 80, 4))
Namespace.addCategoryObject('elementBinding', nodeAnnc.name().localName(), nodeAnnc)

rebootAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rebootAnnc'), CTD_ANON_45, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', rebootAnnc.name().localName(), rebootAnnc)

remoteCSE = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remoteCSE'), CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 39, 1))
Namespace.addCategoryObject('elementBinding', remoteCSE.name().localName(), remoteCSE)

softwareAnnc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'softwareAnnc'), CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 61, 1))
Namespace.addCategoryObject('elementBinding', softwareAnnc.name().localName(), softwareAnnc)

activeCmdhPolicy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activeCmdhPolicy'), CTD_ANON_48, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', activeCmdhPolicy.name().localName(), activeCmdhPolicy)

areaNwkDeviceInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfo'), CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', areaNwkDeviceInfo.name().localName(), areaNwkDeviceInfo)

areaNwkInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfo'), CTD_ANON_50, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', areaNwkInfo.name().localName(), areaNwkInfo)

battery = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'battery'), CTD_ANON_51, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', battery.name().localName(), battery)

cmdhBuffer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhBuffer'), CTD_ANON_52, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhBuffer.name().localName(), cmdhBuffer)

cmdhDefEcValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhDefEcValue'), CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhDefEcValue.name().localName(), cmdhDefEcValue)

cmdhDefaults = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhDefaults'), CTD_ANON_54, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', cmdhDefaults.name().localName(), cmdhDefaults)

cmdhEcDefParamValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhEcDefParamValues'), CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhEcDefParamValues.name().localName(), cmdhEcDefParamValues)

cmdhLimits = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhLimits'), CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhLimits.name().localName(), cmdhLimits)

cmdhNetworkAccessRules = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhNetworkAccessRules'), CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhNetworkAccessRules.name().localName(), cmdhNetworkAccessRules)

cmdhNwAccessRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhNwAccessRule'), CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 33, 2))
Namespace.addCategoryObject('elementBinding', cmdhNwAccessRule.name().localName(), cmdhNwAccessRule)

cmdhPolicy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhPolicy'), CTD_ANON_59, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', cmdhPolicy.name().localName(), cmdhPolicy)

deviceCapability = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceCapability'), CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', deviceCapability.name().localName(), deviceCapability)

deviceInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceInfo'), CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', deviceInfo.name().localName(), deviceInfo)

eventLog = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventLog'), CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', eventLog.name().localName(), eventLog)

firmware = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firmware'), CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', firmware.name().localName(), firmware)

memory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'memory'), CTD_ANON_64, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', memory.name().localName(), memory)

reboot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reboot'), CTD_ANON_65, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', reboot.name().localName(), reboot)

software = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'software'), CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', software.name().localName(), software)



setOfAcrs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlRule'), accessControlRule, scope=setOfAcrs, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 80, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 80, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(setOfAcrs._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlRule')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 80, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
setOfAcrs._Automaton = _BuildAutomaton()




accessControlRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlOriginators'), listOfURIs, scope=accessControlRule, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 87, 3)))

accessControlRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlOperations'), accessControlOperations, scope=accessControlRule, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 90, 3)))

accessControlRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlContexts'), CTD_ANON, scope=accessControlRule, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 92, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 92, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(accessControlRule._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlOriginators')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 87, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(accessControlRule._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlOperations')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 90, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(accessControlRule._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlContexts')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 92, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accessControlRule._Automaton = _BuildAutomaton_()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlWindow'), scheduleEntry, scope=CTD_ANON, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 95, 6)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlIpAddresses'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 96, 6)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlLocationRegion'), locationRegion, scope=CTD_ANON, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 124, 6)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 95, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 96, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 124, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlWindow')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 95, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlIpAddresses')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 96, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlLocationRegion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 124, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_2()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ipv4Addresses'), STD_ANON_27, scope=CTD_ANON_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 99, 9)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ipv6Addresses'), STD_ANON_28, scope=CTD_ANON_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 110, 9)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 99, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 110, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, u'ipv4Addresses')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 99, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, u'ipv6Addresses')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 110, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_3()




locationRegion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'countryCode'), STD_ANON_29, scope=locationRegion, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 133, 3)))

locationRegion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'circRegion'), STD_ANON_16, scope=locationRegion, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 144, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(locationRegion._UseForTag(pyxb.namespace.ExpandedName(None, u'countryCode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 133, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(locationRegion._UseForTag(pyxb.namespace.ExpandedName(None, u'circRegion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 144, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
locationRegion._Automaton = _BuildAutomaton_4()




deliveryMetaData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tracingOption'), pyxb.binding.datatypes.boolean, scope=deliveryMetaData, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 244, 4)))

deliveryMetaData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'tracingInfo'), listOfM2MID, scope=deliveryMetaData, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 245, 4)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 245, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(deliveryMetaData._UseForTag(pyxb.namespace.ExpandedName(None, u'tracingOption')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 244, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(deliveryMetaData._UseForTag(pyxb.namespace.ExpandedName(None, u'tracingInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 245, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
deliveryMetaData._Automaton = _BuildAutomaton_5()




aggregatedRequest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'request'), CTD_ANON_2, scope=aggregatedRequest, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 253, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(aggregatedRequest._UseForTag(pyxb.namespace.ExpandedName(None, u'request')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 253, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
aggregatedRequest._Automaton = _BuildAutomaton_6()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operation'), operation, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 256, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'to'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 257, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'from'), ID, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 258, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), requestID, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 259, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'primitiveContent'), primitiveContent, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 260, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metaInformation'), metaInformation, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 261, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 260, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 261, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'operation')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 256, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'to')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 257, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'from')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 258, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'requestIdentifier')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 259, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'primitiveContent')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 260, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, u'metaInformation')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 261, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_7()




metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resourceType'), resourceType, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 270, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'name'), pyxb.binding.datatypes.NCName, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 271, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), timestamp, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 272, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp'), absRelTimestamp, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 273, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), absRelTimestamp, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 274, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationExecutionTime'), absRelTimestamp, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 275, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'responseType'), responseTypeInfo, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 276, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultPersistence'), absRelTimestamp, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 277, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultContent'), resultContent, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 278, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventCategory'), eventCat, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 279, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deliveryAggregation'), pyxb.binding.datatypes.boolean, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 280, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier'), pyxb.binding.datatypes.string, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 281, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'filterCriteria'), filterCriteria, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 282, 3)))

metaInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'discoveryResultType'), discResType, scope=metaInformation, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 283, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 270, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 271, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 272, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 273, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 274, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 275, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 276, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 277, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 278, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 279, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 280, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 281, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 282, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 283, 3))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 270, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'name')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 271, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'originatingTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 272, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 273, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 274, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'operationExecutionTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 275, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'responseType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 276, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'resultPersistence')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 277, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'resultContent')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 278, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'eventCategory')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 279, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'deliveryAggregation')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 280, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 281, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'filterCriteria')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 282, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(metaInformation._UseForTag(pyxb.namespace.ExpandedName(None, u'discoveryResultType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 283, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
metaInformation._Automaton = _BuildAutomaton_8()




def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 289, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'http://www.onem2m.org/xml/protocols'])), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 289, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
primitiveContent._Automaton = _BuildAutomaton_9()




filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'createdBefore'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 297, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'createdAfter'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 298, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'modifiedSince'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 299, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'unmodifiedSince'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 300, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTagSmaller'), pyxb.binding.datatypes.positiveInteger, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 301, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTagBigger'), pyxb.binding.datatypes.nonNegativeInteger, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 302, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expireBefore'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 303, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expireAfter'), timestamp, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 304, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'labels'), labels, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 305, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resourceType'), resourceType, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 306, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sizeAbove'), pyxb.binding.datatypes.nonNegativeInteger, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 307, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sizeBelow'), pyxb.binding.datatypes.positiveInteger, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 308, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'contentType'), typeOfContent, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 309, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attribute'), attribute, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 310, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'filterUsage'), filterUsage, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 311, 3)))

filterCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limit'), pyxb.binding.datatypes.nonNegativeInteger, scope=filterCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 312, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 297, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 298, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 299, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 300, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 301, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 302, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 303, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 304, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 305, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 306, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 307, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 308, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 309, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 310, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 311, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 312, 3))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'createdBefore')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 297, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'createdAfter')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 298, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'modifiedSince')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 299, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'unmodifiedSince')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 300, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTagSmaller')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 301, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTagBigger')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 302, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'expireBefore')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 303, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'expireAfter')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 304, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 305, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 306, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'sizeAbove')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 307, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'sizeBelow')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 308, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'contentType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 309, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'attribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 310, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'filterUsage')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 311, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(filterCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'limit')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 312, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
filterCriteria._Automaton = _BuildAutomaton_10()




attribute._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'name'), pyxb.binding.datatypes.NCName, scope=attribute, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 318, 3)))

attribute._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'value'), pyxb.binding.datatypes.anyType, scope=attribute, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 319, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(attribute._UseForTag(pyxb.namespace.ExpandedName(None, u'name')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 318, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(attribute._UseForTag(pyxb.namespace.ExpandedName(None, u'value')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 319, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
attribute._Automaton = _BuildAutomaton_11()




attributeList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attribute'), attribute, scope=attributeList_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 325, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(attributeList_._UseForTag(pyxb.namespace.ExpandedName(None, u'attribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 325, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
attributeList_._Automaton = _BuildAutomaton_12()




scheduleEntries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scheduleEntry'), scheduleEntry, scope=scheduleEntries, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 331, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(scheduleEntries._UseForTag(pyxb.namespace.ExpandedName(None, u'scheduleEntry')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 331, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
scheduleEntries._Automaton = _BuildAutomaton_13()




actionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'action'), pyxb.binding.datatypes.anyURI, scope=actionStatus, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 340, 3)))

actionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'status'), status, scope=actionStatus, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 341, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 340, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 341, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(actionStatus._UseForTag(pyxb.namespace.ExpandedName(None, u'action')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 340, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(actionStatus._UseForTag(pyxb.namespace.ExpandedName(None, u'status')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 341, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
actionStatus._Automaton = _BuildAutomaton_14()




anyArgType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'name'), pyxb.binding.datatypes.NCName, scope=anyArgType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 347, 3)))

anyArgType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'value'), pyxb.binding.datatypes.anyType, scope=anyArgType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 348, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(anyArgType._UseForTag(pyxb.namespace.ExpandedName(None, u'name')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 347, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(anyArgType._UseForTag(pyxb.namespace.ExpandedName(None, u'value')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 348, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
anyArgType._Automaton = _BuildAutomaton_15()




resetArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=resetArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 354, 3)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 354, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(resetArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 354, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
resetArgsType._Automaton = _BuildAutomaton_16()




rebootArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=rebootArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 360, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 360, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(rebootArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 360, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
rebootArgsType._Automaton = _BuildAutomaton_17()




uploadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fileType'), pyxb.binding.datatypes.string, scope=uploadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 366, 3)))

uploadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=uploadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 367, 3)))

uploadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'username'), pyxb.binding.datatypes.string, scope=uploadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 368, 3)))

uploadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'password'), pyxb.binding.datatypes.string, scope=uploadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 369, 3)))

uploadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=uploadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 370, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 370, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(uploadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'fileType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 366, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(uploadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 367, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(uploadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'username')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 368, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(uploadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'password')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 369, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(uploadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 370, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
uploadArgsType._Automaton = _BuildAutomaton_18()




downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fileType'), pyxb.binding.datatypes.string, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 376, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 377, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'username'), pyxb.binding.datatypes.string, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 378, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'password'), pyxb.binding.datatypes.string, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 379, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'filesize'), pyxb.binding.datatypes.positiveInteger, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 380, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'targetFile'), pyxb.binding.datatypes.string, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 381, 12)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'delaySeconds'), pyxb.binding.datatypes.positiveInteger, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 382, 12)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'successURL'), pyxb.binding.datatypes.anyURI, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 383, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'startTime'), timestamp, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 384, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'completeTime'), timestamp, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 385, 3)))

downloadArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=downloadArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 386, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 386, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'fileType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 376, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 377, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'username')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 378, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'password')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 379, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'filesize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 380, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'targetFile')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 381, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'delaySeconds')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 382, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'successURL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 383, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'startTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 384, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'completeTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 385, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(downloadArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 386, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
downloadArgsType._Automaton = _BuildAutomaton_19()




softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 392, 3)))

softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'UUID'), pyxb.binding.datatypes.string, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 393, 3)))

softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'username'), pyxb.binding.datatypes.string, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 394, 3)))

softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'password'), pyxb.binding.datatypes.string, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 395, 3)))

softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), pyxb.binding.datatypes.string, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 396, 3)))

softwareInstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=softwareInstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 397, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 397, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 392, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'UUID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 393, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'username')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 394, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'password')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 395, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'executionEnvRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 396, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(softwareInstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 397, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
softwareInstallArgsType._Automaton = _BuildAutomaton_20()




softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'UUID'), pyxb.binding.datatypes.string, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 403, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 404, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 405, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'username'), pyxb.binding.datatypes.string, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 406, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'password'), pyxb.binding.datatypes.string, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 407, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), pyxb.binding.datatypes.string, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 408, 3)))

softwareUpdateArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=softwareUpdateArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 409, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 409, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'UUID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 403, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 404, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 405, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'username')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 406, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'password')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 407, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'executionEnvRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 408, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(softwareUpdateArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 409, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
softwareUpdateArgsType._Automaton = _BuildAutomaton_21()




softwareUninstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'UUID'), pyxb.binding.datatypes.string, scope=softwareUninstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 415, 3)))

softwareUninstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=softwareUninstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 416, 3)))

softwareUninstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'executionEnvRef'), pyxb.binding.datatypes.string, scope=softwareUninstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 417, 3)))

softwareUninstallArgsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'anyArg'), anyArgType, scope=softwareUninstallArgsType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 418, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 418, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUninstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'UUID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 415, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(softwareUninstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 416, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(softwareUninstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'executionEnvRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 417, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(softwareUninstallArgsType._UseForTag(pyxb.namespace.ExpandedName(None, u'anyArg')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 418, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
softwareUninstallArgsType._Automaton = _BuildAutomaton_22()




execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'reset'), resetArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 424, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'reboot'), rebootArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 425, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'upload'), uploadArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 426, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'download'), downloadArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 427, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'softwareInstall'), softwareInstallArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 428, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'softwareUpdate'), softwareUpdateArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 429, 12)))

execReqArgsListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'softwareUninstall'), softwareUninstallArgsType, scope=execReqArgsListType, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 430, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 424, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 425, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 426, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 427, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 428, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 429, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 430, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'reset')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 424, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'reboot')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 425, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'upload')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 426, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'download')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 427, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'softwareInstall')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 428, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'softwareUpdate')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 429, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(execReqArgsListType._UseForTag(pyxb.namespace.ExpandedName(None, u'softwareUninstall')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 430, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
execReqArgsListType._Automaton = _BuildAutomaton_23()




responseTypeInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'responseTypeValue'), responseType, scope=responseTypeInfo, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 464, 12)))

responseTypeInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationURI'), pyxb.binding.datatypes.anyURI, scope=responseTypeInfo, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 465, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 465, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(responseTypeInfo._UseForTag(pyxb.namespace.ExpandedName(None, u'responseTypeValue')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 464, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(responseTypeInfo._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationURI')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 465, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
responseTypeInfo._Automaton = _BuildAutomaton_24()




operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'responseStatusCode'), responseStatusCode, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 473, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), requestID, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 474, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'primitiveContent'), primitiveContent, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 475, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'to'), pyxb.binding.datatypes.anyURI, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 476, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'from'), ID, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 477, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), timestamp, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 478, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), absRelTimestamp, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 479, 3)))

operationResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventCategory'), eventCat, scope=operationResult, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 480, 3)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 475, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 476, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 477, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 478, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 479, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 480, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'responseStatusCode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 473, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'requestIdentifier')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 474, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'primitiveContent')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 475, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'to')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 476, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'from')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 477, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'originatingTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 478, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 479, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(operationResult._UseForTag(pyxb.namespace.ExpandedName(None, u'eventCategory')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 480, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
operationResult._Automaton = _BuildAutomaton_25()




resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resourceType'), resourceType, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3)))

resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resourceID'), ID, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3)))

resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'parentID'), nhURI, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3)))

resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creationTime'), timestamp, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3)))

resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'lastModifiedTime'), timestamp, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3)))

resource_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'labels'), labels, scope=resource_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(resource_._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
resource_._Automaton = _BuildAutomaton_26()




aggregatedNotification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notification'), notification_, scope=aggregatedNotification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 37, 24)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 37, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(aggregatedNotification_._UseForTag(pyxb.namespace.ExpandedName(None, u'notification')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 37, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
aggregatedNotification_._Automaton = _BuildAutomaton_27()




notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationEvent'), CTD_ANON_3, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 43, 24)))

notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'verificationRequest'), pyxb.binding.datatypes.boolean, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 58, 24)))

notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'subscriptionDeletion'), pyxb.binding.datatypes.boolean, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 59, 24)))

notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'subscriptionReference'), pyxb.binding.datatypes.anyURI, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 60, 24)))

notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 61, 24)))

notification_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI'), pyxb.binding.datatypes.anyURI, scope=notification_, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 62, 24)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 43, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 58, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 59, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 60, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 61, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 62, 24))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationEvent')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 43, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'verificationRequest')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 58, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'subscriptionDeletion')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 59, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'subscriptionReference')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 60, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 61, 24))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(notification_._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 62, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
notification_._Automaton = _BuildAutomaton_28()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'representation'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 46, 38)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationMonitor'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 47, 38)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 46, 38))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 47, 38))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'representation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 46, 38))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, u'operationMonitor')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 47, 38))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_29()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operation'), operation, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 50, 51)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originator'), ID, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 51, 51)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 50, 51))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 51, 51))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'operation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 50, 51))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, u'originator')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-notification-v1_3_0.xsd', 51, 51))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_30()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operation'), operation, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 37, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'to'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 39, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'from'), ID, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 41, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), requestID, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 43, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resourceType'), resourceType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 45, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'name'), pyxb.binding.datatypes.NCName, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 47, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'primitiveContent'), primitiveContent, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 49, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'role'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 51, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), timestamp, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 53, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp'), absRelTimestamp, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 55, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), absRelTimestamp, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 57, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationExecutionTime'), absRelTimestamp, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 59, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'responseType'), responseTypeInfo, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 61, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultPersistence'), absRelTimestamp, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 63, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultContent'), resultContent, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 65, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventCategory'), eventCat, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 67, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deliveryAggregation'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 69, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 71, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'filterCriteria'), filterCriteria, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 73, 10)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'discoveryResultType'), discResType, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 75, 10)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 45, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 47, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 49, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 51, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 53, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 55, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 57, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 59, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 61, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 63, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 65, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 67, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 69, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 71, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 73, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 75, 10))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'operation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 37, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'to')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 39, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'from')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 41, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'requestIdentifier')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 43, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 45, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'name')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 47, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'primitiveContent')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 49, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'role')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 51, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'originatingTimestamp')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 53, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'requestExpirationTimestamp')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 55, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 57, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'operationExecutionTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 59, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'responseType')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 61, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'resultPersistence')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 63, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'resultContent')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 65, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'eventCategory')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 67, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'deliveryAggregation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 69, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'groupRequestIdentifier')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 71, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'filterCriteria')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 73, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, u'discoveryResultType')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-requestPrimitive-v1_3_0.xsd', 75, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_31()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'responseStatusCode'), responseStatusCode, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 39, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestIdentifier'), requestID, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 41, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'primitiveContent'), primitiveContent, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 43, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'to'), ID, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 45, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'from'), ID, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 47, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originatingTimestamp'), timestamp, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 49, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp'), absRelTimestamp, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 51, 10)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventCategory'), eventCat, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 53, 10)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 43, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 45, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 47, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 49, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 51, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 53, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'responseStatusCode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 39, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'requestIdentifier')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 41, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'primitiveContent')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 43, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'to')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 45, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'from')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 47, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'originatingTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 49, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'resultExpirationTimestamp')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 51, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, u'eventCategory')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 53, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_32()




aggregatedResponse_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'responsePrimitive'), CTD_ANON_6, scope=aggregatedResponse_, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 33, 2)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(aggregatedResponse_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'responsePrimitive')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-responsePrimitive-v1_3_0.xsd', 67, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
aggregatedResponse_._Automaton = _BuildAutomaton_33()




eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'createdBefore'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 69, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'createdAfter'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 70, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'modifiedSince'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 71, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'unmodifiedSince'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 72, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTagSmaller'), pyxb.binding.datatypes.positiveInteger, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 73, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTagBigger'), pyxb.binding.datatypes.nonNegativeInteger, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 74, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expireBefore'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 75, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expireAfter'), timestamp, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 76, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sizeAbove'), pyxb.binding.datatypes.nonNegativeInteger, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 77, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sizeBelow'), pyxb.binding.datatypes.positiveInteger, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 78, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationMonitor'), operation, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 79, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attribute'), attribute, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 80, 3)))

eventNotificationCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationEventType'), notificationEventType, scope=eventNotificationCriteria, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 81, 3)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 69, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 70, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 71, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 72, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 73, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 74, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 75, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 76, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 77, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 78, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=5L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 79, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 80, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=4L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 81, 3))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'createdBefore')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 69, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'createdAfter')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 70, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'modifiedSince')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 71, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'unmodifiedSince')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 72, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTagSmaller')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 73, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTagBigger')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 74, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'expireBefore')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 75, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'expireAfter')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 76, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'sizeAbove')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 77, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'sizeBelow')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 78, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'operationMonitor')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 79, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'attribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 80, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(eventNotificationCriteria._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationEventType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 81, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
eventNotificationCriteria._Automaton = _BuildAutomaton_34()




batchNotify._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'number'), pyxb.binding.datatypes.nonNegativeInteger, scope=batchNotify, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 87, 3)))

batchNotify._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'duration'), pyxb.binding.datatypes.duration, scope=batchNotify, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 88, 3)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(batchNotify._UseForTag(pyxb.namespace.ExpandedName(None, u'number')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 87, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(batchNotify._UseForTag(pyxb.namespace.ExpandedName(None, u'duration')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 88, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
batchNotify._Automaton = _BuildAutomaton_35()




rateLimit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxNrOfNotify'), pyxb.binding.datatypes.nonNegativeInteger, scope=rateLimit, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 94, 3)))

rateLimit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'timeWindow'), pyxb.binding.datatypes.duration, scope=rateLimit, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 95, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 94, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 95, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(rateLimit._UseForTag(pyxb.namespace.ExpandedName(None, u'maxNrOfNotify')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 94, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(rateLimit._UseForTag(pyxb.namespace.ExpandedName(None, u'timeWindow')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 95, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
rateLimit._Automaton = _BuildAutomaton_36()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AE'), CTD_ANON_31, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 37, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), acpType, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 54, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cseType'), cseTypeID, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 55, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSE-ID'), ID, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 56, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'supportedResourceType'), STD_ANON_12, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 57, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), poaList, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 62, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeLink'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 63, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 67, 28)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'delivery'), CTD_ANON_14, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 34, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locationPolicy'), CTD_ANON_41, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm2mServiceSubscriptionProfile'), CTD_ANON_19, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mgmtCmd'), CTD_ANON_20, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'node'), CTD_ANON_43, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 45, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'remoteCSE'), CTD_ANON_46, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 39, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'request'), CTD_ANON_23, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'schedule'), CTD_ANON_24, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedAppRule'), CTD_ANON_26, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 32, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'statsCollect'), CTD_ANON_28, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 32, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'statsConfig'), CTD_ANON_29, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 33, 1)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 54, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 55, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 63, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 66, 24))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 54, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'cseType')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 55, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'CSE-ID')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 56, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'supportedResourceType')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 57, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'pointOfAccess')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 62, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 67, 28))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'remoteCSE')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 69, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'node')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 70, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'AE')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 71, 32))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 72, 32))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 73, 32))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 74, 32))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 75, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mgmtCmd')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 76, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locationPolicy')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 77, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'statsConfig')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 78, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'statsCollect')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 79, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'request')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 80, 32))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'delivery')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 81, 32))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'schedule')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 82, 32))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm2mServiceSubscriptionProfile')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 83, 32))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedAppRule')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-CSEBase-v1_3_0.xsd', 84, 32))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_28._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_37()




def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(resourceWrapper._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
resourceWrapper._Automaton = _BuildAutomaton_38()




regularResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), acpType, scope=regularResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5)))

regularResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expirationTime'), timestamp, scope=regularResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(regularResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
regularResource._Automaton = _BuildAutomaton_39()




announcedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs'), acpType, scope=announcedResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5)))

announcedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expirationTime'), timestamp, scope=announcedResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5)))

announcedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'link'), pyxb.binding.datatypes.anyURI, scope=announcedResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(announcedResource._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
announcedResource._Automaton = _BuildAutomaton_40()




announceableSubordinateResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expirationTime'), timestamp, scope=announceableSubordinateResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5)))

announceableSubordinateResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'announceTo'), listOfURIs, scope=announceableSubordinateResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5)))

announceableSubordinateResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'announcedAttribute'), STD_ANON_23, scope=announceableSubordinateResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(announceableSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
announceableSubordinateResource._Automaton = _BuildAutomaton_41()




announcedSubordinateResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expirationTime'), timestamp, scope=announcedSubordinateResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5)))

announcedSubordinateResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'link'), pyxb.binding.datatypes.anyURI, scope=announcedSubordinateResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(announcedSubordinateResource._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
announcedSubordinateResource._Automaton = _BuildAutomaton_42()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'appName'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 77, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'App-ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 78, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'AE-ID'), ID, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 79, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), poaList, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 80, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 81, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeLink'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 82, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestReachability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 83, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 87, 7)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc'), CTD_ANON_10, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 55, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), CTD_ANON_11, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc'), CTD_ANON_17, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 63, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc'), CTD_ANON_25, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 54, 1)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 77, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 80, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 81, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 82, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 83, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 86, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'appName')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 77, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'App-ID')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 78, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'AE-ID')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 79, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'pointOfAccess')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 80, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 81, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 82, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'requestReachability')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 83, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 87, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 89, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 90, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 91, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 92, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 93, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 94, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 95, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 96, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_43()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'privileges'), setOfAcrs, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 40, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'selfPrivileges'), setOfAcrs, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 41, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 45, 7)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 44, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'privileges')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'selfPrivileges')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 45, 7))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 47, 7))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_44()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'privileges'), setOfAcrs, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 62, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'selfPrivileges'), setOfAcrs, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 63, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 67, 7)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 66, 6))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'privileges')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 62, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'selfPrivileges')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 63, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 67, 7))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 69, 7))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_45()




announceableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'announceTo'), listOfURIs, scope=announceableResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5)))

announceableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'announcedAttribute'), STD_ANON_22, scope=announceableResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(announceableResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
announceableResource._Automaton = _BuildAutomaton_46()




announcedMgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtDefinition'), mgmtDefinition, scope=announcedMgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5)))

announcedMgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'objectIDs'), listOfURIs, scope=announcedMgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5)))

announcedMgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'objectPaths'), listOfURIs, scope=announcedMgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5)))

announcedMgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'description'), pyxb.binding.datatypes.string, scope=announcedMgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(announcedMgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
announcedMgmtResource._Automaton = _BuildAutomaton_47()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), CTD_ANON_11, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 73, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 75, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxByteSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 76, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxInstanceAge'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 77, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 78, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentByteSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 79, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 80, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 81, 6)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 85, 7)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'contentInstance'), CTD_ANON_12, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 32, 1)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'contentInstanceAnnc'), CTD_ANON_13, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 51, 1)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 75, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 76, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 77, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 78, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 79, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 80, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 81, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 84, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 73, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 75, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'maxByteSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 76, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'maxInstanceAge')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 77, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 78, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'currentByteSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 79, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'locationID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 80, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 81, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 85, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'contentInstance')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 87, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'contentInstanceAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 88, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 89, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 90, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 91, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_48()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 38, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 40, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'contentInfo'), contentInfo, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 41, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'contentSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 42, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 43, 6)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'content'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 44, 6)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 40, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 41, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 43, 6))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 38, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 40, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'contentInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 41, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'contentSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 42, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 43, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, u'content')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 44, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_49()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 57, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'contentInfo'), contentInfo, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 59, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'contentSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 60, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 61, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'content'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 62, 6)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 59, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 60, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 61, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 62, 6))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 57, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'contentInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 59, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'contentSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 60, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 61, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, u'content')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 62, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_50()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 41, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'source'), ID, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 43, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'target'), ID, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 44, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'lifespan'), timestamp, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 45, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventCat'), eventCat, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 46, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deliveryMetaData'), deliveryMetaData, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 47, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'aggregatedRequest'), aggregatedRequest, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 48, 6)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 52, 7)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 51, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 41, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'source')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 43, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'target')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 44, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'lifespan')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 45, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'eventCat')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 46, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'deliveryMetaData')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 47, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'aggregatedRequest')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 48, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 52, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-delivery-v1_3_0.xsd', 54, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_51()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 39, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventID'), pyxb.binding.datatypes.string, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 40, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventType'), eventType, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 41, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventStart'), timestamp, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 42, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventEnd'), timestamp, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 43, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationType'), STD_ANON_24, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 44, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'dataSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 49, 6)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 53, 7)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 42, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 43, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 44, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 49, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 52, 6))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 39, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'eventID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'eventType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'eventStart')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 42, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'eventEnd')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 43, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'operationType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 44, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'dataSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 49, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 53, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 54, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_52()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execStatus'), execStatusType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 39, 17)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execResult'), execResultType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 40, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execDisable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 41, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execTarget'), nodeID, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 42, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execMode'), execModeType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 43, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execFrequency'), pyxb.binding.datatypes.duration, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 44, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execDelay'), pyxb.binding.datatypes.duration, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 45, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execNumber'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 46, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execReqArgs'), execReqArgsListType, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 47, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 51, 7)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 41, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 43, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 44, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 45, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 46, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 47, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 50, 6))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 39, 17))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execResult')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execDisable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execTarget')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 42, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execMode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 43, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execFrequency')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 44, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execDelay')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 45, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execNumber')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 46, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'execReqArgs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 47, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 51, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 52, 7))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_53()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberType'), memberType, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 70, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 71, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 72, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberIDs'), listOfURIs, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 73, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs'), listOfURIs, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 74, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberTypeValidated'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 75, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'consistencyStrategy'), consistencyStrategy, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 76, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'groupName'), pyxb.binding.datatypes.string, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 77, 6)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 82, 28)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 70, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 71, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 72, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 73, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 74, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 75, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 76, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 77, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 81, 24))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'memberType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 70, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 71, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 72, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'memberIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 73, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 74, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'memberTypeValidated')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 75, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'consistencyStrategy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 76, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'groupName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 77, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 82, 28))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 83, 28))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_54()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationSource'), locationSource, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 68, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod'), pyxb.binding.datatypes.duration, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 69, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationTargetID'), nodeID, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 70, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationServer'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 71, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationContainerID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 72, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationContainerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 73, 6)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationStatus'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 74, 6)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 68, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 69, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 70, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 71, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 72, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 73, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 74, 6))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationSource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 68, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 69, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationTargetID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 70, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationServer')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 71, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationContainerID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 72, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationContainerName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 73, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, u'locationStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 74, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_55()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'serviceRoles'), STD_ANON_25, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 40, 6)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 48, 7)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedNode'), CTD_ANON_27, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 32, 1)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 40, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 47, 6))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'serviceRoles')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 40, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 48, 7))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'serviceSubscribedNode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 50, 8))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-m2mServiceSubscriptionProfile-v1_3_0.xsd', 51, 8))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_56()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'execInstance'), CTD_ANON_16, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-execInstance-v1_3_0.xsd', 32, 1)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 40, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cmdType'), cmdType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 41, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execReqArgs'), execReqArgsListType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 42, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execEnable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 43, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execTarget'), nodeID, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 44, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execMode'), execModeType, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 45, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execFrequency'), pyxb.binding.datatypes.duration, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 46, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execDelay'), pyxb.binding.datatypes.duration, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 47, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'execNumber'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 48, 6)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 52, 7)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 40, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 42, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 45, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 46, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 47, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 48, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 40, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'cmdType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 41, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execReqArgs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 42, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execEnable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 43, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execTarget')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 44, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execMode')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 45, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execFrequency')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 46, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execDelay')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 47, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'execNumber')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 48, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 52, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'execInstance')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 54, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-mgmtCmd-v1_3_0.xsd', 55, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_57()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pollingChannelURI'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 42, 6)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, u'pollingChannelURI')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 42, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_58()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc'), CTD_ANON_10, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 55, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc'), CTD_ANON_11, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 67, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc'), CTD_ANON_17, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 63, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'locationPolicyAnnc'), CTD_ANON_18, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 61, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'nodeAnnc'), CTD_ANON_44, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 80, 4)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), CTD_ANON_21, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cseType'), cseTypeID, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 80, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), poaList, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 81, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSEBase'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 82, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSE-ID'), ID, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 83, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestReachability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 84, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeLink'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 85, 6)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 89, 28)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc'), CTD_ANON_25, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 54, 1)))

CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 80, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 81, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 82, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 83, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 84, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 85, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 88, 24))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'cseType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 80, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'pointOfAccess')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 81, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'CSEBase')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 82, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'CSE-ID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 83, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'requestReachability')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 84, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeLink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 85, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 89, 28))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'nodeAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 91, 32))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 92, 32))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'containerAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 93, 32))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 94, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 95, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 96, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicyAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 97, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 98, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 99, 32))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scheduleAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 100, 32))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'locationPolicyAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 101, 32))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_59()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 40, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operation'), operation, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 42, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'target'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 43, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'originator'), ID, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 44, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestID'), requestID, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 45, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'metaInformation'), metaInformation, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 46, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'primitiveContent'), primitiveContent, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 47, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestStatus'), requestStatus, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 48, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'operationResult'), operationResult, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 49, 6)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 53, 7)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 52, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 40, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'operation')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 42, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'target')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 43, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'originator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 44, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'requestID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 45, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'metaInformation')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 46, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'primitiveContent')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 47, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'requestStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 48, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'operationResult')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 49, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 53, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-request-v1_3_0.xsd', 55, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_60()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scheduleElement'), scheduleEntries, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 39, 6)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 43, 7)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 42, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 550, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 551, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 552, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'scheduleElement')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 39, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 43, 7))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 45, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_61()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'scheduleElement'), scheduleEntries, scope=CTD_ANON_25, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 60, 6)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 60, 6))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 571, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 572, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, u'scheduleElement')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 60, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_62()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'applicableCredIDs'), listOfM2MID, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 39, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'allowedApp-IDs'), listOfM2MID, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 40, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'allowedAEs'), listOfM2MID, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 41, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 45, 7)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 39, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 40, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 41, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 44, 6))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'applicableCredIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 39, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'allowedApp-IDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'allowedAEs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 45, 7))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedAppRule-v1_3_0.xsd', 46, 7))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_63()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeID'), nodeID, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 39, 6)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSE-ID'), ID, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 40, 6)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deviceIdentifier'), STD_ANON_26, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 41, 6)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ruleLinks'), listOfURIs, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 46, 24)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 50, 7)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 40, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 41, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 46, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 49, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 39, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'CSE-ID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'deviceIdentifier')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'ruleLinks')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 46, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 50, 7))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-serviceSubscribedNode-v1_3_0.xsd', 51, 7))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_64()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 39, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'statsCollectID'), pyxb.binding.datatypes.string, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 40, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'collectingEntityID'), ID, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 41, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'collectedEntityID'), ID, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 42, 24)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'statsRuleStatus'), statsRuleStatusType, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 43, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'statModel'), statModelType, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 44, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'collectPeriod'), scheduleEntries, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 45, 6)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventID'), pyxb.binding.datatypes.string, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 46, 24)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 50, 7)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 45, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 46, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 49, 6))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 39, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'statsCollectID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 40, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'collectingEntityID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 41, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'collectedEntityID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 42, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'statsRuleStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 43, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'statModel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 44, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'collectPeriod')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 45, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'eventID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 46, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 50, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsCollect-v1_3_0.xsd', 51, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_65()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventConfig'), CTD_ANON_15, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventConfig-v1_3_0.xsd', 32, 1)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 40, 6)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 44, 7)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 43, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 40, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 44, 7))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'eventConfig')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 46, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-statsConfig-v1_3_0.xsd', 47, 8))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_66()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'schedule'), CTD_ANON_24, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'eventNotificationCriteria'), eventNotificationCriteria, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 40, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'expirationCounter'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 41, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationURI'), listOfURIs, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 42, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'groupID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 43, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 44, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'batchNotify'), batchNotify, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 45, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'rateLimit'), rateLimit, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 46, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'preSubscriptionNotify'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 47, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pendingNotification'), pendingNotification, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 48, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationStoragePriority'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 49, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'latestNotify'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 50, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationContentType'), notificationContentType, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 51, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'notificationEventCat'), eventCat, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 52, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 53, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'subscriberURI'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 54, 6)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 58, 7)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 40, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 41, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 43, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 44, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 45, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 46, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 47, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 48, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 49, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 50, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 52, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 53, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 54, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 57, 6))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'eventNotificationCriteria')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 40, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationCounter')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 41, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationURI')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 42, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'groupID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 43, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationForwardingURI')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 44, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'batchNotify')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 45, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'rateLimit')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 46, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'preSubscriptionNotify')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 47, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'pendingNotification')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 48, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationStoragePriority')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 49, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'latestNotify')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 50, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationContentType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 51, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'notificationEventCat')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 52, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 53, 6))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'subscriberURI')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 54, 6))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 58, 7))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'schedule')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 59, 7))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_67()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'appName'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 44, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'App-ID'), pyxb.binding.datatypes.string, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 45, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'AE-ID'), ID, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 46, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), poaList, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 47, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 48, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeLink'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 49, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestReachability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 50, 6)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 54, 7)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), CTD_ANON_21, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'schedule'), CTD_ANON_24, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 44, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 47, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 48, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 49, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 53, 6))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'appName')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 44, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'App-ID')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 45, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'AE-ID')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 46, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'pointOfAccess')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 47, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 48, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 49, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'requestReachability')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 50, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 54, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 56, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 57, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 58, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 59, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 60, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'schedule')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-AE-v1_3_0.xsd', 61, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_68()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devID'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 65, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devType'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 66, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'areaNwkId'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 67, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sleepInterval'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 68, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sleepDuration'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 69, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devStatus'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 70, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'listOfNeighbors'), listOfURIs, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 71, 6)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 75, 7)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 65, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 66, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 67, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 68, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 69, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 70, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 71, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 74, 6))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'devID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 65, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'devType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 66, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'areaNwkId')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 67, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'sleepInterval')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 68, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'sleepDuration')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 69, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'devStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 70, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'listOfNeighbors')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 71, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 75, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 76, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_69()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'areaNwkType'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 60, 6)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'listOfDevices'), listOfURIs, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 61, 6)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 65, 7)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 60, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 61, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 64, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'areaNwkType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 60, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'listOfDevices')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 61, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 65, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 66, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_70()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'batteryLevel'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 61, 6)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'batteryStatus'), batteryStatus, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 62, 6)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 66, 7)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 62, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 65, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'batteryLevel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 61, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'batteryStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 62, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 66, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 67, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_71()




mgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtDefinition'), mgmtDefinition, scope=mgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5)))

mgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'objectIDs'), listOfURIs, scope=mgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5)))

mgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'objectPaths'), listOfURIs, scope=mgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5)))

mgmtResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'description'), pyxb.binding.datatypes.string, scope=mgmtResource, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(mgmtResource._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
mgmtResource._Automaton = _BuildAutomaton_72()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'stateTag'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 39, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 41, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 42, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxByteSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 43, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxInstanceAge'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 44, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 45, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentByteSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 46, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 47, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'ontologyRef'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 48, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'latest'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 51, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'oldest'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 52, 6)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 54, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'contentInstance'), CTD_ANON_12, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-contentInstance-v1_3_0.xsd', 32, 1)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 42, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 43, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 44, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 47, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 48, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 53, 6))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'stateTag')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 39, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 41, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'maxNrOfInstances')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 42, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'maxByteSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 43, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'maxInstanceAge')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 44, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'currentNrOfInstances')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 45, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'currentByteSize')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 46, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'locationID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 47, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'ontologyRef')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 48, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'latest')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 51, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'oldest')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 52, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 54, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'contentInstance')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 56, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 57, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 58, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_73()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'capabilityName'), pyxb.binding.datatypes.string, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 65, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attached'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 66, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus'), actionStatus, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 67, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentState'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 68, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'enable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 69, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'disable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 70, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 74, 7)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 65, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 66, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 67, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 68, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 69, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 70, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 73, 6))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'capabilityName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 65, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'attached')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 66, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 67, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'currentState')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 68, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'enable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 69, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'disable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 70, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 74, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 75, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_74()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deviceLabel'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 66, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'manufacturer'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 67, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'model'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 68, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deviceType'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 69, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fwVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 70, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'swVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 71, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hwVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 72, 6)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 76, 7)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 66, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 67, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 68, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 69, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 70, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 71, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 72, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 75, 6))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'deviceLabel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 66, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'manufacturer')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 67, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'model')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 68, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'deviceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 69, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'fwVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 70, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'swVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 71, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'hwVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 72, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 76, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 77, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_75()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logTypeId'), logTypeId, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 64, 6)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logData'), pyxb.binding.datatypes.string, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 65, 6)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStatus'), logStatus, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 66, 6)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStart'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 67, 6)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStop'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 68, 6)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 72, 7)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 64, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 65, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 66, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 67, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 68, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 71, 6))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'logTypeId')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 64, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'logData')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 65, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'logStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 66, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'logStart')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 67, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'logStop')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 68, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 72, 7))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 73, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_76()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 64, 6)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'firmwareName'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 65, 6)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 66, 6)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'update'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 67, 6)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'updateStatus'), actionStatus, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 68, 6)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 72, 7)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 64, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 65, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 66, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 67, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 68, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 71, 6))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 64, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'firmwareName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 65, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 66, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'update')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 67, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'updateStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 68, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 72, 7))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 73, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_77()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'creator'), ID, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 40, 24)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberType'), memberType, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 41, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 42, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 43, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberIDs'), listOfURIs, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 44, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs'), listOfURIs, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 45, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memberTypeValidated'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 46, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'consistencyStrategy'), consistencyStrategy, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 47, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'groupName'), pyxb.binding.datatypes.string, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 48, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fanOutPoint'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 51, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 54, 7)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 40, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 45, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 47, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 48, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 53, 6))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'creator')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 40, 24))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'memberType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 41, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'currentNrOfMembers')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 42, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'maxNrOfMembers')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 43, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'memberIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 44, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'membersAccessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 45, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'memberTypeValidated')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 46, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'consistencyStrategy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 47, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'groupName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 48, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'fanOutPoint')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 51, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 54, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 55, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_78()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationSource'), locationSource, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 40, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod'), pyxb.binding.datatypes.duration, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 41, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationTargetID'), nodeID, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 42, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationServer'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 43, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationContainerID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 44, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationContainerName'), pyxb.binding.datatypes.string, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 45, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'locationStatus'), pyxb.binding.datatypes.string, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 46, 6)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 50, 7)))

CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 41, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 42, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 43, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 44, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 45, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 49, 6))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationSource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 40, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationUpdatePeriod')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 41, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationTargetID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 42, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationServer')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 43, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationContainerID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 44, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationContainerName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 45, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'locationStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 46, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 50, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-locationPolicy-v1_3_0.xsd', 52, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_79()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memAvailable'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 61, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memTotal'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 62, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 66, 7)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 62, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 65, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'memAvailable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 61, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'memTotal')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 62, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 66, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 67, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_80()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'activeCmdhPolicy'), CTD_ANON_48, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 33, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfo'), CTD_ANON_49, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 32, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfo'), CTD_ANON_50, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 32, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'battery'), CTD_ANON_51, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cmdhPolicy'), CTD_ANON_59, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 33, 4)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceCapability'), CTD_ANON_60, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceInfo'), CTD_ANON_61, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventLog'), CTD_ANON_62, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firmware'), CTD_ANON_63, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'memory'), CTD_ANON_64, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeID'), nodeID, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 52, 6)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hostedCSELink'), ID, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 53, 6)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 57, 7)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reboot'), CTD_ANON_65, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'software'), CTD_ANON_66, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 33, 1)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 53, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 56, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 52, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'hostedCSELink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 53, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 57, 7))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'memory')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 59, 8))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'battery')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 60, 8))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 61, 8))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 62, 8))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firmware')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 63, 8))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'software')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 64, 8))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceInfo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 65, 8))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceCapability')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 66, 8))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reboot')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 67, 8))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'eventLog')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 68, 8))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cmdhPolicy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 69, 8))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'activeCmdhPolicy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 70, 8))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 71, 8))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_81()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfoAnnc'), CTD_ANON_32, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 58, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfoAnnc'), CTD_ANON_33, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 53, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'batteryAnnc'), CTD_ANON_34, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 54, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceCapabilityAnnc'), CTD_ANON_36, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 58, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deviceInfoAnnc'), CTD_ANON_37, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 59, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'eventLogAnnc'), CTD_ANON_38, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 57, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firmwareAnnc'), CTD_ANON_39, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 57, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'memoryAnnc'), CTD_ANON_42, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 54, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeID'), nodeID, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 87, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hostedCSELink'), ID, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 88, 24)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 92, 28)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rebootAnnc'), CTD_ANON_45, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 54, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'softwareAnnc'), CTD_ANON_47, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 61, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 88, 24))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 91, 24))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 87, 24))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'hostedCSELink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 88, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 92, 28))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'memoryAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 94, 32))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'batteryAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 95, 32))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'areaNwkInfoAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 96, 32))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'areaNwkDeviceInfoAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 97, 32))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firmwareAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 98, 32))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'softwareAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 99, 32))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceInfoAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 100, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deviceCapabilityAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 101, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rebootAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 102, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'eventLogAnnc')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 103, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-node-v1_3_0.xsd', 104, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_82()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'reboot'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 61, 6)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'factoryReset'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 62, 6)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 66, 7)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 62, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 65, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'reboot')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 61, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'factoryReset')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 62, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 66, 7))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 67, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_83()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy'), CTD_ANON_9, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-accessControlPolicy-v1_3_0.xsd', 33, 1)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'container'), CTD_ANON_35, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-container-v1_3_0.xsd', 33, 1)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CTD_ANON_40, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-group-v1_3_0.xsd', 33, 1)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel'), CTD_ANON_21, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-pollingChannel-v1_3_0.xsd', 33, 1)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cseType'), cseTypeID, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 46, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'pointOfAccess'), poaList, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 47, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSEBase'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 48, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'CSE-ID'), ID, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 49, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'M2M-Ext-ID'), externalID, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 50, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'Trigger-Recipient-ID'), triggerRecipientID, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 51, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestReachability'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 52, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'nodeLink'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 53, 6)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 57, 28)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'schedule'), CTD_ANON_24, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-schedule-v1_3_0.xsd', 33, 1)))

CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 46, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 47, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 50, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 51, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 53, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 56, 24))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'cseType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 46, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'pointOfAccess')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 47, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'CSEBase')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 48, 6))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'CSE-ID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 49, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'M2M-Ext-ID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 50, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'Trigger-Recipient-ID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 51, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'requestReachability')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 52, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'nodeLink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 53, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 57, 28))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'container')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 59, 32))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 60, 32))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'accessControlPolicy')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 61, 32))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 62, 32))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pollingChannel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 63, 32))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'schedule')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-remoteCSE-v1_3_0.xsd', 64, 32))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_84()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 68, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'softwareName'), pyxb.binding.datatypes.string, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 69, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 70, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'install'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 71, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'uninstall'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 72, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'installStatus'), actionStatus, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 73, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'activate'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 74, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deactivate'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 75, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'activeStatus'), actionStatus, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 76, 6)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 80, 7)))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 68, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 69, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 70, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 71, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 72, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 73, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 74, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 75, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 76, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 79, 6))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 538, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 539, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'link')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 540, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 595, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 596, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 597, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 598, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 68, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'softwareName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 69, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 70, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'install')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 71, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'uninstall')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 72, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'installStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 73, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'activate')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 74, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'deactivate')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 75, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'activeStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 76, 6))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 80, 7))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 81, 7))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_85()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'activeCmdhPolicyLink'), ID, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 40, 13)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, u'activeCmdhPolicyLink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-activeCmdhPolicy-v1_3_0.xsd', 40, 13))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_86()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devID'), pyxb.binding.datatypes.string, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 39, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devType'), pyxb.binding.datatypes.string, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 40, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'areaNwkId'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 41, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sleepInterval'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 42, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'sleepDuration'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 43, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'devStatus'), pyxb.binding.datatypes.string, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 44, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'listOfNeighbors'), listOfURIs, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 45, 6)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 49, 7)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 42, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 43, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 44, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 48, 6))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'devID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 39, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'devType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 40, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'areaNwkId')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 41, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'sleepInterval')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 42, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'sleepDuration')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 43, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'devStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 44, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'listOfNeighbors')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 45, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 49, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkDeviceInfo-v1_3_0.xsd', 50, 7))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_87()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'areaNwkType'), pyxb.binding.datatypes.string, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 39, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'listOfDevices'), listOfURIs, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 40, 6)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 44, 7)))

CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 43, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'areaNwkType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 39, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'listOfDevices')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 40, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 44, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-areaNwkInfo-v1_3_0.xsd', 45, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_88()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'batteryLevel'), pyxb.binding.datatypes.unsignedInt, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 40, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'batteryStatus'), batteryStatus, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 41, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 45, 7)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 44, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'batteryLevel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'batteryStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 45, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-battery-v1_3_0.xsd', 46, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_89()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'applicableEventCategory'), listOfEventCatWithDef, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 40, 12)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'maxBufferSize'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 41, 12)))

CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'storagePriority'), STD_ANON_, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 42, 12)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'applicableEventCategory')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 40, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'maxBufferSize')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 41, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, u'storagePriority')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhBuffer-v1_3_0.xsd', 42, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_90()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'order'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 40, 12)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defEcValue'), eventCat, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 41, 12)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestOrigin'), listOfM2MID, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 42, 12)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestContext'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 43, 12)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestContextNotification'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 44, 12)))

CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestCharacteristics'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 45, 12)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 43, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 44, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 45, 12))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'order')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 40, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'defEcValue')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 41, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'requestOrigin')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 42, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'requestContext')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 43, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'requestContextNotification')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 44, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, u'requestCharacteristics')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefEcValue-v1_3_0.xsd', 45, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_91()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtLink'), mgmtLinkRef, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 46, 14)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=2L, max=None, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 46, 14))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhDefaults-v1_3_0.xsd', 46, 14))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_92()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'applicableEventCategory'), listOfEventCatWithDef, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 40, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaultRequestExpTime'), pyxb.binding.datatypes.long, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 41, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaultResultExpTime'), pyxb.binding.datatypes.long, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 42, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaultOpExecTime'), pyxb.binding.datatypes.long, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 43, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaultRespPersistence'), pyxb.binding.datatypes.long, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 44, 12)))

CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'defaultDelAggregation'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 45, 12)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'applicableEventCategory')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 40, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'defaultRequestExpTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 41, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'defaultResultExpTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 42, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'defaultOpExecTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 43, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'defaultRespPersistence')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 44, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, u'defaultDelAggregation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhEcDefParamValues-v1_3_0.xsd', 45, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_93()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'order'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 41, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestOrigin'), listOfM2MID, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 42, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestContext'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 43, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestContextNotification'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 44, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'requestCharacteristics'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 45, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsEventCategory'), listOfEventCat, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 46, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsRequestExpTime'), listOfMinMax, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 47, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsResultExpTime'), listOfMinMax, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 48, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsOpExecTime'), listOfMinMax, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 49, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsRespPersistence'), listOfMinMax, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 50, 12)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'limitsDelAggregation'), STD_ANON_2, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 51, 12)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 44, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'order')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 41, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'requestOrigin')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 42, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'requestContext')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 43, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'requestContextNotification')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 44, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'requestCharacteristics')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 45, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsEventCategory')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 46, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsRequestExpTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 47, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsResultExpTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 48, 12))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsOpExecTime')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 49, 12))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsRespPersistence')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 50, 12))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, u'limitsDelAggregation')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhLimits-v1_3_0.xsd', 51, 12))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_94()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'applicableEventCategories'), listOfEventCatWithDef, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 41, 13)))

CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtLink'), mgmtLinkRef, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 45, 12)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 45, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'applicableEventCategories')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 41, 13))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNetworkAccessRules-v1_3_0.xsd', 45, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_95()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'targetNetwork'), listOfM2MID, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 40, 12)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'minReqVolume'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 41, 12)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'backOffParameters'), backOffParameters, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 42, 12)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'otherConditions'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 43, 12)))

CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtLink'), mgmtLinkRef, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 48, 12)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'targetNetwork')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 40, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'minReqVolume')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 41, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'backOffParameters')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 42, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'otherConditions')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 43, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtLink')), pyxb.utils.utility.Location('/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhNwAccessRule-v1_3_0.xsd', 48, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_96()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'cmdhPolicyName'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 40, 14)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'mgmtLink'), mgmtLinkRef, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 47, 11)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=4L, max=None, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 47, 11))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'cmdhPolicyName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 40, 14))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtLink')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-cmdhPolicy-v1_3_0.xsd', 47, 11))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_97()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'capabilityName'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 40, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'attached'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 41, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus'), actionStatus, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 42, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'currentState'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 43, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'enable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 44, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'disable'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 45, 6)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 49, 7)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 44, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 45, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 48, 6))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'capabilityName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'attached')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'capabilityActionStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 42, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'currentState')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 43, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'enable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 44, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'disable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 45, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 49, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceCapability-v1_3_0.xsd', 50, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_98()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deviceLabel'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 40, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'manufacturer'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 41, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'model'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 42, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deviceType'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 43, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'fwVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 44, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'swVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 45, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'hwVersion'), pyxb.binding.datatypes.string, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 46, 6)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 50, 7)))

CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 49, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'deviceLabel')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'manufacturer')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'model')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 42, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'deviceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 43, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'fwVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 44, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'swVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 45, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'hwVersion')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 46, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 50, 7))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-deviceInfo-v1_3_0.xsd', 51, 7))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_99()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logTypeId'), logTypeId, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 40, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logData'), pyxb.binding.datatypes.string, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 41, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStatus'), logStatus, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 42, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStart'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 43, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'logStop'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 44, 6)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 48, 7)))

CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 47, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'logTypeId')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'logData')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'logStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 42, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'logStart')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 43, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'logStop')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 44, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 48, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-eventLog-v1_3_0.xsd', 49, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_100()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 40, 6)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'firmwareName'), pyxb.binding.datatypes.string, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 41, 6)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 42, 6)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'update'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 43, 6)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'updateStatus'), actionStatus, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 44, 6)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 48, 7)))

CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 47, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'firmwareName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 42, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'update')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 43, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'updateStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 44, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 48, 7))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-firmware-v1_3_0.xsd', 49, 7))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_101()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memAvailable'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 40, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'memTotal'), pyxb.binding.datatypes.unsignedLong, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 41, 6)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 45, 7)))

CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 44, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'memAvailable')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'memTotal')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 45, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-memory-v1_3_0.xsd', 46, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_102()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'reboot'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 40, 6)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'factoryReset'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 41, 6)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 45, 7)))

CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 44, 6))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'reboot')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'factoryReset')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 45, 7))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-reboot-v1_3_0.xsd', 46, 7))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_103()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'version'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 40, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'softwareName'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 41, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'URL'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 42, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'install'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 43, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'uninstall'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 44, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'installStatus'), actionStatus, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 45, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'activate'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 46, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'deactivate'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 47, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'activeStatus'), actionStatus, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 48, 6)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, u'childResource'), childResourceRef, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 52, 7)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'subscription'), CTD_ANON_30, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-subscription-v1_3_0.xsd', 33, 1)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 46, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 47, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 48, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 51, 6))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceType')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 492, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'resourceID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 493, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'parentID')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 494, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'creationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 495, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'lastModifiedTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'labels')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 497, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'accessControlPolicyIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 506, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'expirationTime')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 507, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'announceTo')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 517, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'announcedAttribute')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 518, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'mgmtDefinition')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 582, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'objectIDs')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 583, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'objectPaths')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 584, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'description')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-commonTypes-v1_3_0.xsd', 585, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'version')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 40, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'softwareName')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 41, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'URL')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 42, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'install')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 43, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'uninstall')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 44, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'installStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 45, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'activate')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 46, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'deactivate')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 47, 6))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'activeStatus')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 48, 6))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, u'childResource')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 52, 7))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'subscription')), pyxb.utils.utility.Location(u'/home/rst/vcs/openmtc-python/serializers/openmtc-onem2m-xml/xsd/v1.3.0/CDT-software-v1_3_0.xsd', 53, 7))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_104()

