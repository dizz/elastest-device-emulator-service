# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.sensor_data import SensorData
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ZigbeeIPE(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_name=None, sensor_data=None):
        """
        ZigbeeIPE - a model defined in Swagger

        :param device_name: The device_name of this ZigbeeIPE.
        :type device_name: str
        :param sensor_data: The sensor_data of this ZigbeeIPE.
        :type sensor_data: SensorData
        """
        self.swagger_types = {
            'device_name': str,
            'sensor_data': SensorData
        }

        self.attribute_map = {
            'device_name': 'deviceName',
            'sensor_data': 'sensor_data'
        }

        self._device_name = device_name
        self._sensor_data = sensor_data

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ZigbeeIPE of this ZigbeeIPE.
        :rtype: ZigbeeIPE
        """
        return deserialize_model(dikt, cls)

    @property
    def device_name(self):
        """
        Gets the device_name of this ZigbeeIPE.

        :return: The device_name of this ZigbeeIPE.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this ZigbeeIPE.

        :param device_name: The device_name of this ZigbeeIPE.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def sensor_data(self):
        """
        Gets the sensor_data of this ZigbeeIPE.

        :return: The sensor_data of this ZigbeeIPE.
        :rtype: SensorData
        """
        return self._sensor_data

    @sensor_data.setter
    def sensor_data(self, sensor_data):
        """
        Sets the sensor_data of this ZigbeeIPE.

        :param sensor_data: The sensor_data of this ZigbeeIPE.
        :type sensor_data: SensorData
        """

        self._sensor_data = sensor_data

