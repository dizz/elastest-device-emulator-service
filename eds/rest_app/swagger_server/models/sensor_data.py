# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.brightness import Brightness
from swagger_server.models.humidity import Humidity
from swagger_server.models.movement import Movement
from swagger_server.models.pressure import Pressure
from swagger_server.models.temperature import Temperature
from swagger_server.models.vibration import Vibration
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class SensorData(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, temperature=None, brightness=None, pressure=None, movement=None, humidity=None, vibration=None):
        """
        SensorData - a model defined in Swagger

        :param temperature: The temperature of this SensorData.
        :type temperature: Temperature
        :param brightness: The brightness of this SensorData.
        :type brightness: Brightness
        :param pressure: The pressure of this SensorData.
        :type pressure: Pressure
        :param movement: The movement of this SensorData.
        :type movement: Movement
        :param humidity: The humidity of this SensorData.
        :type humidity: Humidity
        :param vibration: The vibration of this SensorData.
        :type vibration: Vibration
        """
        self.swagger_types = {
            'temperature': Temperature,
            'brightness': Brightness,
            'pressure': Pressure,
            'movement': Movement,
            'humidity': Humidity,
            'vibration': Vibration
        }

        self.attribute_map = {
            'temperature': 'temperature',
            'brightness': 'brightness',
            'pressure': 'pressure',
            'movement': 'movement',
            'humidity': 'humidity',
            'vibration': 'vibration'
        }

        self._temperature = temperature
        self._brightness = brightness
        self._pressure = pressure
        self._movement = movement
        self._humidity = humidity
        self._vibration = vibration

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorData of this SensorData.
        :rtype: SensorData
        """
        return deserialize_model(dikt, cls)

    @property
    def temperature(self):
        """
        Gets the temperature of this SensorData.

        :return: The temperature of this SensorData.
        :rtype: Temperature
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """
        Sets the temperature of this SensorData.

        :param temperature: The temperature of this SensorData.
        :type temperature: Temperature
        """

        self._temperature = temperature

    @property
    def brightness(self):
        """
        Gets the brightness of this SensorData.

        :return: The brightness of this SensorData.
        :rtype: Brightness
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """
        Sets the brightness of this SensorData.

        :param brightness: The brightness of this SensorData.
        :type brightness: Brightness
        """

        self._brightness = brightness

    @property
    def pressure(self):
        """
        Gets the pressure of this SensorData.

        :return: The pressure of this SensorData.
        :rtype: Pressure
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """
        Sets the pressure of this SensorData.

        :param pressure: The pressure of this SensorData.
        :type pressure: Pressure
        """

        self._pressure = pressure

    @property
    def movement(self):
        """
        Gets the movement of this SensorData.

        :return: The movement of this SensorData.
        :rtype: Movement
        """
        return self._movement

    @movement.setter
    def movement(self, movement):
        """
        Sets the movement of this SensorData.

        :param movement: The movement of this SensorData.
        :type movement: Movement
        """

        self._movement = movement

    @property
    def humidity(self):
        """
        Gets the humidity of this SensorData.

        :return: The humidity of this SensorData.
        :rtype: Humidity
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """
        Sets the humidity of this SensorData.

        :param humidity: The humidity of this SensorData.
        :type humidity: Humidity
        """

        self._humidity = humidity

    @property
    def vibration(self):
        """
        Gets the vibration of this SensorData.

        :return: The vibration of this SensorData.
        :rtype: Vibration
        """
        return self._vibration

    @vibration.setter
    def vibration(self, vibration):
        """
        Sets the vibration of this SensorData.

        :param vibration: The vibration of this SensorData.
        :type vibration: Vibration
        """

        self._vibration = vibration

